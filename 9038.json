{"path":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","commits":[{"id":"a7af39ddfe08efa20e4c56e454a0d5935a085c53","date":1304952961,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70cf8fb9cd4e056e95f82557841131c48c00e28a","date":1307931670,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   *\n   * @param typeName             name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {\n    try {\n      Type type = cas.getTypeSystem().getType(typeName);\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n          .hasNext(); ) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n              .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n              fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      throw new FieldMappingException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"c26f00b574427b55127e869b935845554afde1fa":["70cf8fb9cd4e056e95f82557841131c48c00e28a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70cf8fb9cd4e056e95f82557841131c48c00e28a":["a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","70cf8fb9cd4e056e95f82557841131c48c00e28a","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7af39ddfe08efa20e4c56e454a0d5935a085c53","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"70cf8fb9cd4e056e95f82557841131c48c00e28a":["c26f00b574427b55127e869b935845554afde1fa"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}