{"path":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new IllegalArgumentException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"/dev/null","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new IllegalArgumentException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"/dev/null","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new IllegalArgumentException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.getConstructor().newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new IllegalArgumentException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new IllegalArgumentException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6f80818731469e00f54165ec94aae2db868ea05"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["b88a121b875f9ae2ac50f85cf46dcb680f126357","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}