{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStringsLight ras = new AutomatonTestUtil.RandomAcceptedStringsLight(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","sourceNew":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStringsLight ras = new AutomatonTestUtil.RandomAcceptedStringsLight(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}