{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","commits":[{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ShardTerms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ShardTerms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","sourceNew":"  @Override\n  public boolean onTermChanged(ShardTerms terms) {\n    if (coreContainer.isShutDown()) return false;\n\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\n      if (solrCore == null || solrCore.isClosed()) {\n        return false;\n      }\n\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\n      }\n    } catch (Exception e) {\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ShardTerms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","sourceNew":"  @Override\n  public boolean onTermChanged(ShardTerms terms) {\n    if (coreContainer.isShutDown()) return false;\n\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\n      if (solrCore == null || solrCore.isClosed()) {\n        return false;\n      }\n\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\n      }\n    } catch (Exception e) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean onTermChanged(ShardTerms terms) {\n    if (coreContainer.isShutDown()) return false;\n\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\n      if (solrCore == null || solrCore.isClosed()) {\n        return false;\n      }\n\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\n      }\n    } catch (Exception e) {\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}