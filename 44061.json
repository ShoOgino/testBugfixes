{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","commits":[{"id":"57ba56476d97343104557b0be36f0a46e46af053","date":1463572715,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","pathOld":"/dev/null","sourceNew":"  void checkPointEncoding(final double latitude, final double longitude) {\n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, Geo3DUtil.fromDegrees(latitude), Geo3DUtil.fromDegrees(longitude));\n    long pointValue = Geo3DDocValuesField.encodePoint(point);\n    final double x = Geo3DDocValuesField.decodeXValue(pointValue);\n    final double y = Geo3DDocValuesField.decodeYValue(pointValue);\n    final double z = Geo3DDocValuesField.decodeZValue(pointValue);\n    final GeoPoint pointR = new GeoPoint(x,y,z);\n    // Check whether stable\n    pointValue = Geo3DDocValuesField.encodePoint(x, y, z);\n    assertEquals(x, Geo3DDocValuesField.decodeXValue(pointValue), 0.0);\n    assertEquals(y, Geo3DDocValuesField.decodeYValue(pointValue), 0.0);\n    assertEquals(z, Geo3DDocValuesField.decodeZValue(pointValue), 0.0);\n    // Check whether has some relationship with original point\n    assertEquals(0.0, point.arcDistance(pointR), 0.02);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","pathOld":"/dev/null","sourceNew":"  void checkPointEncoding(final double latitude, final double longitude) {\n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, Geo3DUtil.fromDegrees(latitude), Geo3DUtil.fromDegrees(longitude));\n    long pointValue = Geo3DDocValuesField.encodePoint(point);\n    final double x = Geo3DDocValuesField.decodeXValue(pointValue);\n    final double y = Geo3DDocValuesField.decodeYValue(pointValue);\n    final double z = Geo3DDocValuesField.decodeZValue(pointValue);\n    final GeoPoint pointR = new GeoPoint(x,y,z);\n    // Check whether stable\n    pointValue = Geo3DDocValuesField.encodePoint(x, y, z);\n    assertEquals(x, Geo3DDocValuesField.decodeXValue(pointValue), 0.0);\n    assertEquals(y, Geo3DDocValuesField.decodeYValue(pointValue), 0.0);\n    assertEquals(z, Geo3DDocValuesField.decodeZValue(pointValue), 0.0);\n    // Check whether has some relationship with original point\n    assertEquals(0.0, point.arcDistance(pointR), 0.02);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","pathOld":"/dev/null","sourceNew":"  void checkPointEncoding(final double latitude, final double longitude) {\n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, Geo3DUtil.fromDegrees(latitude), Geo3DUtil.fromDegrees(longitude));\n    long pointValue = Geo3DDocValuesField.encodePoint(point);\n    final double x = Geo3DDocValuesField.decodeXValue(pointValue);\n    final double y = Geo3DDocValuesField.decodeYValue(pointValue);\n    final double z = Geo3DDocValuesField.decodeZValue(pointValue);\n    final GeoPoint pointR = new GeoPoint(x,y,z);\n    // Check whether stable\n    pointValue = Geo3DDocValuesField.encodePoint(x, y, z);\n    assertEquals(x, Geo3DDocValuesField.decodeXValue(pointValue), 0.0);\n    assertEquals(y, Geo3DDocValuesField.decodeYValue(pointValue), 0.0);\n    assertEquals(z, Geo3DDocValuesField.decodeZValue(pointValue), 0.0);\n    // Check whether has some relationship with original point\n    assertEquals(0.0, point.arcDistance(pointR), 0.02);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DDocValues#checkPointEncoding(double,double).mjava","sourceNew":"  void checkPointEncoding(final double latitude, final double longitude) {\n    PlanetModel planetModel = RandomPicks.randomFrom(random(), new PlanetModel[] {PlanetModel.WGS84, PlanetModel.CLARKE_1866});\n    final GeoPoint point = new GeoPoint(planetModel, Geo3DUtil.fromDegrees(latitude), Geo3DUtil.fromDegrees(longitude));\n    long pointValue = planetModel.getDocValueEncoder().encodePoint(point);\n    final double x = planetModel.getDocValueEncoder().decodeXValue(pointValue);\n    final double y = planetModel.getDocValueEncoder().decodeYValue(pointValue);\n    final double z = planetModel.getDocValueEncoder().decodeZValue(pointValue);\n    final GeoPoint pointR = new GeoPoint(x,y,z);\n    // Check whether stable\n    pointValue = planetModel.getDocValueEncoder().encodePoint(x, y, z);\n    assertEquals(x, planetModel.getDocValueEncoder().decodeXValue(pointValue), 0.0);\n    assertEquals(y, planetModel.getDocValueEncoder().decodeYValue(pointValue), 0.0);\n    assertEquals(z, planetModel.getDocValueEncoder().decodeZValue(pointValue), 0.0);\n    // Check whether has some relationship with original point\n    assertEquals(0.0, point.arcDistance(pointR), 0.02);\n  }\n\n","sourceOld":"  void checkPointEncoding(final double latitude, final double longitude) {\n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, Geo3DUtil.fromDegrees(latitude), Geo3DUtil.fromDegrees(longitude));\n    long pointValue = Geo3DDocValuesField.encodePoint(point);\n    final double x = Geo3DDocValuesField.decodeXValue(pointValue);\n    final double y = Geo3DDocValuesField.decodeYValue(pointValue);\n    final double z = Geo3DDocValuesField.decodeZValue(pointValue);\n    final GeoPoint pointR = new GeoPoint(x,y,z);\n    // Check whether stable\n    pointValue = Geo3DDocValuesField.encodePoint(x, y, z);\n    assertEquals(x, Geo3DDocValuesField.decodeXValue(pointValue), 0.0);\n    assertEquals(y, Geo3DDocValuesField.decodeYValue(pointValue), 0.0);\n    assertEquals(z, Geo3DDocValuesField.decodeZValue(pointValue), 0.0);\n    // Check whether has some relationship with original point\n    assertEquals(0.0, point.arcDistance(pointR), 0.02);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"57ba56476d97343104557b0be36f0a46e46af053":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57ba56476d97343104557b0be36f0a46e46af053"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57ba56476d97343104557b0be36f0a46e46af053","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57ba56476d97343104557b0be36f0a46e46af053":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}