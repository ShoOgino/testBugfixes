{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#createTempFile(String,String).mjava","commits":[{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#createTempFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see LuceneTestCase#createTempFile()\n   */\n  public File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getPerTestClassTempDir();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#createTempFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see LuceneTestCase#createTempFile()\n   */\n  public File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getPerTestClassTempDir();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#createTempFile(String,String).mjava","sourceNew":"  /**\n   * @see LuceneTestCase#createTempFile()\n   */\n  public Path createTempFile(String prefix, String suffix) throws IOException {\n    Path base = getPerTestClassTempDir();\n\n    int attempt = 0;\n    Path f;\n    boolean success = false;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.toAbsolutePath());            \n      }\n      f = base.resolve(prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n      try {\n        Files.createFile(f);\n        success = true;\n      } catch (IOException ignore) {}\n    } while (!success);\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * @see LuceneTestCase#createTempFile()\n   */\n  public File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getPerTestClassTempDir();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f4abec28b874149a7223e32cc7a01704c27790de":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}