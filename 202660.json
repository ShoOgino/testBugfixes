{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/LengthFilterTest[TestLengthFilter2]#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","sourceNew":"  public void test() throws Exception {\n    Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Length\",\n        \"min\", \"4\",\n        \"max\", \"10\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","sourceNew":"  public void test() throws Exception {\n    Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Length\",\n        Version.LUCENE_43, new ClasspathResourceLoader(getClass()),\n        \"min\", \"4\",\n        \"max\", \"10\",\n        \"enablePositionIncrements\", \"false\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Length\",\n        \"min\", \"4\",\n        \"max\", \"10\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Length\",\n        Version.LUCENE_43, new ClasspathResourceLoader(getClass()),\n        \"min\", \"4\",\n        \"max\", \"10\",\n        \"enablePositionIncrements\", \"false\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["192e49c0445803405b0bc0eebc8b758485480c21"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"280bf88d9ed3d9923e393961b594d9553970e4fd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","280bf88d9ed3d9923e393961b594d9553970e4fd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}