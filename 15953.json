{"path":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","commits":[{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    IndexReader r = writer.getReader();\n    try {\n      int numDocs = r.numDocs();\n      // index is allowed to have exactly one document or 0.\n      if (numDocs == 1) {\n        Document doc = r.document(r.maxDoc() - 1);\n        Field sid = doc.getField(SNAPSHOTS_ID);\n        if (sid == null) {\n          throw new IllegalStateException(\"directory is not a valid snapshots store!\");\n        }\n        doc.removeField(SNAPSHOTS_ID);\n        for (Fieldable f : doc.getFields()) {\n          registerSnapshotInfo(f.name(), f.stringValue(), null);\n        }\n      } else if (numDocs != 0) {\n        throw new IllegalStateException(\n            \"should be at most 1 document in the snapshots directory: \" + numDocs);\n      }\n    } finally {\n      r.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    IndexReader r = writer.getReader();\n    try {\n      int numDocs = r.numDocs();\n      // index is allowed to have exactly one document or 0.\n      if (numDocs == 1) {\n        Document doc = r.document(r.maxDoc() - 1);\n        Field sid = doc.getField(SNAPSHOTS_ID);\n        if (sid == null) {\n          writer.close();\n          throw new IllegalStateException(\"directory is not a valid snapshots store!\");\n        }\n        doc.removeField(SNAPSHOTS_ID);\n        for (Fieldable f : doc.getFields()) {\n          registerSnapshotInfo(f.name(), f.stringValue(), null);\n        }\n      } else if (numDocs != 0) {\n        writer.close();\n        throw new IllegalStateException(\n            \"should be at most 1 document in the snapshots directory: \" + numDocs);\n      }\n    } finally {\n      r.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    IndexReader r = writer.getReader();\n    try {\n      int numDocs = r.numDocs();\n      // index is allowed to have exactly one document or 0.\n      if (numDocs == 1) {\n        Document doc = r.document(r.maxDoc() - 1);\n        Field sid = doc.getField(SNAPSHOTS_ID);\n        if (sid == null) {\n          throw new IllegalStateException(\"directory is not a valid snapshots store!\");\n        }\n        doc.removeField(SNAPSHOTS_ID);\n        for (Fieldable f : doc.getFields()) {\n          registerSnapshotInfo(f.name(), f.stringValue(), null);\n        }\n      } else if (numDocs != 0) {\n        throw new IllegalStateException(\n            \"should be at most 1 document in the snapshots directory: \" + numDocs);\n      }\n    } finally {\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d74a843adda3407ffb154bb97dcbb7dffae25582","date":1282418303,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    IndexReader r = writer.getReader();\n    try {\n      int numDocs = r.numDocs();\n      // index is allowed to have exactly one document or 0.\n      if (numDocs == 1) {\n        Document doc = r.document(r.maxDoc() - 1);\n        Field sid = doc.getField(SNAPSHOTS_ID);\n        if (sid == null) {\n          writer.close();\n          throw new IllegalStateException(\"directory is not a valid snapshots store!\");\n        }\n        doc.removeField(SNAPSHOTS_ID);\n        for (Fieldable f : doc.getFields()) {\n          registerSnapshotInfo(f.name(), f.stringValue(), null);\n        }\n      } else if (numDocs != 0) {\n        writer.close();\n        throw new IllegalStateException(\n            \"should be at most 1 document in the snapshots directory: \" + numDocs);\n      }\n    } finally {\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    IndexReader r = writer.getReader();\n    try {\n      int numDocs = r.numDocs();\n      // index is allowed to have exactly one document or 0.\n      if (numDocs == 1) {\n        Document doc = r.document(r.maxDoc() - 1);\n        Field sid = doc.getField(SNAPSHOTS_ID);\n        if (sid == null) {\n          throw new IllegalStateException(\"directory is not a valid snapshots store!\");\n        }\n        doc.removeField(SNAPSHOTS_ID);\n        for (Fieldable f : doc.getFields()) {\n          registerSnapshotInfo(f.name(), f.stringValue(), null);\n        }\n      } else if (numDocs != 0) {\n        throw new IllegalStateException(\n            \"should be at most 1 document in the snapshots directory: \" + numDocs);\n      }\n    } finally {\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapsthots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","date":1306320383,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    try {\n      // Initializes the snapshots information. This code should basically run\n      // only if mode != CREATE, but if it is, it's no harm as we only open the\n      // reader once and immediately close it.\n      for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    } catch (RuntimeException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    } catch (IOException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    try {\n      // Initializes the snapshots information. This code should basically run\n      // only if mode != CREATE, but if it is, it's no harm as we only open the\n      // reader once and immediately close it.\n      for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    } catch (RuntimeException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    } catch (IOException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    try {\n      // Initializes the snapshots information. This code should basically run\n      // only if mode != CREATE, but if it is, it's no harm as we only open the\n      // reader once and immediately close it.\n      for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    } catch (RuntimeException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    } catch (IOException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    // Initializes the snapshots information. This code should basically run\n    // only if mode != CREATE, but if it is, it's no harm as we only open the\n    // reader once and immediately close it.\n    for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n      registerSnapshotInfo(e.getKey(), e.getValue(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version).mjava","sourceNew":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    try {\n      // Initializes the snapshots information. This code should basically run\n      // only if mode != CREATE, but if it is, it's no harm as we only open the\n      // reader once and immediately close it.\n      for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    } catch (RuntimeException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    } catch (IOException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link PersistentSnapshotDeletionPolicy} wraps another\n   * {@link IndexDeletionPolicy} to enable flexible snapshotting.\n   * \n   * @param primary\n   *          the {@link IndexDeletionPolicy} that is used on non-snapshotted\n   *          commits. Snapshotted commits, by definition, are not deleted until\n   *          explicitly released via {@link #release(String)}.\n   * @param dir\n   *          the {@link Directory} which will be used to persist the snapshots\n   *          information.\n   * @param mode\n   *          specifies whether a new index should be created, deleting all\n   *          existing snapshots information (immediately), or open an existing\n   *          index, initializing the class with the snapshots information.\n   * @param matchVersion\n   *          specifies the {@link Version} that should be used when opening the\n   *          IndexWriter.\n   */\n  public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,\n      Directory dir, OpenMode mode, Version matchVersion)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    super(primary, null);\n\n    // Initialize the index writer over the snapshot directory.\n    writer = new IndexWriter(dir, new IndexWriterConfig(matchVersion, null).setOpenMode(mode));\n    if (mode != OpenMode.APPEND) {\n      // IndexWriter no longer creates a first commit on an empty Directory. So\n      // if we were asked to CREATE*, call commit() just to be sure. If the\n      // index contains information and mode is CREATE_OR_APPEND, it's a no-op.\n      writer.commit();\n    }\n\n    try {\n      // Initializes the snapshots information. This code should basically run\n      // only if mode != CREATE, but if it is, it's no harm as we only open the\n      // reader once and immediately close it.\n      for (Entry<String, String> e : readSnapshotsInfo(dir).entrySet()) {\n        registerSnapshotInfo(e.getKey(), e.getValue(), null);\n      }\n    } catch (RuntimeException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    } catch (IOException e) {\n      writer.close(); // don't leave any open file handles\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3cefb552695b930cefe85eb7880cccdb914be6b","d74a843adda3407ffb154bb97dcbb7dffae25582"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c7235f072992928845d8cfd2dfc1c90362360e1e","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d74a843adda3407ffb154bb97dcbb7dffae25582","c7235f072992928845d8cfd2dfc1c90362360e1e"],"d74a843adda3407ffb154bb97dcbb7dffae25582":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["d74a843adda3407ffb154bb97dcbb7dffae25582"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d74a843adda3407ffb154bb97dcbb7dffae25582"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"d74a843adda3407ffb154bb97dcbb7dffae25582":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","c7235f072992928845d8cfd2dfc1c90362360e1e"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}