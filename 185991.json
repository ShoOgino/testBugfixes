{"path":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"/dev/null","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n\t\tString fieldName=DOMUtils.getAttributeWithInheritance(e,\"fieldName\");\r\n\t\tif(fieldName==null)\r\n\t\t{\r\n\t\t\tthrow new ParserException(\"Error: SpanOrTermsBuilder missing \\\"fieldName\\\" property\");\r\n\t\t}\r\n\r\n\t\tString value=DOMUtils.getText(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tToken token=ts.next();\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,token.termText()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t\ttoken=ts.next();\t\t    \r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3","date":1141249757,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\r\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tToken token=ts.next();\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,token.termText()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t\ttoken=ts.next();\t\t    \r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n\t\tString fieldName=DOMUtils.getAttributeWithInheritance(e,\"fieldName\");\r\n\t\tif(fieldName==null)\r\n\t\t{\r\n\t\t\tthrow new ParserException(\"Error: SpanOrTermsBuilder missing \\\"fieldName\\\" property\");\r\n\t\t}\r\n\r\n\t\tString value=DOMUtils.getText(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tToken token=ts.next();\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,token.termText()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t\ttoken=ts.next();\t\t    \r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\r\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tfinal Token reusableToken = new Token();\r\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,nextToken.term()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\r\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tToken token=ts.next();\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,token.termText()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t\ttoken=ts.next();\t\t    \r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tfinal Token reusableToken = new Token();\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,nextToken.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\r\n\t{\r\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\r\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tArrayList clausesList=new ArrayList();\r\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\r\n\t\t\tfinal Token reusableToken = new Token();\r\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\r\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,nextToken.term()));\r\n\t\t\t    clausesList.add(stq);\r\n\t\t\t}\r\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\r\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\r\n\t\t\treturn soq;\r\n\t\t}\r\n\t\tcatch(IOException ioe)\r\n\t\t{\r\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tfinal Token reusableToken = new Token();\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,nextToken.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69d87d34a81230de56333f52f590caeb6d80667","date":1257848306,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList<SpanQuery> clausesList=new ArrayList<SpanQuery>();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery(clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList clausesList=new ArrayList();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery((SpanQuery[]) clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanOrTermsBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList<SpanQuery> clausesList=new ArrayList<SpanQuery>();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery(clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,\"fieldName\");\n \t\tString value=DOMUtils.getNonBlankTextOrFail(e);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tArrayList<SpanQuery> clausesList=new ArrayList<SpanQuery>();\n\t\t\tTokenStream ts=analyzer.tokenStream(fieldName,new StringReader(value));\n\t\t\tTermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n\t\t\t\n\t    while (ts.incrementToken()) {\n\t\t\t    SpanTermQuery stq=new SpanTermQuery(new Term(fieldName, termAtt.term()));\n\t\t\t    clausesList.add(stq);\n\t\t\t}\n\t\t\tSpanOrQuery soq=new SpanOrQuery(clausesList.toArray(new SpanQuery[clausesList.size()]));\n\t\t\tsoq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n\t\t\treturn soq;\n\t\t}\n\t\tcatch(IOException ioe)\n\t\t{\n\t\t    throw new ParserException(\"IOException parsing value:\"+value);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"c69d87d34a81230de56333f52f590caeb6d80667":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69d87d34a81230de56333f52f590caeb6d80667"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"c69d87d34a81230de56333f52f590caeb6d80667":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["c69d87d34a81230de56333f52f590caeb6d80667"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}