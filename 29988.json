{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","sourceNew":"  private synchronized void updateOverseerLeader() throws Exception {\n    if (overseerLeader != null && liveNodes.contains(overseerLeader)) {\n      return;\n    }\n    String path = Overseer.OVERSEER_ELECT + \"/leader\";\n    if (liveNodes.isEmpty()) {\n      overseerLeader = null;\n      // remove it from ZK\n      try {\n        cloudManager.getDistribStateManager().removeData(path, -1);\n      } catch (NoSuchElementException e) {\n        // ignore\n      }\n      return;\n    }\n    // pick first\n    overseerLeader = liveNodes.iterator().next();\n    log.debug(\"--- new Overseer leader: \" + overseerLeader);\n    // record it in ZK\n    Map<String, Object> id = new HashMap<>();\n    id.put(\"id\", cloudManager.getTimeSource().getTimeNs() +\n        \"-\" + overseerLeader + \"-n_0000000000\");\n    try {\n      cloudManager.getDistribStateManager().makePath(path, Utils.toJSON(id), CreateMode.EPHEMERAL, false);\n    } catch (Exception e) {\n      log.warn(\"Exception saving overseer leader id\", e);\n    }\n  }\n\n","sourceOld":"  private synchronized void updateOverseerLeader() throws Exception {\n    if (overseerLeader != null && liveNodes.contains(overseerLeader)) {\n      return;\n    }\n    String path = Overseer.OVERSEER_ELECT + \"/leader\";\n    if (liveNodes.isEmpty()) {\n      overseerLeader = null;\n      // remove it from ZK\n      try {\n        cloudManager.getDistribStateManager().removeData(path, -1);\n      } catch (NoSuchElementException e) {\n        // ignore\n      }\n      return;\n    }\n    // pick first\n    overseerLeader = liveNodes.iterator().next();\n    log.debug(\"--- new Overseer leader: \" + overseerLeader);\n    // record it in ZK\n    Map<String, Object> id = new HashMap<>();\n    id.put(\"id\", cloudManager.getTimeSource().getTimeNs() +\n        \"-\" + overseerLeader + \"-n_0000000000\");\n    try {\n      cloudManager.getDistribStateManager().makePath(path, Utils.toJSON(id), CreateMode.EPHEMERAL, false);\n    } catch (Exception e) {\n      log.warn(\"Exception saving overseer leader id\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","sourceNew":"  private synchronized void updateOverseerLeader() throws Exception {\n    if (overseerLeader != null && liveNodes.contains(overseerLeader)) {\n      return;\n    }\n    String path = Overseer.OVERSEER_ELECT + \"/leader\";\n    if (liveNodes.isEmpty()) {\n      overseerLeader = null;\n      // remove it from ZK\n      try {\n        cloudManager.getDistribStateManager().removeData(path, -1);\n      } catch (NoSuchElementException e) {\n        // ignore\n      }\n      return;\n    }\n    // pick first\n    overseerLeader = liveNodes.iterator().next();\n    log.debug(\"--- new Overseer leader: {}\", overseerLeader);\n    // record it in ZK\n    Map<String, Object> id = new HashMap<>();\n    id.put(\"id\", cloudManager.getTimeSource().getTimeNs() +\n        \"-\" + overseerLeader + \"-n_0000000000\");\n    try {\n      cloudManager.getDistribStateManager().makePath(path, Utils.toJSON(id), CreateMode.EPHEMERAL, false);\n    } catch (Exception e) {\n      log.warn(\"Exception saving overseer leader id\", e);\n    }\n  }\n\n","sourceOld":"  private synchronized void updateOverseerLeader() throws Exception {\n    if (overseerLeader != null && liveNodes.contains(overseerLeader)) {\n      return;\n    }\n    String path = Overseer.OVERSEER_ELECT + \"/leader\";\n    if (liveNodes.isEmpty()) {\n      overseerLeader = null;\n      // remove it from ZK\n      try {\n        cloudManager.getDistribStateManager().removeData(path, -1);\n      } catch (NoSuchElementException e) {\n        // ignore\n      }\n      return;\n    }\n    // pick first\n    overseerLeader = liveNodes.iterator().next();\n    log.debug(\"--- new Overseer leader: \" + overseerLeader);\n    // record it in ZK\n    Map<String, Object> id = new HashMap<>();\n    id.put(\"id\", cloudManager.getTimeSource().getTimeNs() +\n        \"-\" + overseerLeader + \"-n_0000000000\");\n    try {\n      cloudManager.getDistribStateManager().makePath(path, Utils.toJSON(id), CreateMode.EPHEMERAL, false);\n    } catch (Exception e) {\n      log.warn(\"Exception saving overseer leader id\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#updateOverseerLeader().mjava","sourceNew":null,"sourceOld":"  private synchronized void updateOverseerLeader() throws Exception {\n    if (overseerLeader != null && liveNodes.contains(overseerLeader)) {\n      return;\n    }\n    String path = Overseer.OVERSEER_ELECT + \"/leader\";\n    if (liveNodes.isEmpty()) {\n      overseerLeader = null;\n      // remove it from ZK\n      try {\n        cloudManager.getDistribStateManager().removeData(path, -1);\n      } catch (NoSuchElementException e) {\n        // ignore\n      }\n      return;\n    }\n    // pick first\n    overseerLeader = liveNodes.iterator().next();\n    log.debug(\"--- new Overseer leader: {}\", overseerLeader);\n    // record it in ZK\n    Map<String, Object> id = new HashMap<>();\n    id.put(\"id\", cloudManager.getTimeSource().getTimeNs() +\n        \"-\" + overseerLeader + \"-n_0000000000\");\n    try {\n      cloudManager.getDistribStateManager().makePath(path, Utils.toJSON(id), CreateMode.EPHEMERAL, false);\n    } catch (Exception e) {\n      log.warn(\"Exception saving overseer leader id\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}