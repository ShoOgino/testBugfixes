{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","sourceNew":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = random.nextInt(numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\");\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10)));\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = random.nextInt(numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\");\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10)));\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6180b16daa5b27625db4ed57c6693d579884fa0","date":1328714453,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","sourceNew":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = random.nextInt(numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = random.nextInt(numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\");\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10)));\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b3157475550a08a1536940d79af1c32dbd6663","date":1332600844,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","sourceNew":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = nextInt(random, 0, numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = random.nextInt(numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6adf8ea59977891966389011f3905e09932183","date":1332622471,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","sourceNew":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = nextInt(random, 0, numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        case 23: {\n          sb.append(\"<\");\n          if (0 == nextInt(random, 0, 3)) {\n            sb.append(\"          \".substring(nextInt(random, 1, 10)));\n          }\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(\"/\");\n            if (0 == nextInt(random, 0, 3)) {\n              sb.append(\"          \".substring(nextInt(random, 1, 10)));\n            }\n          }\n          switch (nextInt(random, 0, 3)) {\n            case 0: sb.append(randomlyRecaseCodePoints(random, \"script\")); break;\n            case 1: sb.append(randomlyRecaseCodePoints(random, \"style\")); break;\n            case 2: sb.append(randomlyRecaseCodePoints(random, \"br\")); break;\n            // default: append nothing\n          }\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = nextInt(random, 0, numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomHtmlishString(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomHtmlishString(Random,int).mjava","sourceNew":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = nextInt(random, 0, numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        case 23: {\n          sb.append(\"<\");\n          if (0 == nextInt(random, 0, 3)) {\n            sb.append(\"          \".substring(nextInt(random, 1, 10)));\n          }\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(\"/\");\n            if (0 == nextInt(random, 0, 3)) {\n              sb.append(\"          \".substring(nextInt(random, 1, 10)));\n            }\n          }\n          switch (nextInt(random, 0, 3)) {\n            case 0: sb.append(randomlyRecaseCodePoints(random, \"script\")); break;\n            case 1: sb.append(randomlyRecaseCodePoints(random, \"style\")); break;\n            case 2: sb.append(randomlyRecaseCodePoints(random, \"br\")); break;\n            // default: append nothing\n          }\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String randomHtmlishString(Random random, int numElements) {\n    final int end = nextInt(random, 0, numElements);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++) {\n      int val = random.nextInt(25);\n      switch(val) {\n        case 0: sb.append(\"<p>\"); break;\n        case 1: {\n          sb.append(\"<\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          for (int j = 0 ; j < nextInt(random, 0, 10) ; ++j) {\n            sb.append(' ');\n            sb.append(randomSimpleString(random));\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append('=');\n            sb.append(\" \".substring(nextInt(random, 0, 1)));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n            sb.append(randomSimpleString(random));\n            sb.append(\"\\\"\".substring(nextInt(random, 0, 1)));\n          }\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\"/\".substring(nextInt(random, 0, 1)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 2: {\n          sb.append(\"</\");\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(randomSimpleString(random));\n          sb.append(\"    \".substring(nextInt(random, 0, 4)));\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 3: sb.append(\">\"); break;\n        case 4: sb.append(\"</p>\"); break;\n        case 5: sb.append(\"<!--\"); break;\n        case 6: sb.append(\"<!--#\"); break;\n        case 7: sb.append(\"<script><!-- f('\"); break;\n        case 8: sb.append(\"</script>\"); break;\n        case 9: sb.append(\"<?\"); break;\n        case 10: sb.append(\"?>\"); break;\n        case 11: sb.append(\"\\\"\"); break;\n        case 12: sb.append(\"\\\\\\\"\"); break;\n        case 13: sb.append(\"'\"); break;\n        case 14: sb.append(\"\\\\'\"); break;\n        case 15: sb.append(\"-->\"); break;\n        case 16: {\n          sb.append(\"&\");\n          switch(nextInt(random, 0, 2)) {\n            case 0: sb.append(randomSimpleString(random)); break;\n            case 1: sb.append(HTML_CHAR_ENTITIES[random.nextInt(HTML_CHAR_ENTITIES.length)]); break;\n          }\n          sb.append(\";\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        case 17: {\n          sb.append(\"&#\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        } \n        case 18: {\n          sb.append(\"&#x\");\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(Integer.toString(nextInt(random, 0, Integer.MAX_VALUE - 1), 16));\n            sb.append(\";\".substring(nextInt(random, 0, 1)));\n          }\n          break;\n        }\n          \n        case 19: sb.append(\";\"); break;\n        case 20: sb.append(nextInt(random, 0, Integer.MAX_VALUE - 1)); break;\n        case 21: sb.append(\"\\n\"); break;\n        case 22: sb.append(\"          \".substring(nextInt(random, 0, 10))); break;\n        case 23: {\n          sb.append(\"<\");\n          if (0 == nextInt(random, 0, 3)) {\n            sb.append(\"          \".substring(nextInt(random, 1, 10)));\n          }\n          if (0 == nextInt(random, 0, 1)) {\n            sb.append(\"/\");\n            if (0 == nextInt(random, 0, 3)) {\n              sb.append(\"          \".substring(nextInt(random, 1, 10)));\n            }\n          }\n          switch (nextInt(random, 0, 3)) {\n            case 0: sb.append(randomlyRecaseCodePoints(random, \"script\")); break;\n            case 1: sb.append(randomlyRecaseCodePoints(random, \"style\")); break;\n            case 2: sb.append(randomlyRecaseCodePoints(random, \"br\")); break;\n            // default: append nothing\n          }\n          sb.append(\">\".substring(nextInt(random, 0, 1)));\n          break;\n        }\n        default: sb.append(randomSimpleString(random));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98b3157475550a08a1536940d79af1c32dbd6663":["f6180b16daa5b27625db4ed57c6693d579884fa0"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7d6adf8ea59977891966389011f3905e09932183"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d6adf8ea59977891966389011f3905e09932183":["98b3157475550a08a1536940d79af1c32dbd6663"],"f6180b16daa5b27625db4ed57c6693d579884fa0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"98b3157475550a08a1536940d79af1c32dbd6663":["7d6adf8ea59977891966389011f3905e09932183"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6180b16daa5b27625db4ed57c6693d579884fa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d6adf8ea59977891966389011f3905e09932183":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f6180b16daa5b27625db4ed57c6693d579884fa0":["98b3157475550a08a1536940d79af1c32dbd6663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}