{"path":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}