{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false, true);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false, true);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false, true);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false, true);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null, false,\n                                                                   PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8917bfede3b4ca30f4305c1e391e9218959cd723"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}