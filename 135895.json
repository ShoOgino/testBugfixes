{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"/dev/null","sourceNew":"  public void assertLexicon() {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      BytesRef termByte = new BytesRef(s);\n      assertTrue(lexByte.run(termByte.bytes, 0, termByte.length));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd","date":1279789681,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      BytesRef termByte = new BytesRef(s);\n      assertTrue(lexByte.run(termByte.bytes, 0, termByte.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      BytesRef termByte = new BytesRef(s);\n      assertTrue(lexByte.run(termByte.bytes, 0, termByte.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}