{"path":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#searchAfter(ScoreDoc,Query,int).mjava","commits":[{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#searchAfter(ScoreDoc,Query,int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public TopDocs searchAfter(ScoreDoc after, Query query, int numHits) throws IOException {\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        ScoreDoc shardAfter = new ScoreDoc(after.doc, after.score);\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID < after.shardIndex) {\n            // If score is tied then no docs in this shard\n            // should be collected:\n            shardAfter.doc = Integer.MAX_VALUE;\n          } else if (nodeID == after.shardIndex) {\n            // If score is tied then we break according to\n            // docID (like normal):  \n            shardAfter.doc = after.doc;\n          } else {\n            // If score is tied then all docs in this shard\n            // should be collected, because they come after\n            // the previous bottom:\n            shardAfter.doc = -1;\n          }\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearchAfter(shardAfter, query, numHits);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, null, numHits, shardAfter);\n          }\n          //System.out.println(\"  node=\" + nodeID + \" totHits=\" + shardHits[nodeID].totalHits);\n        }\n\n        // Merge:\n        return TopDocs.merge(null, numHits, shardHits);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e87ea9fb673e8638747af83477322f07ed5a8b95"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#searchAfter(ScoreDoc,Query,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#searchAfter(ScoreDoc,Query,int).mjava","sourceNew":"      @Override\n      public TopDocs searchAfter(ScoreDoc after, Query query, int numHits) throws IOException {\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        ScoreDoc shardAfter = new ScoreDoc(after.doc, after.score);\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID < after.shardIndex) {\n            // If score is tied then no docs in this shard\n            // should be collected:\n            shardAfter.doc = Integer.MAX_VALUE;\n          } else if (nodeID == after.shardIndex) {\n            // If score is tied then we break according to\n            // docID (like normal):  \n            shardAfter.doc = after.doc;\n          } else {\n            // If score is tied then all docs in this shard\n            // should be collected, because they come after\n            // the previous bottom:\n            shardAfter.doc = -1;\n          }\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearchAfter(shardAfter, query, numHits);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, null, numHits, shardAfter);\n          }\n          //System.out.println(\"  node=\" + nodeID + \" totHits=\" + shardHits[nodeID].totalHits);\n        }\n\n        // Merge:\n        return TopDocs.merge(null, numHits, shardHits);\n      }\n\n","sourceOld":"      @Override\n      public TopDocs searchAfter(ScoreDoc after, Query query, int numHits) throws IOException {\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        ScoreDoc shardAfter = new ScoreDoc(after.doc, after.score);\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID < after.shardIndex) {\n            // If score is tied then no docs in this shard\n            // should be collected:\n            shardAfter.doc = Integer.MAX_VALUE;\n          } else if (nodeID == after.shardIndex) {\n            // If score is tied then we break according to\n            // docID (like normal):  \n            shardAfter.doc = after.doc;\n          } else {\n            // If score is tied then all docs in this shard\n            // should be collected, because they come after\n            // the previous bottom:\n            shardAfter.doc = -1;\n          }\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearchAfter(shardAfter, query, numHits);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, null, numHits, shardAfter);\n          }\n          //System.out.println(\"  node=\" + nodeID + \" totHits=\" + shardHits[nodeID].totalHits);\n        }\n\n        // Merge:\n        return TopDocs.merge(null, numHits, shardHits);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["226aae72c0326f4299c16280195bade4530de537"],"226aae72c0326f4299c16280195bade4530de537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226aae72c0326f4299c16280195bade4530de537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}