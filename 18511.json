{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished() {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for (;;) {\n        Runner runner;\n        synchronized (runners) {\n          runner = runners.peek();\n        }\n        if (runner == null)\n          break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock = null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["44794c238f06be24c86aaea35a3666b679ef267d","945902ae43d8dd7e920418efe36981403c2ee669","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}