{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","commits":[{"id":"0226c4da52b4b59afa6d616cdf5bacb3733ca47e","date":1305730778,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n//    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND)); // nocommit - move this to its own test\n//    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n//    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13858a96f805173c767cc24126996ac23ea4fb9","date":1309920322,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n//    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND)); // nocommit - move this to its own test\n//    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n//    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    final Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    ((MultiPhraseQuery) q).setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException, ParseException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a13858a96f805173c767cc24126996ac23ea4fb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"0226c4da52b4b59afa6d616cdf5bacb3733ca47e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0226c4da52b4b59afa6d616cdf5bacb3733ca47e","a13858a96f805173c767cc24126996ac23ea4fb9"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","a13858a96f805173c767cc24126996ac23ea4fb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a13858a96f805173c767cc24126996ac23ea4fb9":["112629f1dfd1451722c6047bcf593e6efc96f5f4"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["a13858a96f805173c767cc24126996ac23ea4fb9"],"0226c4da52b4b59afa6d616cdf5bacb3733ca47e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a13858a96f805173c767cc24126996ac23ea4fb9":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}