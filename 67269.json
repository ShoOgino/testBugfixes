{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using a working\"\n        + \" solrUrl or zkUrl.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"095183bbba1ca16181a207a7d4d1c394573aaf39","date":1492465186,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using a working\"\n        + \" solrUrl or zkUrl.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b0975fa00d588fea494a987c39ea9f2dabcb96","date":1508141398,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd6f565d9a71b415146d1d62050d268e573c4cb3","date":1541350911,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // Cluster state for the given collection was not found, could be an alias.\n        // Lets fetch/update our aliases:\n        getAliases(true);\n        return null;\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        if (e.getMessage().contains(collection + \" not found\")) {\n          // Cluster state for the given collection was not found.\n          // Lets fetch/update our aliases:\n          getAliases(true);\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a8e78b6470427058bbb198472d95b4c1f1b23f","date":1541639132,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (RemoteSolrException e) {\n        if (\"NOT_FOUND\".equals(e.getMetadata(\"CLUSTERSTATUS\"))) {\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // Cluster state for the given collection was not found, could be an alias.\n        // Lets fetch/update our aliases:\n        getAliases(true);\n        return null;\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // Cluster state for the given collection was not found, could be an alias.\n        // Lets fetch/update our aliases:\n        getAliases(true);\n        return null;\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":["a64b273d51a6540272668680ece9f8b686ff0004"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getState(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getState(String).mjava","sourceNew":"  @Override\n  public ClusterState.CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n      try (SolrClient client = getSolrClient(baseUrl)) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (RemoteSolrException e) {\n        if (\"NOT_FOUND\".equals(e.getMetadata(\"CLUSTERSTATUS\"))) {\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n      } catch (NotACollectionException e) {\n        // Cluster state for the given collection was not found, could be an alias.\n        // Lets fetch/update our aliases:\n        getAliases(true);\n        return null;\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public CollectionRef getState(String collection) {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        ClusterState cs = fetchClusterState(client, collection, null);\n        return cs.getCollectionRef(collection);\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (RemoteSolrException e) {\n        if (\"NOT_FOUND\".equals(e.getMetadata(\"CLUSTERSTATUS\"))) {\n          return null;\n        }\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // Cluster state for the given collection was not found, could be an alias.\n        // Lets fetch/update our aliases:\n        getAliases(true);\n        return null;\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98a8e78b6470427058bbb198472d95b4c1f1b23f":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["a64b273d51a6540272668680ece9f8b686ff0004"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"98a8e78b6470427058bbb198472d95b4c1f1b23f":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}