{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSupplementaryChars().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testSupplementaryChars().mjava","sourceNew":"  public void testSupplementaryChars() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    // for reference see\n    // http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\\u0000-\\uFFFF]]]&esc=on\n    String[] upperArr = new String[] {\"Abc\\ud801\\udc1c\",\n        \"\\ud801\\udc1c\\ud801\\udc1cCDE\", \"A\\ud801\\udc1cB\"};\n    String[] lowerArr = new String[] {\"abc\\ud801\\udc44\",\n        \"\\ud801\\udc44\\ud801\\udc44cde\", \"a\\ud801\\udc44b\"};\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSupplementaryChars() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    // for reference see\n    // http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\\u0000-\\uFFFF]]]&esc=on\n    String[] upperArr = new String[] {\"Abc\\ud801\\udc1c\",\n        \"\\ud801\\udc1c\\ud801\\udc1cCDE\", \"A\\ud801\\udc1cB\"};\n    String[] lowerArr = new String[] {\"abc\\ud801\\udc44\",\n        \"\\ud801\\udc44\\ud801\\udc44cde\", \"a\\ud801\\udc44b\"};\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSupplementaryChars().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSupplementaryChars().mjava","sourceNew":"  public void testSupplementaryChars() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    // for reference see\n    // http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\\u0000-\\uFFFF]]]&esc=on\n    String[] upperArr = new String[] {\"Abc\\ud801\\udc1c\",\n        \"\\ud801\\udc1c\\ud801\\udc1cCDE\", \"A\\ud801\\udc1cB\"};\n    String[] lowerArr = new String[] {\"abc\\ud801\\udc44\",\n        \"\\ud801\\udc44\\ud801\\udc44cde\", \"a\\ud801\\udc44b\"};\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSupplementaryChars() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    // for reference see\n    // http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\\u0000-\\uFFFF]]]&esc=on\n    String[] upperArr = new String[] {\"Abc\\ud801\\udc1c\",\n        \"\\ud801\\udc1c\\ud801\\udc1cCDE\", \"A\\ud801\\udc1cB\"};\n    String[] lowerArr = new String[] {\"abc\\ud801\\udc44\",\n        \"\\ud801\\udc44\\ud801\\udc44cde\", \"a\\ud801\\udc44b\"};\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}