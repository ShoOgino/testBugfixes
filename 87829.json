{"path":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","commits":[{"id":"f46340080a63f8bb8358e83e88dba6ad13faf103","date":1421824628,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for(;;) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if(response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \",id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n   }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bd915b3766935715579f128e83173b690e2504a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c352c6a130ba2458c59ac61b1663c0d5bd145be8","date":1426607656,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for(;;) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if(response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \",id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n   }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for(;;) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if(response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \",id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n   }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd915b3766935715579f128e83173b690e2504a8","date":1428590582,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      forward(req, \"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      req.forward(\"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","bugFix":["f46340080a63f8bb8358e83e88dba6ad13faf103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      forward(req, \"/get\", new MapSolrParams(singletonMap(ID, id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(ID, id);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      forward(req, \"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BlobHandler#verifyWithRealtimeGet(String,long,SolrQueryRequest,Map[String,Object]).mjava","sourceNew":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      forward(req, \"/get\", new MapSolrParams(singletonMap(ID, id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(ID, id);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithRealtimeGet(String blobName, long version, SolrQueryRequest req, Map<String, Object> doc) {\n    for (; ; ) {\n      SolrQueryResponse response = new SolrQueryResponse();\n      String id = blobName + \"/\" + version;\n      forward(req, \"/get\", new MapSolrParams(singletonMap(\"id\", id)), response);\n      if (response.getValues().get(\"doc\") == null) {\n        //ensure that the version does not exist\n        return;\n      } else {\n        log.info(\"id {} already exists trying next \", id);\n        version++;\n        doc.put(\"version\", version);\n        id = blobName + \"/\" + version;\n        doc.put(\"id\", id);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd915b3766935715579f128e83173b690e2504a8":["c352c6a130ba2458c59ac61b1663c0d5bd145be8"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["bd915b3766935715579f128e83173b690e2504a8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f46340080a63f8bb8358e83e88dba6ad13faf103","c352c6a130ba2458c59ac61b1663c0d5bd145be8"],"c352c6a130ba2458c59ac61b1663c0d5bd145be8":["f46340080a63f8bb8358e83e88dba6ad13faf103"],"f46340080a63f8bb8358e83e88dba6ad13faf103":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["bd915b3766935715579f128e83173b690e2504a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"bd915b3766935715579f128e83173b690e2504a8":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c352c6a130ba2458c59ac61b1663c0d5bd145be8":["bd915b3766935715579f128e83173b690e2504a8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f46340080a63f8bb8358e83e88dba6ad13faf103":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c352c6a130ba2458c59ac61b1663c0d5bd145be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f46340080a63f8bb8358e83e88dba6ad13faf103"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}