{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","commits":[{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected static CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected static CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected static CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#getCoreStatus(Replica).mjava","sourceNew":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   * <p>\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected static CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the {@link CoreStatus} data for a {@link Replica}\n   *\n   * This assumes that the replica is hosted on a live node.\n   */\n  protected static CoreStatus getCoreStatus(Replica replica) throws IOException, SolrServerException {\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString(), cluster.getSolrClient().getHttpClient())) {\n      return CoreAdminRequest.getCoreStatus(replica.getCoreName(), client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1edcb08221b33c52c3b24183d470c163dc8df4c"]},"commit2Childs":{"e1edcb08221b33c52c3b24183d470c163dc8df4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["e1edcb08221b33c52c3b24183d470c163dc8df4c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}