{"path":"lucene/core/src/java/org/apache/lucene/index/ImpactsEnum#advanceShallow(int).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ImpactsEnum#advanceShallow(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Advance to the block of documents that contains {@code target} in order to\n   * get scoring information about this block. This method is implicitly called\n   * by {@link DocIdSetIterator#advance(int)} and\n   * {@link DocIdSetIterator#nextDoc()}. Calling this method doesn't modify the\n   * current {@link DocIdSetIterator#docID()}.\n   * It returns a number that is greater than or equal to all documents\n   * contained in the current block, but less than any doc IDS of the next block.\n   * {@code target} must be &gt;= {@link #docID()} as well as all targets that\n   * have been passed to {@link #advanceShallow(int)} so far.\n   */\n  public abstract int advanceShallow(int target) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ImpactsEnum#advanceShallow(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ImpactsEnum#advanceShallow(int).mjava","sourceNew":"  /**\n   * Shallow-advance to {@code target}. This is cheaper than calling\n   * {@link #advance(int)} and allows further calls to {@link #getImpacts()}\n   * to ignore doc IDs that are less than {@code target} in order to get more\n   * precise information about impacts.\n   * This method may not be called on targets that are less than the current\n   * {@link #docID()}.\n   * After this method has been called, {@link #nextDoc()} may not be called\n   * if the current doc ID is less than {@code target - 1} and\n   * {@link #advance(int)} may not be called on targets that are less than\n   * {@code target}.\n   */\n  public abstract void advanceShallow(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advance to the block of documents that contains {@code target} in order to\n   * get scoring information about this block. This method is implicitly called\n   * by {@link DocIdSetIterator#advance(int)} and\n   * {@link DocIdSetIterator#nextDoc()}. Calling this method doesn't modify the\n   * current {@link DocIdSetIterator#docID()}.\n   * It returns a number that is greater than or equal to all documents\n   * contained in the current block, but less than any doc IDS of the next block.\n   * {@code target} must be &gt;= {@link #docID()} as well as all targets that\n   * have been passed to {@link #advanceShallow(int)} so far.\n   */\n  public abstract int advanceShallow(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ImpactsEnum#advanceShallow(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Shallow-advance to {@code target}. This is cheaper than calling\n   * {@link #advance(int)} and allows further calls to {@link #getImpacts()}\n   * to ignore doc IDs that are less than {@code target} in order to get more\n   * precise information about impacts.\n   * This method may not be called on targets that are less than the current\n   * {@link #docID()}.\n   * After this method has been called, {@link #nextDoc()} may not be called\n   * if the current doc ID is less than {@code target - 1} and\n   * {@link #advance(int)} may not be called on targets that are less than\n   * {@code target}.\n   */\n  public abstract void advanceShallow(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f2c13220a828a78007cedb364e22dd8986ed650":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["2f2c13220a828a78007cedb364e22dd8986ed650"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"2f2c13220a828a78007cedb364e22dd8986ed650":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}