{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","commits":[{"id":"d19aa12f12779ee822b14c5f0479847274d077ff","date":1424529172,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","pathOld":"/dev/null","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    try {\n      collector(false, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n      fail(\"The collector was configured to expect a ScoreCachingWrappingScorer and did not fail when pass in a FakeScorer\");\n    } catch (AssertionError e) {\n      // expected\n    }\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(false, FakeScorer.class);\n    Collector c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(true, FakeScorer.class);\n    c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(true, ScoreCachingWrappingScorer.class);\n    c2 = collector(true, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(false, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(false, FakeScorer.class);\n    Collector c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(true, FakeScorer.class);\n    c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(true, ScoreCachingWrappingScorer.class);\n    c2 = collector(true, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    try {\n      collector(false, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n      fail(\"The collector was configured to expect a ScoreCachingWrappingScorer and did not fail when pass in a FakeScorer\");\n    } catch (AssertionError e) {\n      // expected\n    }\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(false, FakeScorer.class);\n    Collector c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(true, FakeScorer.class);\n    c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(true, ScoreCachingWrappingScorer.class);\n    c2 = collector(true, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["d19aa12f12779ee822b14c5f0479847274d077ff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, FakeScorer.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(false, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(false, FakeScorer.class);\n    Collector c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(true, FakeScorer.class);\n    c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(true, ScoreCachingWrappingScorer.class);\n    c2 = collector(true, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, FakeScorer.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(false, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(false, FakeScorer.class);\n    Collector c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(true, FakeScorer.class);\n    c2 = collector(false, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(true, ScoreCachingWrappingScorer.class);\n    c2 = collector(true, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreAndDoc.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new FakeScorer());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, FakeScorer.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, FakeScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new FakeScorer());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreAndDoc.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreAndDoc.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d19aa12f12779ee822b14c5f0479847274d077ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"05fe562aa248790944d43cdd478f512572835ba0":["d19aa12f12779ee822b14c5f0479847274d077ff"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["05fe562aa248790944d43cdd478f512572835ba0"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["05fe562aa248790944d43cdd478f512572835ba0","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d19aa12f12779ee822b14c5f0479847274d077ff":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19aa12f12779ee822b14c5f0479847274d077ff"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"05fe562aa248790944d43cdd478f512572835ba0":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}