{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#testQuery(String,int).mjava","commits":[{"id":"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","date":1310245513,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#testQuery(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testQuery(String queryStr, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    if (VERBOSE) System.out.println(\"Parsing: \" + queryStr);\n    \n    Query query = qp.parse(queryStr, FIELD_NAME);\n    if (VERBOSE) System.out.println(\"Querying: \" + query);\n    TopDocs topDocs = searcher.search(query, 1000);\n    \n    String msg = \"Query <\" + queryStr + \"> retrieved \" + topDocs.totalHits\n        + \" document(s), \" + expectedDocCount + \" document(s) expected.\";\n    \n    if (VERBOSE) System.out.println(msg);\n    \n    assertEquals(msg, expectedDocCount, topDocs.totalHits);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testQuery(String,int).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#testQuery(String,int).mjava","sourceNew":"  private void testQuery(String queryStr, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    if (VERBOSE) System.out.println(\"Parsing: \" + queryStr);\n    \n    Query query = qp.parse(queryStr, FIELD_NAME);\n    if (VERBOSE) System.out.println(\"Querying: \" + query);\n    TopDocs topDocs = searcher.search(query, 1000);\n    \n    String msg = \"Query <\" + queryStr + \"> retrieved \" + topDocs.totalHits\n        + \" document(s), \" + expectedDocCount + \" document(s) expected.\";\n    \n    if (VERBOSE) System.out.println(msg);\n    \n    assertEquals(msg, expectedDocCount, topDocs.totalHits);\n    \n  }\n\n","sourceOld":"  private void testQuery(String queryStr, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    if (VERBOSE) System.out.println(\"Parsing: \" + queryStr);\n    \n    Query query = qp.parse(queryStr, FIELD_NAME);\n    if (VERBOSE) System.out.println(\"Querying: \" + query);\n    TopDocs topDocs = searcher.search(query, 1000);\n    \n    String msg = \"Query <\" + queryStr + \"> retrieved \" + topDocs.totalHits\n        + \" document(s), \" + expectedDocCount + \" document(s) expected.\";\n    \n    if (VERBOSE) System.out.println(msg);\n    \n    assertEquals(msg, expectedDocCount, topDocs.totalHits);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}