{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testPositons(TypeTokenFilter).mjava","commits":[{"id":"ba64142b9196306ad35a6d525c0bdf5fd411690a","date":1327172564,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testPositons(TypeTokenFilter).mjava","pathOld":"/dev/null","sourceNew":"  private void testPositons(TypeTokenFilter stpf) throws IOException {\n    TypeAttribute typeAtt = stpf.getAttribute(TypeAttribute.class);\n    CharTermAttribute termAttribute = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    boolean enablePositionIncrements = stpf.getEnablePositionIncrements();\n    while (stpf.incrementToken()) {\n      log(\"Token: \" + termAttribute.toString() + \": \" + typeAtt.type() + \" - \" + posIncrAtt.getPositionIncrement());\n      assertEquals(\"if position increment is enabled the positionIncrementAttribute value should be 3, otherwise 1\",\n          posIncrAtt.getPositionIncrement(), enablePositionIncrements ? 3 : 1);\n    }\n    stpf.end();\n    stpf.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testPositons(TypeTokenFilter).mjava","pathOld":"/dev/null","sourceNew":"  private void testPositons(TypeTokenFilter stpf) throws IOException {\n    TypeAttribute typeAtt = stpf.getAttribute(TypeAttribute.class);\n    CharTermAttribute termAttribute = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    boolean enablePositionIncrements = stpf.getEnablePositionIncrements();\n    while (stpf.incrementToken()) {\n      log(\"Token: \" + termAttribute.toString() + \": \" + typeAtt.type() + \" - \" + posIncrAtt.getPositionIncrement());\n      assertEquals(\"if position increment is enabled the positionIncrementAttribute value should be 3, otherwise 1\",\n          posIncrAtt.getPositionIncrement(), enablePositionIncrements ? 3 : 1);\n    }\n    stpf.end();\n    stpf.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testPositons(TypeTokenFilter).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testPositons(TypeTokenFilter).mjava","sourceNew":"  private void testPositons(TypeTokenFilter stpf) throws IOException {\n    TypeAttribute typeAtt = stpf.getAttribute(TypeAttribute.class);\n    CharTermAttribute termAttribute = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    boolean enablePositionIncrements = stpf.getEnablePositionIncrements();\n    while (stpf.incrementToken()) {\n      log(\"Token: \" + termAttribute.toString() + \": \" + typeAtt.type() + \" - \" + posIncrAtt.getPositionIncrement());\n      assertEquals(\"if position increment is enabled the positionIncrementAttribute value should be 3, otherwise 1\",\n          posIncrAtt.getPositionIncrement(), enablePositionIncrements ? 3 : 1);\n    }\n    stpf.end();\n    stpf.close();\n  }\n\n","sourceOld":"  private void testPositons(TypeTokenFilter stpf) throws IOException {\n    TypeAttribute typeAtt = stpf.getAttribute(TypeAttribute.class);\n    CharTermAttribute termAttribute = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    stpf.reset();\n    boolean enablePositionIncrements = stpf.getEnablePositionIncrements();\n    while (stpf.incrementToken()) {\n      log(\"Token: \" + termAttribute.toString() + \": \" + typeAtt.type() + \" - \" + posIncrAtt.getPositionIncrement());\n      assertEquals(\"if position increment is enabled the positionIncrementAttribute value should be 3, otherwise 1\",\n          posIncrAtt.getPositionIncrement(), enablePositionIncrements ? 3 : 1);\n    }\n    stpf.end();\n    stpf.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}