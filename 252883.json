{"path":"lucene/core/src/test/org/apache/lucene/util/TestMergedIterator#testMergeEmpty().mjava","commits":[{"id":"050e6201c3a7d4c351ebc06cbe4822e26e028117","date":1382375603,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMergedIterator#testMergeEmpty().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public void testMergeEmpty() {\n    Iterator<Integer> merged = new MergedIterator<Integer>();\n    assertFalse(merged.hasNext());\n\n    merged = new MergedIterator<Integer>(new ArrayList<Integer>().iterator());\n    assertFalse(merged.hasNext());\n\n    Iterator<Integer>[] itrs = new Iterator[random().nextInt(100)];\n    for (int i = 0; i < itrs.length; i++) {\n      itrs[i] = new ArrayList<Integer>().iterator();\n    }\n    merged = new MergedIterator<Integer>( itrs );\n    assertFalse(merged.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMergedIterator#testMergeEmpty().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMergedIterator#testMergeEmpty().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public void testMergeEmpty() {\n    Iterator<Integer> merged = new MergedIterator<>();\n    assertFalse(merged.hasNext());\n\n    merged = new MergedIterator<>(new ArrayList<Integer>().iterator());\n    assertFalse(merged.hasNext());\n\n    Iterator<Integer>[] itrs = new Iterator[random().nextInt(100)];\n    for (int i = 0; i < itrs.length; i++) {\n      itrs[i] = new ArrayList<Integer>().iterator();\n    }\n    merged = new MergedIterator<>( itrs );\n    assertFalse(merged.hasNext());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public void testMergeEmpty() {\n    Iterator<Integer> merged = new MergedIterator<Integer>();\n    assertFalse(merged.hasNext());\n\n    merged = new MergedIterator<Integer>(new ArrayList<Integer>().iterator());\n    assertFalse(merged.hasNext());\n\n    Iterator<Integer>[] itrs = new Iterator[random().nextInt(100)];\n    for (int i = 0; i < itrs.length; i++) {\n      itrs[i] = new ArrayList<Integer>().iterator();\n    }\n    merged = new MergedIterator<Integer>( itrs );\n    assertFalse(merged.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}