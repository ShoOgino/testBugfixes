{"path":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","commits":[{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed, context);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed, context);\n\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],Counter,IOContext).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static Writer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17cc1e690c31c800f83860fbfd0423462962ef01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["17cc1e690c31c800f83860fbfd0423462962ef01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"17cc1e690c31c800f83860fbfd0423462962ef01":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17cc1e690c31c800f83860fbfd0423462962ef01"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}