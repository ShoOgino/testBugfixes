{"path":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629","date":1297191928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["7b91922b55d15444d554721b352861d028eb8278","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}