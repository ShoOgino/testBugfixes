{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07904fa7a96affc72ebc1658bdbbe4c227843a11","date":1345657879,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = input.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","bugFix":["7e477c2108982ba9974f73aa8800270c75cb4971"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = input.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","07904fa7a96affc72ebc1658bdbbe4c227843a11"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07904fa7a96affc72ebc1658bdbbe4c227843a11":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07904fa7a96affc72ebc1658bdbbe4c227843a11"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","07904fa7a96affc72ebc1658bdbbe4c227843a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"07904fa7a96affc72ebc1658bdbbe4c227843a11":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}