{"path":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","commits":[{"id":"f66f1826f07774581d2ec661444fc987bdd1a85d","date":1144730206,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n                \n    StringWriter writer = new StringWriter(32000);\n    xmlwriter.write(writer,req,rsp);\n\n    req.close();\n    \n    return writer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5db1d0b312c5915094ef798a33d392623fd40bb3","date":1148622242,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n                \n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n    \n    return sw.toString();\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n                \n    StringWriter writer = new StringWriter(32000);\n    xmlwriter.write(writer,req,rsp);\n\n    req.close();\n    \n    return writer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f483a44e10befaaa6da11d433e2eb0f52829eec","date":1175273998,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n    return query(req.getQueryType(), req);\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n                \n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n    \n    return sw.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n    return query(req.getParams().get(CommonParams.QT), req);\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n    return query(req.getQueryType(), req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n    return query(req.getParams().get(CommonParams.QT), req);\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(SolrQueryRequest req) throws IOException, Exception {\n    return query(req.getParams().get(CommonParams.QT), req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"5db1d0b312c5915094ef798a33d392623fd40bb3":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["5db1d0b312c5915094ef798a33d392623fd40bb3"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5db1d0b312c5915094ef798a33d392623fd40bb3":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["5db1d0b312c5915094ef798a33d392623fd40bb3"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}