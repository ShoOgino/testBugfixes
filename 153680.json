{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(TEST_VERSION_CURRENT), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(TEST_VERSION_CURRENT), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(TEST_VERSION_CURRENT), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(TEST_VERSION_CURRENT), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(TEST_VERSION_CURRENT), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    a.close();\n    a = new JapaneseAnalyzer();\n    assertAnalyzesToPositions(a, \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    a.close();\n    a = new JapaneseAnalyzer();\n    assertAnalyzesToPositions(a, \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    final Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    assertAnalyzesToPositions(new JapaneseAnalyzer(), \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dcc09cac106847a24991642f3bb5444c60ddbe7","date":1580536269,"type":3,"author":"Kazuaki Hiraga","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testDecomposition().mjava","sourceNew":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 1, 1},\n                              new int[] { 1, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 1, 1},\n                              new int[]{1, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 1, 1},\n                              new int[] {1, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"ミノルタ\",\n                                             \"ホールディングス\"},\n                              new int[] {1, 1, 1},\n                              new int[] {1, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"空港\" },\n                              new int[] {1, 1},\n                              new int[] {1, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    a.close();\n    a = new JapaneseAnalyzer();\n    assertAnalyzesToPositions(a, \"京都大学硬式野球部\",\n                     new String[] { \"京都\",\n                                    \"大学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test that search mode is enabled and working by default\n   */\n  public void testDecomposition() throws IOException {\n\n    Analyzer a = new JapaneseAnalyzer(null, Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n\n    // Senior software engineer:\n    assertAnalyzesToPositions(a, \"シニアソフトウェアエンジニア\",\n                              new String[] { \"シニア\",\n                                             \"シニアソフトウェアエンジニア\", // zero pos inc\n                                             \"ソフトウェア\",\n                                             \"エンジニア\" },\n                              new int[] { 1, 0, 1, 1},\n                              new int[] { 1, 3, 1, 1}\n                              );\n\n    // Senior project manager: also tests katakana spelling variation stemming\n    assertAnalyzesToPositions(a, \"シニアプロジェクトマネージャー\",\n                              new String[] { \"シニア\",\n                                              \"シニアプロジェクトマネージャ\", // trailing ー removed by stemming, zero pos inc\n                                              \"プロジェクト\",\n                                              \"マネージャ\"}, // trailing ー removed by stemming\n                              new int[]{1, 0, 1, 1},\n                              new int[]{1, 3, 1, 1}\n                              );\n\n    // Kansai International Airport:\n    assertAnalyzesToPositions(a, \"関西国際空港\",\n                              new String[] { \"関西\",\n                                             \"関西国際空港\", // zero pos inc\n                                             \"国際\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Konika Minolta Holdings; not quite the right\n    // segmentation (see LUCENE-3726):\n    assertAnalyzesToPositions(a, \"コニカミノルタホールディングス\",\n                              new String[] { \"コニカ\",\n                                             \"コニカミノルタホールディングス\", // zero pos inc\n                                             \"ミノルタ\", \n                                             \"ホールディングス\"},\n                              new int[] {1, 0, 1, 1},\n                              new int[] {1, 3, 1, 1}\n                              );\n\n    // Narita Airport\n    assertAnalyzesToPositions(a, \"成田空港\",\n                              new String[] { \"成田\",\n                                             \"成田空港\",\n                                             \"空港\" },\n                              new int[] {1, 0, 1},\n                              new int[] {1, 2, 1}\n                              );\n\n    // Kyoto University Baseball Club\n    a.close();\n    a = new JapaneseAnalyzer();\n    assertAnalyzesToPositions(a, \"京都大学硬式野球部\",\n                     new String[] { \"京都大\",\n                                    \"学\",\n                                    \"硬式\",\n                                    \"野球\",\n                                    \"部\" },\n                              new int[] {1, 1, 1, 1, 1},\n                              new int[] {1, 1, 1, 1, 1});\n    // toDotFile(a, \"成田空港\", \"/mnt/scratch/out.dot\");\n    a.close();\n  }\n\n","bugFix":["0984ad47974c2d5d354519ddb2aa8358973a6271","9bb31aad028aea902946d552fefeb9901ed6adf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dcc09cac106847a24991642f3bb5444c60ddbe7"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9dcc09cac106847a24991642f3bb5444c60ddbe7"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}