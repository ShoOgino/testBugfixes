{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ea00b25de0d094d032e218976854c250141e7150","ea00b25de0d094d032e218976854c250141e7150","ea00b25de0d094d032e218976854c250141e7150"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collation\".equals(n)) {\n        collation = (String) sugg.getVal(i);\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["29ef99d61cda9641b6250bf9567329a6e65f901d","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}