{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  private final void writeDocuments(\n      String name, \n      DocumentListInfo docs, \n      Set<String> fields) throws IOException \n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n    \n    int sz=docs.getCount();\n    if (doIndent) indent();\n    \n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));  // TODO: change to long\n    writeAttr(\"start\",Long.toString(docs.getStart()));        // TODO: change to long\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocuments(String,DocumentListInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  private final void writeDocuments(\n      String name,\n      DocumentListInfo docs,\n      Set<String> fields) throws IOException\n  {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.getCount();\n    if (doIndent) indent();\n\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Long.toString(docs.getNumFound()));\n    writeAttr(\"start\",Long.toString(docs.getStart()));\n    if (includeScore && docs.getMaxScore()!=null) {\n      writeAttr(\"maxScore\",Float.toString(docs.getMaxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    docs.writeDocs(includeScore, fields);\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}