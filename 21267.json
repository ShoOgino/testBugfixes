{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","commits":[{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, CODEC_NAME,\n            VERSION_START,\n            VERSION_CURRENT,\n            segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        byte hasMinVersion = input.readByte();\n        final Version minVersion;\n        switch (hasMinVersion) {\n          case 0:\n            minVersion = null;\n            break;\n          case 1:\n            minVersion = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n            break;\n          default:\n            throw new CorruptIndexException(\"Illegal boolean value \" + hasMinVersion, input);\n        }\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String name = input.readString();\n            sortFields[i] = SortFieldProvider.forName(name).readSortField(input);\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, minVersion, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}