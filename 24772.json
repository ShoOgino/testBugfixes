{"path":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","cca56866c19997e28ef073622656669c15210540"],"7b91922b55d15444d554721b352861d028eb8278":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["cca56866c19997e28ef073622656669c15210540"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["7b91922b55d15444d554721b352861d028eb8278"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0061262413ecc163d6eebba1b5c43ab91a0c2dc5","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","29ef99d61cda9641b6250bf9567329a6e65f901d","cca56866c19997e28ef073622656669c15210540","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}