{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      SimpleDocValuesFormat fmt = state.segmentInfo.getCodec().simpleDocValuesFormat();\n      // nocommit once we make\n      // Codec.simpleDocValuesFormat abstract, change\n      // this to assert fmt != null!\n      if (fmt == null) {\n        return;\n      }\n\n      SimpleDVConsumer dvConsumer = fmt.fieldsConsumer(state);\n      // nocommit change to assert != null:\n      if (dvConsumer == null) {\n        return;\n      }\n\n      for(DocValuesWriter writer : writers.values()) {\n        writer.finish(state.segmentInfo.getDocCount());\n        writer.flush(state, dvConsumer);\n      }\n      \n      writers.clear();\n      dvConsumer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      // nocommit once we make\n      // Codec.simpleDocValuesFormat abstract, change\n      // this to assert fmt != null!\n      if (fmt == null) {\n        return;\n      }\n\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      // nocommit change to assert != null:\n      if (dvConsumer == null) {\n        return;\n      }\n\n      for(DocValuesWriter writer : writers.values()) {\n        writer.finish(state.segmentInfo.getDocCount());\n        writer.flush(state, dvConsumer);\n      }\n      \n      writers.clear();\n      dvConsumer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      SimpleDocValuesFormat fmt = state.segmentInfo.getCodec().simpleDocValuesFormat();\n      // nocommit once we make\n      // Codec.simpleDocValuesFormat abstract, change\n      // this to assert fmt != null!\n      if (fmt == null) {\n        return;\n      }\n\n      SimpleDVConsumer dvConsumer = fmt.fieldsConsumer(state);\n      // nocommit change to assert != null:\n      if (dvConsumer == null) {\n        return;\n      }\n\n      for(DocValuesWriter writer : writers.values()) {\n        writer.finish(state.segmentInfo.getDocCount());\n        writer.flush(state, dvConsumer);\n      }\n      \n      writers.clear();\n      dvConsumer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc0e777f74de82c8471ff280fc2c585f024c07ec","date":1358783725,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      // nocommit once we make\n      // Codec.simpleDocValuesFormat abstract, change\n      // this to assert fmt != null!\n      if (fmt == null) {\n        return;\n      }\n\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      // nocommit change to assert != null:\n      if (dvConsumer == null) {\n        return;\n      }\n\n      for(DocValuesWriter writer : writers.values()) {\n        writer.finish(state.segmentInfo.getDocCount());\n        writer.flush(state, dvConsumer);\n      }\n      \n      writers.clear();\n      dvConsumer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91558b294ce7daddef081a90b916f4e3b6d1d04d","date":1359636003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        // TODO: catch missing DV fields here?  else we have\n        // null/\"\" depending on how docs landed in segments?\n        // but we can't detect all cases, and we should leave\n        // this behavior undefined. dv is not \"schemaless\": its column-stride.\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        // TODO: catch missing DV fields here?  else we have\n        // null/\"\" depending on how docs landed in segments?\n        // but we can't detect all cases, and we should leave\n        // this behavior undefined. dv is not \"schemaless\": its column-stride.\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        // TODO: catch missing DV fields here?  else we have\n        // null/\"\" depending on how docs landed in segments?\n        // but we can't detect all cases, and we should leave\n        // this behavior undefined. dv is not \"schemaless\": its column-stride.\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        // TODO: catch missing DV fields here?  else we have\n        // null/\"\" depending on how docs landed in segments?\n        // but we can't detect all cases, and we should leave\n        // this behavior undefined. dv is not \"schemaless\": its column-stride.\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#flush(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  void flush(SegmentWriteState state) throws IOException {\n    if (!writers.isEmpty()) {\n      DocValuesFormat fmt = state.segmentInfo.getCodec().docValuesFormat();\n      DocValuesConsumer dvConsumer = fmt.fieldsConsumer(state);\n      boolean success = false;\n      try {\n        for(DocValuesWriter writer : writers.values()) {\n          writer.finish(state.segmentInfo.getDocCount());\n          writer.flush(state, dvConsumer);\n        }\n        // TODO: catch missing DV fields here?  else we have\n        // null/\"\" depending on how docs landed in segments?\n        // but we can't detect all cases, and we should leave\n        // this behavior undefined. dv is not \"schemaless\": its column-stride.\n        writers.clear();\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(dvConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(dvConsumer);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["d4d69c535930b5cce125cff868d40f6373dc27d4","52c7e49be259508735752fba88085255014a6ecf"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["d4d69c535930b5cce125cff868d40f6373dc27d4","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91558b294ce7daddef081a90b916f4e3b6d1d04d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91558b294ce7daddef081a90b916f4e3b6d1d04d":["dc0e777f74de82c8471ff280fc2c585f024c07ec"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc0e777f74de82c8471ff280fc2c585f024c07ec":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"52c7e49be259508735752fba88085255014a6ecf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["dc0e777f74de82c8471ff280fc2c585f024c07ec"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"91558b294ce7daddef081a90b916f4e3b6d1d04d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"dc0e777f74de82c8471ff280fc2c585f024c07ec":["91558b294ce7daddef081a90b916f4e3b6d1d04d"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}