{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":null,"sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}