{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"/dev/null","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Directory dir = getDirectory(createTempDir());\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    assumeFalse(\"test works with lock files\", TestUtil.hasVirusChecker(tempPath));\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Directory dir = getDirectory(createTempDir());\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    assumeFalse(\"test works with lock files\", TestUtil.hasVirusChecker(tempPath));\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Directory dir = getDirectory(createTempDir());\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Directory dir = getDirectory(createTempDir());\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Directory dir = getDirectory(createTempDir());\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testInvalidAfterClose().mjava","sourceNew":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    expectThrows(AlreadyClosedException.class, () -> {      \n      l.ensureValid();\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  /** Test ensureValid throws exception after close */\n  public void testInvalidAfterClose() throws IOException {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n    \n    Lock l = dir.obtainLock(\"commit\");\n    l.close();\n\n    try {\n      l.ensureValid();\n      fail(\"didn't get exception\");\n    } catch (AlreadyClosedException expected) {}\n    dir.close();\n  }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["618635065f043788c9e034f96ca5cd5cea1b4592","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}