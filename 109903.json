{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableTextFieldWithAnalyzer() throws Exception {\n    String fieldTypeName = \"sort_text_type\";\n    String fieldName = \"sort_text\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"    'maxCharsForDocValues':6\\n\" +\n        \"    'class':'solr.SortableTextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': '\"+fieldTypeName+\"',\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(restTestHarness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertEquals(0,\n                 getSolrClient().add(Arrays.asList(sdoc(\"id\",\"1\",fieldName,\"xxx aaa\"),\n                                                   sdoc(\"id\",\"2\",fieldName,\"xxx bbb aaa\"),\n                                                   sdoc(\"id\",\"3\",fieldName,\"xxx bbb zzz\"))).getStatus());\n                                                   \n    assertEquals(0, getSolrClient().commit().getStatus());\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\",\"sort\", fieldName + \" asc, id desc\")).getResults();\n         \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"1\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"2\", docs.get(2).getFieldValue(\"id\"));\n    }\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\", \"sort\", fieldName + \" desc, id asc\")).getResults();\n                                                           \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"2\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"1\", docs.get(2).getFieldValue(\"id\"));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","sourceNew":"  public void testSortableTextFieldWithAnalyzer() throws Exception {\n    String fieldTypeName = \"sort_text_type\";\n    String fieldName = \"sort_text\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"    'maxCharsForDocValues':6\\n\" +\n        \"    'class':'solr.SortableTextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': '\"+fieldTypeName+\"',\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(restTestHarness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertEquals(0,\n                 getSolrClient().add(Arrays.asList(sdoc(\"id\",\"1\",fieldName,\"xxx aaa\"),\n                                                   sdoc(\"id\",\"2\",fieldName,\"xxx bbb aaa\"),\n                                                   sdoc(\"id\",\"3\",fieldName,\"xxx bbb zzz\"))).getStatus());\n                                                   \n    assertEquals(0, getSolrClient().commit().getStatus());\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\",\"sort\", fieldName + \" asc, id desc\")).getResults();\n         \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"1\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"2\", docs.get(2).getFieldValue(\"id\"));\n    }\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\", \"sort\", fieldName + \" desc, id asc\")).getResults();\n                                                           \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"2\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"1\", docs.get(2).getFieldValue(\"id\"));\n    }\n    \n  }\n\n","sourceOld":"  public void testSortableTextFieldWithAnalyzer() throws Exception {\n    String fieldTypeName = \"sort_text_type\";\n    String fieldName = \"sort_text\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"    'maxCharsForDocValues':6\\n\" +\n        \"    'class':'solr.SortableTextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': '\"+fieldTypeName+\"',\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(restTestHarness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertEquals(0,\n                 getSolrClient().add(Arrays.asList(sdoc(\"id\",\"1\",fieldName,\"xxx aaa\"),\n                                                   sdoc(\"id\",\"2\",fieldName,\"xxx bbb aaa\"),\n                                                   sdoc(\"id\",\"3\",fieldName,\"xxx bbb zzz\"))).getStatus());\n                                                   \n    assertEquals(0, getSolrClient().commit().getStatus());\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\",\"sort\", fieldName + \" asc, id desc\")).getResults();\n         \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"1\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"2\", docs.get(2).getFieldValue(\"id\"));\n    }\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\", \"sort\", fieldName + \" desc, id asc\")).getResults();\n                                                           \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"2\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"1\", docs.get(2).getFieldValue(\"id\"));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSortableTextFieldWithAnalyzer().mjava","sourceNew":"  public void testSortableTextFieldWithAnalyzer() throws Exception {\n    String fieldTypeName = \"sort_text_type\";\n    String fieldName = \"sort_text\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"    'maxCharsForDocValues':6\\n\" +\n        \"    'class':'solr.SortableTextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': '\"+fieldTypeName+\"',\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"errors\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map fields = getObj(restTestHarness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertEquals(0,\n                 getSolrClient().add(Arrays.asList(sdoc(\"id\",\"1\",fieldName,\"xxx aaa\"),\n                                                   sdoc(\"id\",\"2\",fieldName,\"xxx bbb aaa\"),\n                                                   sdoc(\"id\",\"3\",fieldName,\"xxx bbb zzz\"))).getStatus());\n                                                   \n    assertEquals(0, getSolrClient().commit().getStatus());\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\",\"sort\", fieldName + \" asc, id desc\")).getResults();\n         \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"1\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"2\", docs.get(2).getFieldValue(\"id\"));\n    }\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\", \"sort\", fieldName + \" desc, id asc\")).getResults();\n                                                           \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"2\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"1\", docs.get(2).getFieldValue(\"id\"));\n    }\n    \n  }\n\n","sourceOld":"  public void testSortableTextFieldWithAnalyzer() throws Exception {\n    String fieldTypeName = \"sort_text_type\";\n    String fieldName = \"sort_text\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"    'maxCharsForDocValues':6\\n\" +\n        \"    'class':'solr.SortableTextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': '\"+fieldTypeName+\"',\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(restTestHarness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertEquals(0,\n                 getSolrClient().add(Arrays.asList(sdoc(\"id\",\"1\",fieldName,\"xxx aaa\"),\n                                                   sdoc(\"id\",\"2\",fieldName,\"xxx bbb aaa\"),\n                                                   sdoc(\"id\",\"3\",fieldName,\"xxx bbb zzz\"))).getStatus());\n                                                   \n    assertEquals(0, getSolrClient().commit().getStatus());\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\",\"sort\", fieldName + \" asc, id desc\")).getResults();\n         \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"1\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"2\", docs.get(2).getFieldValue(\"id\"));\n    }\n    {\n      SolrDocumentList docs = getSolrClient().query\n        (params(\"q\",fieldName+\":xxx\", \"sort\", fieldName + \" desc, id asc\")).getResults();\n                                                           \n      assertEquals(3L, docs.getNumFound());\n      assertEquals(3L, docs.size());\n      assertEquals(\"2\", docs.get(0).getFieldValue(\"id\"));\n      assertEquals(\"3\", docs.get(1).getFieldValue(\"id\"));\n      assertEquals(\"1\", docs.get(2).getFieldValue(\"id\"));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"]},"commit2Childs":{"09db84b25dda87b73022d145a68f14c86a3a552d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}