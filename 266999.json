{"path":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyEquals(IndexReader r1, IndexReader r2, String idField) throws Throwable {\n    assertEquals(r1.numDocs(), r2.numDocs());\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    TermDocs termDocs1 = r1.termDocs();\n    TermDocs termDocs2 = r2.termDocs();\n\n    // create mapping from id2 space to id2 based on idField\n    idField = StringHelper.intern(idField);\n    TermEnum termEnum = r1.terms (new Term (idField, \"\"));\n    do {\n      Term term = termEnum.term();\n      if (term==null || term.field() != idField) break;\n\n      termDocs1.seek (termEnum);\n      if (!termDocs1.next()) {\n        // This doc is deleted and wasn't replaced\n        termDocs2.seek(termEnum);\n        assertFalse(termDocs2.next());\n        continue;\n      }\n\n      int id1 = termDocs1.doc();\n      assertFalse(termDocs1.next());\n\n      termDocs2.seek(termEnum);\n      assertTrue(termDocs2.next());\n      int id2 = termDocs2.doc();\n      assertFalse(termDocs2.next());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermFreqVectors(id1), r2.getTermFreqVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        TermFreqVector[] tv1 = r1.getTermFreqVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null)\n          for(int i=0;i<tv1.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv1[i]);\n        \n        TermFreqVector[] tv2 = r2.getTermFreqVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null)\n          for(int i=0;i<tv2.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv2[i]);\n        \n        throw e;\n      }\n\n    } while (termEnum.next());\n\n    termEnum.close();\n\n    // Verify postings\n    TermEnum termEnum1 = r1.terms (new Term (\"\", \"\"));\n    TermEnum termEnum2 = r2.terms (new Term (\"\", \"\"));\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      Term term1,term2;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        term1 = termEnum1.term();\n        if (term1==null) break;\n        termDocs1.seek(termEnum1);\n        while (termDocs1.next()) {\n          int d1 = termDocs1.doc();\n          int f1 = termDocs1.freq();\n          info1[len1] = (((long)d1)<<32) | f1;\n          len1++;\n        }\n        if (len1>0) break;\n        if (!termEnum1.next()) break;\n      }\n\n       // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        term2 = termEnum2.term();\n        if (term2==null) break;\n        termDocs2.seek(termEnum2);\n        while (termDocs2.next()) {\n          int d2 = termDocs2.doc();\n          int f2 = termDocs2.freq();\n          info2[len2] = (((long)r2r1[d2])<<32) | f2;\n          len2++;\n        }\n        if (len2>0) break;\n        if (!termEnum2.next()) break;\n      }\n\n      if (!hasDeletes)\n        assertEquals(termEnum1.docFreq(), termEnum2.docFreq());\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(info1[i], info2[i]);\n      }\n\n      termEnum1.next();\n      termEnum2.next();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","sourceNew":"  public static void verifyEquals(IndexReader r1, IndexReader r2, String idField) throws Throwable {\n    assertEquals(r1.numDocs(), r2.numDocs());\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    TermDocs termDocs1 = r1.termDocs();\n    TermDocs termDocs2 = r2.termDocs();\n\n    // create mapping from id2 space to id2 based on idField\n    idField = StringHelper.intern(idField);\n    TermEnum termEnum = r1.terms (new Term (idField, \"\"));\n    do {\n      Term term = termEnum.term();\n      if (term==null || term.field() != idField) break;\n\n      termDocs1.seek (termEnum);\n      if (!termDocs1.next()) {\n        // This doc is deleted and wasn't replaced\n        termDocs2.seek(termEnum);\n        assertFalse(termDocs2.next());\n        continue;\n      }\n\n      int id1 = termDocs1.doc();\n      assertFalse(termDocs1.next());\n\n      termDocs2.seek(termEnum);\n      assertTrue(termDocs2.next());\n      int id2 = termDocs2.doc();\n      assertFalse(termDocs2.next());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermFreqVectors(id1), r2.getTermFreqVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        TermFreqVector[] tv1 = r1.getTermFreqVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null)\n          for(int i=0;i<tv1.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv1[i]);\n        \n        TermFreqVector[] tv2 = r2.getTermFreqVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null)\n          for(int i=0;i<tv2.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv2[i]);\n        \n        throw e;\n      }\n\n    } while (termEnum.next());\n\n    termEnum.close();\n\n    // Verify postings\n    TermEnum termEnum1 = r1.terms (new Term (\"\", \"\"));\n    TermEnum termEnum2 = r2.terms (new Term (\"\", \"\"));\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      Term term1,term2;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        term1 = termEnum1.term();\n        if (term1==null) break;\n        termDocs1.seek(termEnum1);\n        while (termDocs1.next()) {\n          int d1 = termDocs1.doc();\n          int f1 = termDocs1.freq();\n          info1[len1] = (((long)d1)<<32) | f1;\n          len1++;\n        }\n        if (len1>0) break;\n        if (!termEnum1.next()) break;\n      }\n\n       // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        term2 = termEnum2.term();\n        if (term2==null) break;\n        termDocs2.seek(termEnum2);\n        while (termDocs2.next()) {\n          int d2 = termDocs2.doc();\n          int f2 = termDocs2.freq();\n          info2[len2] = (((long)r2r1[d2])<<32) | f2;\n          len2++;\n        }\n        if (len2>0) break;\n        if (!termEnum2.next()) break;\n      }\n\n      if (!hasDeletes)\n        assertEquals(termEnum1.docFreq(), termEnum2.docFreq());\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(info1[i], info2[i]);\n      }\n\n      termEnum1.next();\n      termEnum2.next();\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(IndexReader r1, IndexReader r2, String idField) throws Throwable {\n    assertEquals(r1.numDocs(), r2.numDocs());\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    TermDocs termDocs1 = r1.termDocs();\n    TermDocs termDocs2 = r2.termDocs();\n\n    // create mapping from id2 space to id2 based on idField\n    idField = StringHelper.intern(idField);\n    TermEnum termEnum = r1.terms (new Term (idField, \"\"));\n    do {\n      Term term = termEnum.term();\n      if (term==null || term.field() != idField) break;\n\n      termDocs1.seek (termEnum);\n      if (!termDocs1.next()) {\n        // This doc is deleted and wasn't replaced\n        termDocs2.seek(termEnum);\n        assertFalse(termDocs2.next());\n        continue;\n      }\n\n      int id1 = termDocs1.doc();\n      assertFalse(termDocs1.next());\n\n      termDocs2.seek(termEnum);\n      assertTrue(termDocs2.next());\n      int id2 = termDocs2.doc();\n      assertFalse(termDocs2.next());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermFreqVectors(id1), r2.getTermFreqVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        TermFreqVector[] tv1 = r1.getTermFreqVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null)\n          for(int i=0;i<tv1.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv1[i]);\n        \n        TermFreqVector[] tv2 = r2.getTermFreqVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null)\n          for(int i=0;i<tv2.length;i++)\n            System.out.println(\"    \" + i + \": \" + tv2[i]);\n        \n        throw e;\n      }\n\n    } while (termEnum.next());\n\n    termEnum.close();\n\n    // Verify postings\n    TermEnum termEnum1 = r1.terms (new Term (\"\", \"\"));\n    TermEnum termEnum2 = r2.terms (new Term (\"\", \"\"));\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      Term term1,term2;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        term1 = termEnum1.term();\n        if (term1==null) break;\n        termDocs1.seek(termEnum1);\n        while (termDocs1.next()) {\n          int d1 = termDocs1.doc();\n          int f1 = termDocs1.freq();\n          info1[len1] = (((long)d1)<<32) | f1;\n          len1++;\n        }\n        if (len1>0) break;\n        if (!termEnum1.next()) break;\n      }\n\n       // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        term2 = termEnum2.term();\n        if (term2==null) break;\n        termDocs2.seek(termEnum2);\n        while (termDocs2.next()) {\n          int d2 = termDocs2.doc();\n          int f2 = termDocs2.freq();\n          info2[len2] = (((long)r2r1[d2])<<32) | f2;\n          len2++;\n        }\n        if (len2>0) break;\n        if (!termEnum2.next()) break;\n      }\n\n      if (!hasDeletes)\n        assertEquals(termEnum1.docFreq(), termEnum2.docFreq());\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(info1[i], info2[i]);\n      }\n\n      termEnum1.next();\n      termEnum2.next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}