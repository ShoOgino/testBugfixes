{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","commits":[{"id":"0b631a3d48258df52a36daa975d3f8deee09b75d","date":1438887563,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"/dev/null","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      return MatchStatus.FORBIDDEN;\n    }\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6","date":1448994587,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      return MatchStatus.FORBIDDEN;\n    }\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe","date":1450360183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n            String paramVal = context.getParams().get(e.getKey());\n            Object val = e.getValue();\n            if (val instanceof List) {\n              if (!((List) val).contains(paramVal)) continue loopPermissions;\n            } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n        //this permissions HTTP method does not match this rule. try other rules\n        continue;\n      }\n      if(permission.predicate != null){\n        if(!permission.predicate.test(context)) continue ;\n      }\n\n      if (permission.params != null) {\n        for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n          String paramVal = context.getParams().get(e.getKey());\n          Object val = e.getValue();\n          if (val instanceof List) {\n            if (!((List) val).contains(paramVal)) continue loopPermissions;\n          } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":["ebd6b7b6f5196cb5defe92032d6cc2147690954f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebd6b7b6f5196cb5defe92032d6cc2147690954f","date":1462271185,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Function<String[], Boolean>> e : permission.params.entrySet()) {\n            String[] paramVal = context.getParams().getParams(e.getKey());\n            if(!e.getValue().apply(paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n            String paramVal = context.getParams().get(e.getKey());\n            Object val = e.getValue();\n            if (val instanceof List) {\n              if (!((List) val).contains(paramVal)) continue loopPermissions;\n            } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6548a35b9da836a0b749064ee61085bd7cd80ffb","date":1462272361,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Function<String[], Boolean>> e : permission.params.entrySet()) {\n            String[] paramVal = context.getParams().getParams(e.getKey());\n            if(!e.getValue().apply(paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n            String paramVal = context.getParams().get(e.getKey());\n            Object val = e.getValue();\n            if (val instanceof List) {\n              if (!((List) val).contains(paramVal)) continue loopPermissions;\n            } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Function<String[], Boolean>> e : permission.params.entrySet()) {\n            String[] paramVal = context.getParams().getParams(e.getKey());\n            if(!e.getValue().apply(paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Object> e : permission.params.entrySet()) {\n            String paramVal = context.getParams().get(e.getKey());\n            Object val = e.getValue();\n            if (val instanceof List) {\n              if (!((List) val).contains(paramVal)) continue loopPermissions;\n            } else if (!Objects.equals(val, paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c682f5d8dbe387f95559e6bd61039b04c10b140d","date":1553913180,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n    loopPermissions:\n    for (int i = 0; i < permissions.size(); i++) {\n      Permission permission = permissions.get(i);\n      if (PermissionNameProvider.values.containsKey(permission.name)) {\n        if (context.getHandler() instanceof PermissionNameProvider) {\n          PermissionNameProvider handler = (PermissionNameProvider) context.getHandler();\n          PermissionNameProvider.Name permissionName = handler.getPermissionName(context);\n          if (permissionName == null || !permission.name.equals(permissionName.name)) {\n            continue;\n          }\n        } else {\n          //all is special. it can match any\n          if(permission.wellknownName != PermissionNameProvider.Name.ALL) continue;\n        }\n      } else {\n        if (permission.method != null && !permission.method.contains(context.getHttpMethod())) {\n          //this permissions HTTP method does not match this rule. try other rules\n          continue;\n        }\n        if (permission.params != null) {\n          for (Map.Entry<String, Function<String[], Boolean>> e : permission.params.entrySet()) {\n            String[] paramVal = context.getParams().getParams(e.getKey());\n            if(!e.getValue().apply(paramVal)) continue loopPermissions;\n          }\n        }\n      }\n\n      if (permission.role == null) {\n        //no role is assigned permission.That means everybody is allowed to access\n        return MatchStatus.PERMITTED;\n      }\n      if (principal == null) {\n        log.info(\"request has come without principal. failed permission {} \",permission);\n        //this resource needs a principal but the request has come without\n        //any credential.\n        return MatchStatus.USER_REQUIRED;\n      } else if (permission.role.contains(\"*\")) {\n        return MatchStatus.PERMITTED;\n      }\n\n      for (String role : permission.role) {\n        Set<String> userRoles = usersVsRoles.get(principal.getName());\n        if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n      }\n      log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", permission, principal);\n      return MatchStatus.FORBIDDEN;\n    }\n    log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n    return MatchStatus.NO_PERMISSIONS_FOUND;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb842b7eba1323ec814496c88e41dc3264d1d4e0","date":1569005452,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) return MatchStatus.NO_PERMISSIONS_FOUND;\n    Principal principal = context.getUserPrincipal();\n\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      log.debug(\"No permissions configured for the resource {} . So allowed to access\", context.getResource());\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#checkPathPerm(List[Permission],AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#checkPathPerm(List[Permission],AuthorizationContext).mjava","sourceNew":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","sourceOld":"  private MatchStatus checkPathPerm(List<Permission> permissions, AuthorizationContext context) {\n    if (permissions == null || permissions.isEmpty()) {\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    Principal principal = context.getUserPrincipal();\n\n    log.trace(\"Following perms are associated with this collection and path: [{}]\", permissions);\n    final Permission governingPermission = findFirstGoverningPermission(permissions, context);\n    if (governingPermission == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"No perms configured for the resource {} . So allowed to access\", context.getResource());\n      }\n      return MatchStatus.NO_PERMISSIONS_FOUND;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Found perm [{}] to govern resource [{}]\", governingPermission, context.getResource());\n    }\n\n    return determineIfPermissionPermitsPrincipal(principal, governingPermission);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["38670fe54ff76ff2732ce6ed9d48b220c93b1dbe"],"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"ebd6b7b6f5196cb5defe92032d6cc2147690954f":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9","6548a35b9da836a0b749064ee61085bd7cd80ffb"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"8076096f334b0665d0a69a63ee98ac09baad402b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9","ebd6b7b6f5196cb5defe92032d6cc2147690954f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["38670fe54ff76ff2732ce6ed9d48b220c93b1dbe"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["ebd6b7b6f5196cb5defe92032d6cc2147690954f","55b50463286869f584cf849d1587a0fcd54d1dfa","6548a35b9da836a0b749064ee61085bd7cd80ffb"],"38670fe54ff76ff2732ce6ed9d48b220c93b1dbe":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"ebd6b7b6f5196cb5defe92032d6cc2147690954f":["6548a35b9da836a0b749064ee61085bd7cd80ffb"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["8076096f334b0665d0a69a63ee98ac09baad402b"],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"6548a35b9da836a0b749064ee61085bd7cd80ffb":["55b50463286869f584cf849d1587a0fcd54d1dfa","c682f5d8dbe387f95559e6bd61039b04c10b140d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55b50463286869f584cf849d1587a0fcd54d1dfa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}