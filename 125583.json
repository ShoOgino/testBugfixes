{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = !startTerm.equals(term) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":["050ba1ba249733cac50c2612418b7179591d2df9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        loadVirtualFrame(newFrame());\n        this.level++;\n        pushFrame(loadFirstFrame(newFrame()));\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        loadVirtualFrame(newFrame());\n        this.level++;\n        pushFrame(loadFirstFrame(newFrame()));\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        Frame frame;\n        frame = loadVirtualFrame(newFrame());\n        this.level++;\n        frame = loadFirstFrame(newFrame());\n        pushFrame(frame);\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        loadVirtualFrame(newFrame());\n        this.level++;\n        pushFrame(loadFirstFrame(newFrame()));\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#IntersectTermsEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      IntersectTermsEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        super();\n        //if (TEST) System.out.println(\"Enum init, startTerm=\" + startTerm);\n        this.fst = dict;\n        this.fstReader = fst.getBytesReader();\n        this.fstOutputs = dict.outputs;\n        this.fsa = compiled.runAutomaton;\n        this.level = -1;\n        this.stack = new Frame[16];\n        for (int i = 0 ; i < stack.length; i++) {\n          this.stack[i] = new Frame();\n        }\n\n        loadVirtualFrame(newFrame());\n        this.level++;\n        pushFrame(loadFirstFrame(newFrame()));\n\n        this.meta = null;\n        this.metaUpto = 1;\n        this.decoded = false;\n        this.pending = false;\n\n        if (startTerm == null) {\n          pending = isAccept(topFrame());\n        } else {\n          doSeekCeil(startTerm);\n          pending = (term == null || !startTerm.equals(term.get())) && isValid(topFrame()) && isAccept(topFrame());\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","f8061ddd97f3352007d927dae445884a6f3d857b"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","f8061ddd97f3352007d927dae445884a6f3d857b"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}