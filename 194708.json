{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","commits":[{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(BufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(BufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    packet.gen = nextGen++;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes.get());\n    bytesUsed.addAndGet(packet.bytesUsed.get());\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":["b7465988fd0a9c673dcb88f51473300c41d630f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized void push(FrozenBufferedDeletes packet) {\n    assert packet.any();\n    assert checkDeleteStats();    \n    assert packet.gen < nextGen;\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.gen + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7465988fd0a9c673dcb88f51473300c41d630f0","date":1311685662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      message(\"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream != null) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["b7465988fd0a9c673dcb88f51473300c41d630f0"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["69a6d2d525aeab53c867ed26934185e5bb627d0e","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b7465988fd0a9c673dcb88f51473300c41d630f0":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["69a6d2d525aeab53c867ed26934185e5bb627d0e","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b7465988fd0a9c673dcb88f51473300c41d630f0","a3776dccca01c11e7046323cfad46a3b4a471233"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b7465988fd0a9c673dcb88f51473300c41d630f0":["06584e6e98d592b34e1329b384182f368d2025e8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","69a6d2d525aeab53c867ed26934185e5bb627d0e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}