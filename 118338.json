{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\r\n    public Scorer scorer(IndexReader reader) throws IOException {\r\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, getSimilarity(searcher));\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Weight w = (Weight) weights.get(i);\r\n        Scorer subScorer = w.scorer(reader);\r\n        if (subScorer == null) return null;\r\n        result.add(subScorer);\r\n      }\r\n      return result;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["149f82651d1e396281d58808b8c03062649c54dd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"149f82651d1e396281d58808b8c03062649c54dd","date":1193047128,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\r\n    public Scorer scorer(IndexReader reader) throws IOException {\r\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity);\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Weight w = (Weight) weights.get(i);\r\n        Scorer subScorer = w.scorer(reader);\r\n        if (subScorer == null) return null;\r\n        result.add(subScorer);\r\n      }\r\n      return result;\r\n    }\r\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\r\n    public Scorer scorer(IndexReader reader) throws IOException {\r\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, getSimilarity(searcher));\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Weight w = (Weight) weights.get(i);\r\n        Scorer subScorer = w.scorer(reader);\r\n        if (subScorer == null) return null;\r\n        result.add(subScorer);\r\n      }\r\n      return result;\r\n    }\r\n\n","bugFix":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity);\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight) weights.get(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer == null) return null;\n        result.add(subScorer);\n      }\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\r\n    public Scorer scorer(IndexReader reader) throws IOException {\r\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity);\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Weight w = (Weight) weights.get(i);\r\n        Scorer subScorer = w.scorer(reader);\r\n        if (subScorer == null) return null;\r\n        result.add(subScorer);\r\n      }\r\n      return result;\r\n    }\r\n\n","bugFix":null,"bugIntro":["a74e723ad6f1491f36039f9fe6af13a530f8135d","a74e723ad6f1491f36039f9fe6af13a530f8135d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity);\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight) weights.get(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer == null) return null;\n        result.add(subScorer);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer == null) {\n          return null;\n        } else if (subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["149f82651d1e396281d58808b8c03062649c54dd"],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"149f82651d1e396281d58808b8c03062649c54dd":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["149f82651d1e396281d58808b8c03062649c54dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"149f82651d1e396281d58808b8c03062649c54dd":["2123bddbd65dea198cac380540636ce43a880403"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}