{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","date":1272391185,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}