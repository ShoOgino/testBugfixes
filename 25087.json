{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","commits":[{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n    CloudSolrServer client = createCloudClient(null);\n    createCloudClient(null);\n    createColl(COLL_NAME, client);\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }\n    if(!stopped){\n      fail(\"Could not find jetty for replica \"+ replica1 + \"jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n    client.shutdown();\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd548b14f1051e707393e77329f80c5e89f69919"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dacfbcd95301d36d2105d5909c5e9d59a93512c4","date":1383135020,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n    CloudSolrServer client = createCloudClient(null);\n    createCloudClient(null);\n    createColl(COLL_NAME, client);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1=null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    for (JettySolrRunner jetty : jettys) sb.append(jetty.getBaseUrl()).append(\",\");\n\n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n\n    /*final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }*/\n    if(!stopped){\n      fail(\"Could not find jetty to stop in collection \"+ testcoll + \" jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n    client.shutdown();\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n    CloudSolrServer client = createCloudClient(null);\n    createCloudClient(null);\n    createColl(COLL_NAME, client);\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }\n    if(!stopped){\n      fail(\"Could not find jetty for replica \"+ replica1 + \"jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n    client.shutdown();\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","bugFix":null,"bugIntro":["cd548b14f1051e707393e77329f80c5e89f69919"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66a9e6c085fe53a6b44d581e733c98b7dc2b76d2","date":1385009782,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n\n    createColl(COLL_NAME, client);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1=null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    for (JettySolrRunner jetty : jettys) sb.append(jetty.getBaseUrl()).append(\",\");\n\n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n\n    /*final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }*/\n    if(!stopped){\n      fail(\"Could not find jetty to stop in collection \"+ testcoll + \" jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n    CloudSolrServer client = createCloudClient(null);\n    createCloudClient(null);\n    createColl(COLL_NAME, client);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1=null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    for (JettySolrRunner jetty : jettys) sb.append(jetty.getBaseUrl()).append(\",\");\n\n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n\n    /*final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }*/\n    if(!stopped){\n      fail(\"Could not find jetty to stop in collection \"+ testcoll + \" jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n    client.shutdown();\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","bugFix":null,"bugIntro":["cd548b14f1051e707393e77329f80c5e89f69919"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    String collectionName = \"delDeadColl\";\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    for (JettySolrRunner jetty : jettys)\n      sb.append(jetty.getBaseUrl()).append(\",\");\n    \n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(\n              replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n    \n    /*\n     * final Slice shard1 = testcoll.getSlices().iterator().next();\n     * if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n     * Replica replica1 = shard1.getReplicas().iterator().next();\n     * JettySolrRunner stoppedJetty = null; StringBuilder sb = new\n     * StringBuilder(); for (JettySolrRunner jetty : jettys) {\n     * sb.append(jetty.getBaseUrl()).append(\",\"); if(\n     * jetty.getBaseUrl().toString\n     * ().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n     * stoppedJetty = jetty; ChaosMonkey.stop(jetty); stopped = true; break; } }\n     */\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    \n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n    \n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n    \n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\"))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    \n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n\n    createColl(COLL_NAME, client);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1=null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    for (JettySolrRunner jetty : jettys) sb.append(jetty.getBaseUrl()).append(\",\");\n\n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n\n    /*final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }*/\n    if(!stopped){\n      fail(\"Could not find jetty to stop in collection \"+ testcoll + \" jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","bugFix":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73","66a9e6c085fe53a6b44d581e733c98b7dc2b76d2","dacfbcd95301d36d2105d5909c5e9d59a93512c4"],"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    String collectionName = \"delDeadColl\";\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    for (JettySolrRunner jetty : jettys)\n      sb.append(jetty.getBaseUrl()).append(\",\");\n    \n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(\n              replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n    \n    /*\n     * final Slice shard1 = testcoll.getSlices().iterator().next();\n     * if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n     * Replica replica1 = shard1.getReplicas().iterator().next();\n     * JettySolrRunner stoppedJetty = null; StringBuilder sb = new\n     * StringBuilder(); for (JettySolrRunner jetty : jettys) {\n     * sb.append(jetty.getBaseUrl()).append(\",\"); if(\n     * jetty.getBaseUrl().toString\n     * ().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n     * stoppedJetty = jetty; ChaosMonkey.stop(jetty); stopped = true; break; } }\n     */\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    \n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n    \n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n    \n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\"))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    \n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception{\n    String COLL_NAME = \"delDeadColl\";\n    CloudSolrServer client = createCloudClient(null);\n    createCloudClient(null);\n    createColl(COLL_NAME, client);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1=null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    for (JettySolrRunner jetty : jettys) sb.append(jetty.getBaseUrl()).append(\",\");\n\n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n\n    /*final Slice shard1 = testcoll.getSlices().iterator().next();\n    if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n    Replica replica1 = shard1.getReplicas().iterator().next();\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    for (JettySolrRunner jetty : jettys) {\n      sb.append(jetty.getBaseUrl()).append(\",\");\n      if( jetty.getBaseUrl().toString().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n        stoppedJetty = jetty;\n        ChaosMonkey.stop(jetty);\n        stopped = true;\n        break;\n      }\n    }*/\n    if(!stopped){\n      fail(\"Could not find jetty to stop in collection \"+ testcoll + \" jettys: \"+sb);\n    }\n\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      if(!\"active\".equals(testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getStr(Slice.STATE))  ){\n        success=true;\n      }\n      if(success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \",shard1.getName(),replica1.getName());\n    removeAndWaitForReplicaGone(COLL_NAME, client, replica1, shard1.getName());\n    client.shutdown();\n\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n\n    Map m = makeMap(\"qt\",\"/admin/cores\",\n        \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\")).request(new QueryRequest(new MapSolrParams(m)));\n    assertNull( \"The core is up and running again\" , ((NamedList)resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(ZkStateReader.BASE_URL_PROP))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception {\n    String collectionName = \"delDeadColl\";\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    for (JettySolrRunner jetty : jettys)\n      sb.append(jetty.getBaseUrl()).append(\",\");\n    \n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(\n              replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n    \n    /*\n     * final Slice shard1 = testcoll.getSlices().iterator().next();\n     * if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n     * Replica replica1 = shard1.getReplicas().iterator().next();\n     * JettySolrRunner stoppedJetty = null; StringBuilder sb = new\n     * StringBuilder(); for (JettySolrRunner jetty : jettys) {\n     * sb.append(jetty.getBaseUrl()).append(\",\"); if(\n     * jetty.getBaseUrl().toString\n     * ().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n     * stoppedJetty = jetty; ChaosMonkey.stop(jetty); stopped = true; break; } }\n     */\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    \n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n    \n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n    \n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\"))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    \n  }\n\n","bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(ZkStateReader.BASE_URL_PROP))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception {\n    String collectionName = \"delDeadColl\";\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    \n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    for (JettySolrRunner jetty : jettys)\n      sb.append(jetty.getBaseUrl()).append(\",\");\n    \n    for (Slice slice : testcoll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas())\n        for (JettySolrRunner jetty : jettys) {\n          URL baseUrl = null;\n          try {\n            baseUrl = jetty.getBaseUrl();\n          } catch (Exception e) {\n            continue;\n          }\n          if (baseUrl.toString().startsWith(\n              replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n            stoppedJetty = jetty;\n            ChaosMonkey.stop(jetty);\n            replica1 = replica;\n            shard1 = slice;\n            stopped = true;\n            break;\n          }\n        }\n    }\n    \n    /*\n     * final Slice shard1 = testcoll.getSlices().iterator().next();\n     * if(!shard1.getState().equals(Slice.ACTIVE)) fail(\"shard is not active\");\n     * Replica replica1 = shard1.getReplicas().iterator().next();\n     * JettySolrRunner stoppedJetty = null; StringBuilder sb = new\n     * StringBuilder(); for (JettySolrRunner jetty : jettys) {\n     * sb.append(jetty.getBaseUrl()).append(\",\"); if(\n     * jetty.getBaseUrl().toString\n     * ().startsWith(replica1.getStr(ZkStateReader.BASE_URL_PROP)) ) {\n     * stoppedJetty = jetty; ChaosMonkey.stop(jetty); stopped = true; break; } }\n     */\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    \n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n    \n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n    \n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(\"base_url\"))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrServer server = new HttpSolrServer(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = server.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    server.shutdown();\n    server = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    NamedList<Object> resp = new HttpSolrServer(replica1.getStr(ZkStateReader.BASE_URL_PROP))\n        .request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","bugFix":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","cd548b14f1051e707393e77329f80c5e89f69919"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    queryClient.shutdown();\n    queryClient = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrServer server = new HttpSolrServer(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = server.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    server.shutdown();\n    server = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    queryClient.shutdown();\n    queryClient = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","sourceOld":"  private void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    queryClient.shutdown();\n    queryClient = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      createCollection(collectionName, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n\n    String collectionName = \"delDeadColl\";\n\n    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n    \n    createCollection(collectionName, client);\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    Thread.sleep(3000);\n\n    boolean stopped = false;\n    JettySolrRunner stoppedJetty = null;\n    StringBuilder sb = new StringBuilder();\n    Replica replica1 = null;\n    Slice shard1 = null;\n    long timeout = System.currentTimeMillis() + 3000;\n    DocCollection testcoll = null;\n    while(!stopped && System.currentTimeMillis()<timeout ) {\n      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n      for (JettySolrRunner jetty : jettys)\n        sb.append(jetty.getBaseUrl()).append(\",\");\n\n      for (Slice slice : testcoll.getActiveSlices()) {\n        for (Replica replica : slice.getReplicas())\n          for (JettySolrRunner jetty : jettys) {\n            URL baseUrl = null;\n            try {\n              baseUrl = jetty.getBaseUrl();\n            } catch (Exception e) {\n              continue;\n            }\n            if (baseUrl.toString().startsWith(\n                replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n              stoppedJetty = jetty;\n              ChaosMonkey.stop(jetty);\n              replica1 = replica;\n              shard1 = slice;\n              stopped = true;\n              break;\n            }\n          }\n      }\n      Thread.sleep(100);\n    }\n\n\n    if (!stopped) {\n      fail(\"Could not find jetty to stop in collection \" + testcoll\n          + \" jettys: \" + sb);\n    }\n    \n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(collectionName);\n      if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n          .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n        success = true;\n      }\n      if (success) break;\n      Thread.sleep(100);\n    }\n\n    log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n    removeAndWaitForReplicaGone(collectionName, client, replica1,\n        shard1.getName());\n    ChaosMonkey.start(stoppedJetty);\n    log.info(\"restarted jetty\");\n\n    Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n    SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP));\n    NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n    assertNull(\"The core is up and running again\",\n        ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n    queryClient.shutdown();\n    queryClient = null;\n\n\n    Exception exp = null;\n\n    try {\n\n      m = makeMap(\n          \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\",\n          CoreAdminParams.NAME, \"testcore\");\n\n      QueryRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/cores\");\n      NamedList<Object> rsp = client.request(request);\n    } catch (Exception e) {\n      exp = e;\n      log.info(\"error_expected\",e);\n    }\n    assertNotNull( \"Exception expected\", exp);\n    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);\n    client.shutdown();\n\n\n  }\n\n","bugFix":null,"bugIntro":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e","f4ad031303fbb1c22ddb8348ee0798afd3553f7a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e","date":1423943091,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      createCollection(collectionName, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!ZkStateReader.ACTIVE.equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(ZkStateReader.STATE_PROP))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!ZkStateReader.ACTIVE.equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(ZkStateReader.STATE_PROP))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!\"active\".equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(Slice.STATE))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (!ZkStateReader.ACTIVE.equals(testcoll.getSlice(shard1.getName())\n            .getReplica(replica1.getName()).getStr(ZkStateReader.STATE_PROP))) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      long timeout = System.currentTimeMillis() + 3000;\n      DocCollection testcoll = null;\n      while (!stopped && System.currentTimeMillis() < timeout) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      long endAt = System.currentTimeMillis() + 3000;\n      boolean success = false;\n      while (System.currentTimeMillis() < endAt) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = getHttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = getHttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"not present in cluster state\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = getHttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["f4ad031303fbb1c22ddb8348ee0798afd3553f7a","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"not present in cluster state\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = getHttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"257c5a036be540f6d88112374ab2a5c6c53e24b5","date":1475585300,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"not present in cluster state\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":["609b19bb8de96c4e5e338d1d4a0349957522b601"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"not present in cluster state\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      String collectionName = \"delDeadColl\";\n\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, \"false\");\n\n      int replicationFactor = 2;\n      int numShards = 2;\n      int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n      createCollection(collectionInfos, collectionName, numShards, replicationFactor, maxShardsPerNode, client, null);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      Thread.sleep(3000);\n\n      boolean stopped = false;\n      JettySolrRunner stoppedJetty = null;\n      StringBuilder sb = new StringBuilder();\n      Replica replica1 = null;\n      Slice shard1 = null;\n      TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n      DocCollection testcoll = null;\n      while (!stopped && ! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);\n        for (JettySolrRunner jetty : jettys)\n          sb.append(jetty.getBaseUrl()).append(\",\");\n\n        for (Slice slice : testcoll.getActiveSlices()) {\n          for (Replica replica : slice.getReplicas())\n            for (JettySolrRunner jetty : jettys) {\n              URL baseUrl = null;\n              try {\n                baseUrl = jetty.getBaseUrl();\n              } catch (Exception e) {\n                continue;\n              }\n              if (baseUrl.toString().startsWith(\n                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {\n                stoppedJetty = jetty;\n                ChaosMonkey.stop(jetty);\n                replica1 = replica;\n                shard1 = slice;\n                stopped = true;\n                break;\n              }\n            }\n        }\n        Thread.sleep(100);\n      }\n\n\n      if (!stopped) {\n        fail(\"Could not find jetty to stop in collection \" + testcoll\n            + \" jettys: \" + sb);\n      }\n\n      timeout = new TimeOut(20, TimeUnit.SECONDS);\n      boolean success = false;\n      while (! timeout.hasTimedOut()) {\n        testcoll = client.getZkStateReader()\n            .getClusterState().getCollection(collectionName);\n        if (testcoll.getSlice(shard1.getName()).getReplica(replica1.getName()).getState() != Replica.State.ACTIVE) {\n          success = true;\n        }\n        if (success) break;\n        Thread.sleep(100);\n      }\n\n      log.info(\"removed_replicas {}/{} \", shard1.getName(), replica1.getName());\n      DeleteReplicaTest.removeAndWaitForReplicaGone(collectionName, client, replica1,\n          shard1.getName());\n      ChaosMonkey.start(stoppedJetty);\n      log.info(\"restarted jetty\");\n\n      Map m = Utils.makeMap(\"qt\", \"/admin/cores\", \"action\", \"status\");\n\n      try (SolrClient queryClient = getHttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {\n        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));\n        assertNull(\"The core is up and running again\",\n            ((NamedList) resp.get(\"status\")).get(replica1.getStr(\"core\")));\n      }\n\n      Exception exp = null;\n\n      try {\n\n        m = Utils.makeMap(\n            \"action\", CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, \"shard2\",\n            CoreAdminParams.NAME, \"testcore\");\n\n        QueryRequest request = new QueryRequest(new MapSolrParams(m));\n        request.setPath(\"/admin/cores\");\n        NamedList<Object> rsp = client.request(request);\n      } catch (Exception e) {\n        exp = e;\n        log.info(\"error_expected\", e);\n      }\n      assertNotNull(\"Exception expected\", exp);\n      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertNotNull(loadFailure.exception.getCause());\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getCause().getMessage(),\n        loadFailure.exception.getCause().getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getMessage(),\n        loadFailure.exception.getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["f4ad031303fbb1c22ddb8348ee0798afd3553f7a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4ad031303fbb1c22ddb8348ee0798afd3553f7a","date":1522482628,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertNotNull(loadFailure.exception.getCause());\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getCause().getMessage(),\n        loadFailure.exception.getCause().getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","609b19bb8de96c4e5e338d1d4a0349957522b601","cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n\n    CoreContainer cc = jetty.getCoreContainer();\n    CoreContainer.CoreLoadFailure loadFailure = cc.getCoreInitFailures().get(replica.getCoreName());\n    assertNotNull(\"Deleted core was still loaded!\", loadFailure);\n    assertNotNull(loadFailure.exception.getCause());\n    assertTrue(\"Unexpected load failure message: \" + loadFailure.exception.getCause().getMessage(),\n        loadFailure.exception.getCause().getMessage().contains(\"does not exist in shard\"));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    }\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest#deleteInactiveReplicaTest().mjava","sourceNew":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    }\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void deleteInactiveReplicaTest() throws Exception {\n\n    String collectionName = \"delDeadColl\";\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / cluster.getJettySolrRunners().size())) + 1;\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a cluster of 2 shards and 2 replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, numShards, replicationFactor);\n    });\n\n    DocCollection collectionState = getCollectionState(collectionName);\n\n    Slice shard = getRandomShard(collectionState);\n    Replica replica = getRandomReplica(shard);\n    JettySolrRunner jetty = cluster.getReplicaJetty(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    cluster.stopJettySolrRunner(jetty);\n\n    waitForState(\"Expected replica \" + replica.getName() + \" on down node to be removed from cluster state\", collectionName, (n, c) -> {\n      Replica r = c.getReplica(replica.getCoreName());\n      return r == null || r.getState() != Replica.State.ACTIVE;\n    });\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Removing replica {}/{} \", shard.getName(), replica.getName());\n    }\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected deleted replica \" + replica.getName() + \" to be removed from cluster state\", collectionName, (n, c) -> {\n      return c.getReplica(replica.getCoreName()) == null;\n    });\n\n    cluster.startJettySolrRunner(jetty);\n    log.info(\"restarted jetty\");\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n\n    // Check that we can't create a core with no coreNodeName\n    try (SolrClient queryClient = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      Exception e = expectThrows(Exception.class, () -> {\n        CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n        createRequest.setCoreName(\"testcore\");\n        createRequest.setCollection(collectionName);\n        createRequest.setShardId(\"shard2\");\n        queryClient.request(createRequest);\n      });\n      assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().contains(\"coreNodeName missing\"));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","f4ad031303fbb1c22ddb8348ee0798afd3553f7a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["cd548b14f1051e707393e77329f80c5e89f69919","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"0c924d4069ef5a5bc479a493befe0121aada6896":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"dacfbcd95301d36d2105d5909c5e9d59a93512c4":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd548b14f1051e707393e77329f80c5e89f69919":["66a9e6c085fe53a6b44d581e733c98b7dc2b76d2"],"66a9e6c085fe53a6b44d581e733c98b7dc2b76d2":["dacfbcd95301d36d2105d5909c5e9d59a93512c4"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"257c5a036be540f6d88112374ab2a5c6c53e24b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","1967bed916cc89da82a1c2085f27976da6d08cbd"],"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"f4ad031303fbb1c22ddb8348ee0798afd3553f7a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["dacfbcd95301d36d2105d5909c5e9d59a93512c4","cd548b14f1051e707393e77329f80c5e89f69919"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["cd548b14f1051e707393e77329f80c5e89f69919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["0c924d4069ef5a5bc479a493befe0121aada6896","a219f1dcad1700e84807666bdbd2b573e8de7021"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"dacfbcd95301d36d2105d5909c5e9d59a93512c4":["66a9e6c085fe53a6b44d581e733c98b7dc2b76d2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e"],"cd548b14f1051e707393e77329f80c5e89f69919":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"66a9e6c085fe53a6b44d581e733c98b7dc2b76d2":["cd548b14f1051e707393e77329f80c5e89f69919"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","f4ad031303fbb1c22ddb8348ee0798afd3553f7a"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"257c5a036be540f6d88112374ab2a5c6c53e24b5":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"f4ad031303fbb1c22ddb8348ee0798afd3553f7a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["dacfbcd95301d36d2105d5909c5e9d59a93512c4"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","0c924d4069ef5a5bc479a493befe0121aada6896","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}