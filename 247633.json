{"path":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","commits":[{"id":"106fbee5a2b8105d0628067f2c65cd0fedfc19e7","date":1464121813,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-minimal-atomic-stress.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-minimal-atomic-stress.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-minimal-atomic-stress.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-minimal-atomic-stress.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d05e2d0ccba1cd5ee7e427ec4d0c09cbb3f05350","date":1500413049,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", usingPoints ? \"solr.LongPointField\" : \"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a0eda7dbad12579530df39279403d27344ebcb","date":1500511909,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", usingPoints ? \"solr.LongPointField\" : \"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\",\"solr.TrieLongField\",\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b4cb60656656afd2caf38f9a1cf0cf27718c2b","date":1548717748,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e60a9fe2e83aaddaa90d1f75d7eb7e137a8e0060","date":1558549372,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6","date":1558594754,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new SolrNamedThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new DefaultSolrThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  @SuppressWarnings({\"unchecked\"})\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new SolrNamedThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // NOTE: numDocsToCheck uses atLeast, so nightly & multiplier are alreayd a factor in index size\n    // no need to redundently factor them in here as well\n    DOC_ID_INCR = TestUtil.nextInt(random(), 1, 7);\n    \n    NUM_THREADS = atLeast(3);\n    EXEC_SERVICE = ExecutorUtil.newMDCAwareFixedThreadPool\n      (NUM_THREADS, new SolrNamedThreadFactory(DEBUG_LABEL));\n    \n    // at least 2, but don't go crazy on nightly/test.multiplier with \"atLeast()\"\n    final int numShards = TEST_NIGHTLY ? 5 : 2; \n    final int repFactor = 2; \n    final int numNodes = numShards * repFactor;\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .withProperty(\"schema\", \"schema-minimal-atomic-stress.xml\")\n        .process(CLOUD_CLIENT);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    CLIENTS.clear();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      assertNotNull(\"Cluster contains null jetty?\", jetty);\n      final URL baseUrl = jetty.getBaseUrl();\n      assertNotNull(\"Jetty has null baseUrl: \" + jetty.toString(), baseUrl);\n      CLIENTS.add(getHttpSolrClient(baseUrl + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    // sanity check no one broke the assumptions we make about our schema\n    checkExpectedSchemaType( map(\"name\",\"long\",\n                                 \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Long.class),\n                                 \"multiValued\",Boolean.FALSE,\n                                 \"indexed\",Boolean.FALSE,\n                                 \"stored\",Boolean.FALSE,\n                                 \"docValues\",Boolean.FALSE) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a0eda7dbad12579530df39279403d27344ebcb":["d05e2d0ccba1cd5ee7e427ec4d0c09cbb3f05350"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","106fbee5a2b8105d0628067f2c65cd0fedfc19e7"],"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6":["97b4cb60656656afd2caf38f9a1cf0cf27718c2b","e60a9fe2e83aaddaa90d1f75d7eb7e137a8e0060"],"e60a9fe2e83aaddaa90d1f75d7eb7e137a8e0060":["97b4cb60656656afd2caf38f9a1cf0cf27718c2b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","94a0eda7dbad12579530df39279403d27344ebcb"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6"],"97b4cb60656656afd2caf38f9a1cf0cf27718c2b":["94a0eda7dbad12579530df39279403d27344ebcb"],"d05e2d0ccba1cd5ee7e427ec4d0c09cbb3f05350":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"94a0eda7dbad12579530df39279403d27344ebcb":["936cdd5882761db3b844afd6f84ab81cbb011a75","97b4cb60656656afd2caf38f9a1cf0cf27718c2b"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d05e2d0ccba1cd5ee7e427ec4d0c09cbb3f05350"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","83870855d82aba6819217abeff5a40779dbb28b4"],"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"e60a9fe2e83aaddaa90d1f75d7eb7e137a8e0060":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"83870855d82aba6819217abeff5a40779dbb28b4":[],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","106fbee5a2b8105d0628067f2c65cd0fedfc19e7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"97b4cb60656656afd2caf38f9a1cf0cf27718c2b":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6","e60a9fe2e83aaddaa90d1f75d7eb7e137a8e0060"],"d05e2d0ccba1cd5ee7e427ec4d0c09cbb3f05350":["94a0eda7dbad12579530df39279403d27344ebcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}