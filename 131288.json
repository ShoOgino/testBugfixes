{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","commits":[{"id":"400c694e5772b60e1a176127d6b1349bf6b6380e","date":1347927004,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dea9cc0cdda318a986edb0250c26cee1e8bb19","date":1410398087,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testRotatingFieldNames().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRotatingFieldNames().mjava","sourceNew":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-4398\n  public void testRotatingFieldNames() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"TestIndexWriter.testChangingFields\"));\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setRAMBufferSizeMB(0.2);\n    iwc.setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int upto = 0;\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n\n    int firstDocCount = -1;\n    for(int iter=0;iter<10;iter++) {\n      final int startFlushCount = w.getFlushCount();\n      int docCount = 0;\n      while(w.getFlushCount() == startFlushCount) {\n        Document doc = new Document();\n        for(int i=0;i<10;i++) {\n          doc.add(new Field(\"field\" + (upto++), \"content\", ft));\n        }\n        w.addDocument(doc);\n        docCount++;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" flushed after docCount=\" + docCount);\n      }\n\n      if (iter == 0) {\n        firstDocCount = docCount;\n      }\n\n      assertTrue(\"flushed after too few docs: first segment flushed at docCount=\" + firstDocCount + \", but current segment flushed after docCount=\" + docCount + \"; iter=\" + iter, ((float) docCount) / firstDocCount > 0.9);\n\n      if (upto > 5000) {\n        // Start re-using field names after a while\n        // ... important because otherwise we can OOME due\n        // to too many FieldInfo instances.\n        upto = 0;\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["400c694e5772b60e1a176127d6b1349bf6b6380e"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"400c694e5772b60e1a176127d6b1349bf6b6380e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["400c694e5772b60e1a176127d6b1349bf6b6380e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"],"400c694e5772b60e1a176127d6b1349bf6b6380e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}