{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#XtestTDigest().mjava","commits":[{"id":"4a7c13535572b8e97cc477fc3388a57321a7751a","date":1427500960,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#XtestTDigest().mjava","pathOld":"/dev/null","sourceNew":"  /*** test code to ensure TDigest is working as we expect. */\n\n  public void XtestTDigest() throws Exception {\n    AVLTreeDigest t1 = new AVLTreeDigest(100);\n    t1.add(10, 1);\n    t1.add(90, 1);\n    t1.add(50, 1);\n\n    System.out.println(t1.quantile(0.1));\n    System.out.println(t1.quantile(0.5));\n    System.out.println(t1.quantile(0.9));\n\n    assertEquals(t1.quantile(0.5), 50.0, 0.01);\n\n    AVLTreeDigest t2 = new AVLTreeDigest(100);\n    t2.add(130, 1);\n    t2.add(170, 1);\n    t2.add(90, 1);\n\n    System.out.println(t2.quantile(0.1));\n    System.out.println(t2.quantile(0.5));\n    System.out.println(t2.quantile(0.9));\n\n    AVLTreeDigest top = new AVLTreeDigest(100);\n\n    t1.compress();\n    ByteBuffer buf = ByteBuffer.allocate(t1.byteSize()); // upper bound\n    t1.asSmallBytes(buf);\n    byte[] arr1 = Arrays.copyOf(buf.array(), buf.position());\n\n    ByteBuffer rbuf = ByteBuffer.wrap(arr1);\n    top.add(AVLTreeDigest.fromBytes(rbuf));\n\n    System.out.println(top.quantile(0.1));\n    System.out.println(top.quantile(0.5));\n    System.out.println(top.quantile(0.9));\n\n    t2.compress();\n    ByteBuffer buf2 = ByteBuffer.allocate(t2.byteSize()); // upper bound\n    t2.asSmallBytes(buf2);\n    byte[] arr2 = Arrays.copyOf(buf2.array(), buf2.position());\n\n    ByteBuffer rbuf2 = ByteBuffer.wrap(arr2);\n    top.add(AVLTreeDigest.fromBytes(rbuf2));\n\n    System.out.println(top.quantile(0.1));\n    System.out.println(top.quantile(0.5));\n    System.out.println(top.quantile(0.9));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#XtestTDigest().mjava","pathOld":"/dev/null","sourceNew":"  /*** test code to ensure TDigest is working as we expect. */\n\n  public void XtestTDigest() throws Exception {\n    AVLTreeDigest t1 = new AVLTreeDigest(100);\n    t1.add(10, 1);\n    t1.add(90, 1);\n    t1.add(50, 1);\n\n    System.out.println(t1.quantile(0.1));\n    System.out.println(t1.quantile(0.5));\n    System.out.println(t1.quantile(0.9));\n\n    assertEquals(t1.quantile(0.5), 50.0, 0.01);\n\n    AVLTreeDigest t2 = new AVLTreeDigest(100);\n    t2.add(130, 1);\n    t2.add(170, 1);\n    t2.add(90, 1);\n\n    System.out.println(t2.quantile(0.1));\n    System.out.println(t2.quantile(0.5));\n    System.out.println(t2.quantile(0.9));\n\n    AVLTreeDigest top = new AVLTreeDigest(100);\n\n    t1.compress();\n    ByteBuffer buf = ByteBuffer.allocate(t1.byteSize()); // upper bound\n    t1.asSmallBytes(buf);\n    byte[] arr1 = Arrays.copyOf(buf.array(), buf.position());\n\n    ByteBuffer rbuf = ByteBuffer.wrap(arr1);\n    top.add(AVLTreeDigest.fromBytes(rbuf));\n\n    System.out.println(top.quantile(0.1));\n    System.out.println(top.quantile(0.5));\n    System.out.println(top.quantile(0.9));\n\n    t2.compress();\n    ByteBuffer buf2 = ByteBuffer.allocate(t2.byteSize()); // upper bound\n    t2.asSmallBytes(buf2);\n    byte[] arr2 = Arrays.copyOf(buf2.array(), buf2.position());\n\n    ByteBuffer rbuf2 = ByteBuffer.wrap(arr2);\n    top.add(AVLTreeDigest.fromBytes(rbuf2));\n\n    System.out.println(top.quantile(0.1));\n    System.out.println(top.quantile(0.5));\n    System.out.println(top.quantile(0.9));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a7c13535572b8e97cc477fc3388a57321a7751a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a7c13535572b8e97cc477fc3388a57321a7751a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a7c13535572b8e97cc477fc3388a57321a7751a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4a7c13535572b8e97cc477fc3388a57321a7751a"],"4a7c13535572b8e97cc477fc3388a57321a7751a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}