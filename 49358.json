{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.8.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.8.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/test-framework:build/classes/java:lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e","date":1364213029,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.9.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.8.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3bfe342acf1633b29c693208a3c8691e6b130b66"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bfe342acf1633b29c693208a3c8691e6b130b66","date":1368047044,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.10.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.9.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":["6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.10.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.10.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66a99451f2f7d605c0e8f4a2eac5a427abd23ad4","date":1383133664,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-2.0.10.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) _TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) _TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean doPack = false;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].equals(\"-pack\")) {\n        doPack = true;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, doPack, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.parseInt(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","sourceOld":"  // java -cp ../build/codecs/classes/java:../test-framework/lib/randomizedtesting-runner-*.jar:../build/core/classes/test:../build/core/classes/test-framework:../build/core/classes/java:../build/test-framework/classes/java:../test-framework/lib/junit-4.10.jar org.apache.lucene.util.fst.TestFSTs /xold/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    boolean noArcArrays = false;\n    Path wordsFileIn = null;\n    Path dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-noArcArrays\")) {\n        noArcArrays = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = Paths.get(args[idx]);\n        } else if (dirOut == null) {\n          dirOut = Paths.get(args[idx]);\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n\n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.newPair((long) ord,\n                                 (long) TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify, false);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return (long) ord;\n        }\n      }.run(limit, verify, true);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return (long) TestUtil.nextInt(rand, 1, 5000);\n        }\n      }.run(limit, verify, false);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs, noArcArrays) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["6244579a467d5f2673ac98265d74bddbea1a8114"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1e6d0f38037e0125421d8e737992d511b5567b26":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["66a99451f2f7d605c0e8f4a2eac5a427abd23ad4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["1e6d0f38037e0125421d8e737992d511b5567b26","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"66a99451f2f7d605c0e8f4a2eac5a427abd23ad4":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"6244579a467d5f2673ac98265d74bddbea1a8114":["f4abec28b874149a7223e32cc7a01704c27790de"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["f4abec28b874149a7223e32cc7a01704c27790de","6244579a467d5f2673ac98265d74bddbea1a8114"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["1e6d0f38037e0125421d8e737992d511b5567b26"],"f4abec28b874149a7223e32cc7a01704c27790de":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3bfe342acf1633b29c693208a3c8691e6b130b66"],"3bfe342acf1633b29c693208a3c8691e6b130b66":["6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["6244579a467d5f2673ac98265d74bddbea1a8114"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab68488225b6a6c357dda72ed11dedca9914a192":["6244579a467d5f2673ac98265d74bddbea1a8114","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e":["3bfe342acf1633b29c693208a3c8691e6b130b66"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["f4abec28b874149a7223e32cc7a01704c27790de"],"1e6d0f38037e0125421d8e737992d511b5567b26":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e6d0f38037e0125421d8e737992d511b5567b26"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"66a99451f2f7d605c0e8f4a2eac5a427abd23ad4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6244579a467d5f2673ac98265d74bddbea1a8114":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","199dfa410f1fdbfd3294106b04096cce5ed34b21","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["6ccc50329f6836a45c36aaeac27ffe4c22ce4e4e","8917bfede3b4ca30f4305c1e391e9218959cd723"],"f4abec28b874149a7223e32cc7a01704c27790de":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["66a99451f2f7d605c0e8f4a2eac5a427abd23ad4"],"3bfe342acf1633b29c693208a3c8691e6b130b66":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}