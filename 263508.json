{"path":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"/dev/null","sourceNew":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c","date":1078315633,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dd3270bbe1832a7b0b0986602736d4106d2473e","date":1164738568,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  Vector clauses = new Vector();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dd3270bbe1832a7b0b0986602736d4106d2473e":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["3dd3270bbe1832a7b0b0986602736d4106d2473e"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"]},"commit2Childs":{"3dd3270bbe1832a7b0b0986602736d4106d2473e":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["3dd3270bbe1832a7b0b0986602736d4106d2473e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}