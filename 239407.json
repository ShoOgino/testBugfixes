{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new DocValuesField(\"field\", 17, Type.VAR_INTS));\n    doc.add(new DocValuesField(\"field\", 22.0, Type.FLOAT_32));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new DocValuesField(\"field\", 17, Type.VAR_INTS));\n    doc.add(new DocValuesField(\"field\", 22.0, Type.FLOAT_32));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new DocValuesField(\"field\", 17, Type.VAR_INTS));\n    doc.add(new DocValuesField(\"field\", 22.0, Type.FLOAT_32));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new DocValuesField(\"field\", 17, Type.VAR_INTS));\n    doc.add(new DocValuesField(\"field\", 22.0, Type.FLOAT_32));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new DocValuesField(\"field\", 17, Type.VAR_INTS));\n    doc.add(new DocValuesField(\"field\", 22.0, Type.FLOAT_32));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d91f606c5d64e2c5fcf6065a8b96f9edd88851d7","date":1352213037,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").loadSource().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").loadSource().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new NumericDocValuesField(\"field\", 17));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new NumericDocValuesField(\"field\", 17));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new PackedLongDocValuesField(\"field\", 17));\n    doc.add(new FloatDocValuesField(\"field\", 22.0f));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, getOnlySegmentReader(r).docValues(\"field\").loadSource().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":["d91f606c5d64e2c5fcf6065a8b96f9edd88851d7","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new NumericDocValuesField(\"field\", 17));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new NumericDocValuesField(\"field\", 17));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15b65fdb55ac25c30b38ad720f9cf68c69647a31","date":1398941528,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    Field f;\n    doc.add(f = new NumericDocValuesField(\"field\", 17));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, FieldCache.DEFAULT.getInts(getOnlySegmentReader(r), \"field\", false).get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":["594a11fd830b89fd08a253593d8e5062e20f5564"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlyLeafReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlySegmentReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    NumericDocValues values = DocValues.getNumeric(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(17, values.longValue());\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlyLeafReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    NumericDocValues values = DocValues.getNumeric(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(17, values.longValue());\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlyLeafReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDifferentTypedDocValuesField().mjava","sourceNew":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    NumericDocValues values = DocValues.getNumeric(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(17, values.longValue());\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testDifferentTypedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 17));\n    w.addDocument(doc);\n    \n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"blah\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      w.addDocument(doc);\n    });\n\n    DirectoryReader r = w.getReader();\n    w.close();\n    assertEquals(17, DocValues.getNumeric(getOnlyLeafReader(r), \"field\").get(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15b65fdb55ac25c30b38ad720f9cf68c69647a31":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["15b65fdb55ac25c30b38ad720f9cf68c69647a31"],"d91f606c5d64e2c5fcf6065a8b96f9edd88851d7":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"56572ec06f1407c066d6b7399413178b33176cd8":["15b65fdb55ac25c30b38ad720f9cf68c69647a31","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["05fe562aa248790944d43cdd478f512572835ba0"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d91f606c5d64e2c5fcf6065a8b96f9edd88851d7","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["15b65fdb55ac25c30b38ad720f9cf68c69647a31","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["d91f606c5d64e2c5fcf6065a8b96f9edd88851d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"15b65fdb55ac25c30b38ad720f9cf68c69647a31":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"05fe562aa248790944d43cdd478f512572835ba0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"d91f606c5d64e2c5fcf6065a8b96f9edd88851d7":["d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","d0ef034a4f10871667ae75181537775ddcf8ade4"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["15b65fdb55ac25c30b38ad720f9cf68c69647a31"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["d91f606c5d64e2c5fcf6065a8b96f9edd88851d7"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}