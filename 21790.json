{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,int).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Expert: decides if a filter should be executed as \"random-access\" or not.\n     * random-access means the filter \"filters\" in a similar way as deleted docs are filtered\n     * in Lucene. This is faster when the filter accepts many documents.\n     * However, when the filter is very sparse, it can be faster to execute the query+filter\n     * as a conjunction in some cases.\n     * \n     * The default implementation returns <code>true</code> if the first document accepted by the\n     * filter is < 100.\n     * \n     * @lucene.internal\n     */\n    protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n      //TODO once we have a cost API on filters and scorers we should rethink this heuristic\n      return firstFilterDoc < 100;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff","date":1412587199,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,int).mjava","sourceNew":"    /**\n     * Expert: decides if a filter should be executed as \"random-access\" or not.\n     * random-access means the filter \"filters\" in a similar way as deleted docs are filtered\n     * in Lucene. This is faster when the filter accepts many documents.\n     * However, when the filter is very sparse, it can be faster to execute the query+filter\n     * as a conjunction in some cases.\n     * \n     * The default implementation returns <code>true</code> if the filter matches more than 1%\n     * of documents\n     * \n     * @lucene.internal\n     */\n    protected boolean useRandomAccess(Bits bits, long filterCost) {\n      // if the filter matches more than 1% of documents, we use random-access\n      return filterCost * 100 > bits.length();\n    }\n\n","sourceOld":"    /**\n     * Expert: decides if a filter should be executed as \"random-access\" or not.\n     * random-access means the filter \"filters\" in a similar way as deleted docs are filtered\n     * in Lucene. This is faster when the filter accepts many documents.\n     * However, when the filter is very sparse, it can be faster to execute the query+filter\n     * as a conjunction in some cases.\n     * \n     * The default implementation returns <code>true</code> if the first document accepted by the\n     * filter is < 100.\n     * \n     * @lucene.internal\n     */\n    protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n      //TODO once we have a cost API on filters and scorers we should rethink this heuristic\n      return firstFilterDoc < 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#useRandomAccess(Bits,int).mjava","sourceNew":"    /**\n     * Expert: decides if a filter should be executed as \"random-access\" or not.\n     * random-access means the filter \"filters\" in a similar way as deleted docs are filtered\n     * in Lucene. This is faster when the filter accepts many documents.\n     * However, when the filter is very sparse, it can be faster to execute the query+filter\n     * as a conjunction in some cases.\n     * \n     * The default implementation returns <code>true</code> if the filter matches more than 1%\n     * of documents\n     * \n     * @lucene.internal\n     */\n    protected boolean useRandomAccess(Bits bits, long filterCost) {\n      // if the filter matches more than 1% of documents, we use random-access\n      return filterCost * 100 > bits.length();\n    }\n\n","sourceOld":"    /**\n     * Expert: decides if a filter should be executed as \"random-access\" or not.\n     * random-access means the filter \"filters\" in a similar way as deleted docs are filtered\n     * in Lucene. This is faster when the filter accepts many documents.\n     * However, when the filter is very sparse, it can be faster to execute the query+filter\n     * as a conjunction in some cases.\n     * \n     * The default implementation returns <code>true</code> if the first document accepted by the\n     * filter is < 100.\n     * \n     * @lucene.internal\n     */\n    protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n      //TODO once we have a cost API on filters and scorers we should rethink this heuristic\n      return firstFilterDoc < 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["55980207f1977bd1463465de1659b821347e2fa8","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}