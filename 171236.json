{"path":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","commits":[{"id":"b94eb480792512e506a8eceb3d907fa9523d67e3","date":1186837269,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    \n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeKey(i, false);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    writeMapCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    \n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeKey(i, false);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    writeMapCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    \n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeKey(i, false);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    writeMapCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["b94eb480792512e506a8eceb3d907fa9523d67e3"],"b94eb480792512e506a8eceb3d907fa9523d67e3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b94eb480792512e506a8eceb3d907fa9523d67e3"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"b94eb480792512e506a8eceb3d907fa9523d67e3":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}