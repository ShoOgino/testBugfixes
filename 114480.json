{"path":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2);\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e8270c911ac3f2780a5d8660bd53be1aa142ad8","date":1497368366,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0));\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","date":1500089733,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    new CollectionAdminRequest.ReplaceNode(node2bdecommissioned, emptyNode).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    new CollectionAdminRequest.ReplaceNode(emptyNode, node2bdecommissioned).setParallel(Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: \" + collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: \" + collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: \" + replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    //let's do it back\n    createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE).processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    \n    // TODO: tlog replicas do not work correctly in tests due to fault TestInjection#waitForInSyncWithLeader\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0)\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(coll, 5, 5 * (create.getNumNrtReplicas() + create.getNumPullReplicas() + create.getNumTlogReplicas()));\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: \" + collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: \" + collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: \" + replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0),\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: \" + collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: \" + collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: \" + replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","bugFix":["b1777912fb613f51063554d81f71c1b70d6bcd77","0e8270c911ac3f2780a5d8660bd53be1aa142ad8","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    \n    // TODO: tlog replicas do not work correctly in tests due to fault TestInjection#waitForInSyncWithLeader\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0)\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(coll, 5, 5 * (create.getNumNrtReplicas() + create.getNumPullReplicas() + create.getNumTlogReplicas()));\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: {}\", collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: {}\", collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: {}\", replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    \n    // TODO: tlog replicas do not work correctly in tests due to fault TestInjection#waitForInSyncWithLeader\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0)\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(coll, 5, 5 * (create.getNumNrtReplicas() + create.getNumPullReplicas() + create.getNumTlogReplicas()));\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: \" + collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: \" + collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: \" + replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    \n    // TODO: tlog replicas do not work correctly in tests due to fault TestInjection#waitForInSyncWithLeader\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0)\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ','));\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(coll, 5, 5 * (create.getNumNrtReplicas() + create.getNumPullReplicas() + create.getNumTlogReplicas()));\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: {}\", collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: {}\", collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: {}\", replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String emptyNode = l.remove(0);\n    String node2bdecommissioned = l.get(0);\n    CollectionAdminRequest.Create create;\n    // NOTE: always using the createCollection that takes in 'int' for all types of replicas, so we never\n    // have to worry about null checking when comparing the Create command with the final Slices\n    \n    // TODO: tlog replicas do not work correctly in tests due to fault TestInjection#waitForInSyncWithLeader\n    create = pickRandom(\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2,0,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,1,0),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,1),\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,2,0),\n                        // check also replicationFactor 1\n                        CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 1,0,0)\n                        //CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 0,1,0)\n    );\n    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(coll, 5, 5 * (create.getNumNrtReplicas() + create.getNumPullReplicas() + create.getNumTlogReplicas()));\n    \n    DocCollection collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### Before decommission: {}\", collection);\n    log.info(\"excluded_node : {}  \", emptyNode);\n    createReplaceNodeRequest(node2bdecommissioned, emptyNode, null).processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n    Thread.sleep(5000);\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    log.debug(\"### After decommission: {}\", collection);\n    // check what are replica states on the decommissioned node\n    List<Replica> replicas = collection.getReplicas(node2bdecommissioned);\n    if (replicas == null) {\n      replicas = Collections.emptyList();\n    }\n    log.debug(\"### Existing replicas on decommissioned node: {}\", replicas);\n\n    //let's do it back - this time wait for recoveries\n    CollectionAdminRequest.AsyncCollectionAdminRequest replaceNodeRequest = createReplaceNodeRequest(emptyNode, node2bdecommissioned, Boolean.TRUE);\n    replaceNodeRequest.setWaitForFinalState(true);\n    replaceNodeRequest.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(emptyNode))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertEquals(\"Expecting no cores but found some: \" + status.getCoreStatus(), 0, status.getCoreStatus().size());\n    }\n\n    collection = cloudClient.getZkStateReader().getClusterState().getCollection(coll);\n    assertEquals(create.getNumShards().intValue(), collection.getSlices().size());\n    for (Slice s:collection.getSlices()) {\n      assertEquals(create.getNumNrtReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n      assertEquals(create.getNumTlogReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n      assertEquals(create.getNumPullReplicas().intValue(), s.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    }\n    // make sure all newly created replicas on node are active\n    List<Replica> newReplicas = collection.getReplicas(node2bdecommissioned);\n    replicas.forEach(r -> {\n      for (Iterator<Replica> it = newReplicas.iterator(); it.hasNext(); ) {\n        Replica nr = it.next();\n        if (nr.getName().equals(r.getName())) {\n          it.remove();\n        }\n      }\n    });\n    assertFalse(newReplicas.isEmpty());\n    for (Replica r : newReplicas) {\n      assertEquals(r.toString(), Replica.State.ACTIVE, r.getState());\n    }\n    // make sure all replicas on emptyNode are not active\n    replicas = collection.getReplicas(emptyNode);\n    if (replicas != null) {\n      for (Replica r : replicas) {\n        assertFalse(r.toString(), Replica.State.ACTIVE.equals(r.getState()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bcfee499548996a6e5448bbf93b8f276d010270":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1777912fb613f51063554d81f71c1b70d6bcd77"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["0e8270c911ac3f2780a5d8660bd53be1aa142ad8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2bcfee499548996a6e5448bbf93b8f276d010270"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["28288370235ed02234a64753cdbf0c6ec096304a"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"0e8270c911ac3f2780a5d8660bd53be1aa142ad8":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"3217321f3e1d7922898c6c633d17acfa840d6875":["61c45e99cf6676da48f19d7511c73712ad39402b","ac97ea104d893f16aab430d9904473bc1f233f3c"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","3217321f3e1d7922898c6c633d17acfa840d6875"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","0e8270c911ac3f2780a5d8660bd53be1aa142ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"2bcfee499548996a6e5448bbf93b8f276d010270":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"61c45e99cf6676da48f19d7511c73712ad39402b":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["2bcfee499548996a6e5448bbf93b8f276d010270","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"0e8270c911ac3f2780a5d8660bd53be1aa142ad8":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"28288370235ed02234a64753cdbf0c6ec096304a":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["0e8270c911ac3f2780a5d8660bd53be1aa142ad8","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}