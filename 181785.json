{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#areAllReplicasParticipating().mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n\n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n\n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n    } else {\n      log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n      return false;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n    } else {\n      log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n      return false;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}