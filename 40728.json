{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"062f3d48c751646ba1b39363b2437ed156ca333c","date":1327699148,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // before becoming available, make sure we are not live and active\n      // this also gets us our assigned shard id if it was not specified\n      zkController.publish(core, ZkStateReader.DOWN);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor(), false);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor(), false);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor(), false);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegister(core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor(), false);\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegister(core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegisterSetup(core, core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      zkController.preRegister(core.getCoreDescriptor());\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    return registerCore(cores, name, core, returnPrevNotClosed);\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (cores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = cores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    return registerCore(false, name, core, returnPrev);\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    return registerCore(cores, name, core, returnPrevNotClosed);\n  }\n\n","bugFix":null,"bugIntro":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bc9f3cab5bcaa03021a8677cda720596f0da2f8","date":1383747827,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    return registerCore(core.getCoreDescriptor().isTransient(), name, core, returnPrev);\n  }\n\n","sourceOld":"  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    return registerCore(false, name, core, returnPrev);\n  }\n\n","bugFix":["a837c064b67fa63a9394136e31218b908cdcf783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":null,"sourceOld":"  public SolrCore register(String name, SolrCore core, boolean returnPrev) {\n    return registerCore(core.getCoreDescriptor().isTransient(), name, core, returnPrev);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","062f3d48c751646ba1b39363b2437ed156ca333c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","062f3d48c751646ba1b39363b2437ed156ca333c"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["a5093a9e893633cc091cf2f729d7863671c2b715"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a5093a9e893633cc091cf2f729d7863671c2b715","044244fb346dc6965d217fce709880d0e3bc2e9f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a5093a9e893633cc091cf2f729d7863671c2b715","044244fb346dc6965d217fce709880d0e3bc2e9f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"062f3d48c751646ba1b39363b2437ed156ca333c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["a837c064b67fa63a9394136e31218b908cdcf783"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["062f3d48c751646ba1b39363b2437ed156ca333c"],"85032ab568b3f50eabd577aaa994ba197db93758":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85032ab568b3f50eabd577aaa994ba197db93758"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6b834dd353486678973f4157b3ba402ac3a7ca88":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[],"044244fb346dc6965d217fce709880d0e3bc2e9f":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b374d78db8148ec6796fdf37148b33897ab40a8c"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["044244fb346dc6965d217fce709880d0e3bc2e9f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","062f3d48c751646ba1b39363b2437ed156ca333c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"062f3d48c751646ba1b39363b2437ed156ca333c":["fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a837c064b67fa63a9394136e31218b908cdcf783":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6b834dd353486678973f4157b3ba402ac3a7ca88"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["85032ab568b3f50eabd577aaa994ba197db93758"],"85032ab568b3f50eabd577aaa994ba197db93758":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}