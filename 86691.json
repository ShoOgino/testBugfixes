{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db610e9e698f94982d7a1af15a21d6a30ef96b9d","date":1270586294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n  }\n\n","bugFix":null,"bugIntro":["b102459ba40f8bc6d609b2058019db7485f7ed67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b102459ba40f8bc6d609b2058019db7485f7ed67","date":1291773722,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cdd070cf13b49e73269d367706513b14821185","date":1327968268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","sourceOld":"  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b102459ba40f8bc6d609b2058019db7485f7ed67":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e3cdd070cf13b49e73269d367706513b14821185":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["db610e9e698f94982d7a1af15a21d6a30ef96b9d","b102459ba40f8bc6d609b2058019db7485f7ed67"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","893d07555f01912f57b453a320e4d46363a31b50"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["e3cdd070cf13b49e73269d367706513b14821185"],"7b91922b55d15444d554721b352861d028eb8278":["b102459ba40f8bc6d609b2058019db7485f7ed67"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["7b91922b55d15444d554721b352861d028eb8278"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b102459ba40f8bc6d609b2058019db7485f7ed67":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"e3cdd070cf13b49e73269d367706513b14821185":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e3cdd070cf13b49e73269d367706513b14821185"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b91922b55d15444d554721b352861d028eb8278":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a","893d07555f01912f57b453a320e4d46363a31b50"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["b102459ba40f8bc6d609b2058019db7485f7ed67","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}