{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"solr/src/java/org/apache/solr/search/function/QueryDocValues[QueryValueSource]#getValueFiller().mjava","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, ScorerContext.def());\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, ScorerContext.def());\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, ScorerContext.def());\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, ScorerContext.def());\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, ScorerContext.def());\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the FunctionValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple FunctionValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the FunctionValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple FunctionValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the DocValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple DocValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryDocValues[QueryValueSource]#getValueFiller().mjava","sourceNew":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the FunctionValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple FunctionValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueFiller getValueFiller() {\n    //\n    // TODO: if we want to support more than one value-filler or a value-filler in conjunction with\n    // the FunctionValues, then members like \"scorer\" should be per ValueFiller instance.\n    // Or we can say that the user should just instantiate multiple FunctionValues.\n    //\n    return new ValueFiller() {\n      private final MutableValueFloat mval = new MutableValueFloat();\n\n      @Override\n      public MutableValue getValue() {\n        return mval;\n      }\n\n      @Override\n      public void fillValue(int doc) {\n        try {\n          if (noMatches) {\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          scorer = weight.scorer(readerContext, true, false, acceptDocs);\n          scorerDoc = -1;\n          if (scorer==null) {\n            noMatches = true;\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n          lastDocRequested = doc;\n\n          if (scorerDoc < doc) {\n            scorerDoc = scorer.advance(doc);\n          }\n\n          if (scorerDoc > doc) {\n            // query doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            mval.value = defVal;\n            mval.exists = false;\n            return;\n          }\n\n          // a match!\n          mval.value = scorer.score();\n          mval.exists = true;\n          return;\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in QueryDocVals(\"+q+\") doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}