{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1a7bf5332d569e3d07c4b248462f5d212e26e9af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}