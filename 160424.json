{"path":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","commits":[{"id":"ff266254aa2c0b84006f8f3088ee25337661554d","date":1318269918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"/dev/null","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.optimize();\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.optimize();\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4681a68f42605af5014dd08a03a253e804a4d80","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.optimize();\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.optimize();\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4af732a9bb4cfe62634ba159e581c6eb45ceb280","date":1323232497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(random.nextBoolean() ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e1ddf8c4a8755a032151ca2c1aba2bc1abbcc21","date":1323259020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(random.nextBoolean() ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4681a68f42605af5014dd08a03a253e804a4d80","date":1323260341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":["ff266254aa2c0b84006f8f3088ee25337661554d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","date":1323283758,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[ValueType],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<ValueType> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new IndexDocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new IndexDocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff266254aa2c0b84006f8f3088ee25337661554d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4681a68f42605af5014dd08a03a253e804a4d80":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["9e1ddf8c4a8755a032151ca2c1aba2bc1abbcc21"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","d4681a68f42605af5014dd08a03a253e804a4d80"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ff266254aa2c0b84006f8f3088ee25337661554d"],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["d4681a68f42605af5014dd08a03a253e804a4d80","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"9e1ddf8c4a8755a032151ca2c1aba2bc1abbcc21":["4af732a9bb4cfe62634ba159e581c6eb45ceb280"]},"commit2Childs":{"ff266254aa2c0b84006f8f3088ee25337661554d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d4681a68f42605af5014dd08a03a253e804a4d80":["69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff266254aa2c0b84006f8f3088ee25337661554d"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["d4681a68f42605af5014dd08a03a253e804a4d80","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","4af732a9bb4cfe62634ba159e581c6eb45ceb280"],"4af732a9bb4cfe62634ba159e581c6eb45ceb280":["9e1ddf8c4a8755a032151ca2c1aba2bc1abbcc21"],"9e1ddf8c4a8755a032151ca2c1aba2bc1abbcc21":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}