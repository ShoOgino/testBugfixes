{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["437e65c578cab603d9201916b0e285f3d68aff45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"437e65c578cab603d9201916b0e285f3d68aff45","date":1427831677,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":["c7e79e31f55cbb444e3023d430a340658755aa31"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ca415055c1401a2359adfb8f5d3fbf3887f95d7","date":1438554679,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0","date":1497958776,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n      \n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, true);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      final boolean forbidSubQueryByDefault = req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)), forbidSubQueryByDefault);\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      final boolean forbidSubQueryByDefault = req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)), forbidSubQueryByDefault);\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d0ddc75fb2855fca36e3a81b86228b660cbf465","date":1538078006,"type":3,"author":"Charles Sanders","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      schema = req.getSchema();\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(schema, solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      final boolean forbidSubQueryByDefault = req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)), forbidSubQueryByDefault);\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(schema, solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(req.getSchema(), solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      final boolean forbidSubQueryByDefault = req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)), forbidSubQueryByDefault);\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":["08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedDismaxConfiguration#ExtendedDismaxConfiguration(SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      schema = req.getSchema();\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(schema, solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(schema, solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS, false);\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","sourceOld":"    public ExtendedDismaxConfiguration(SolrParams localParams,\n        SolrParams params, SolrQueryRequest req) {\n      solrParams = SolrParams.wrapDefaults(localParams, params);\n      schema = req.getSchema();\n      minShouldMatch = DisMaxQParser.parseMinShouldMatch(schema, solrParams); // req.getSearcher() here causes searcher refcount imbalance\n      final boolean forbidSubQueryByDefault = req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0);\n      userFields = new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)), forbidSubQueryByDefault);\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(schema, solrParams);  // req.getSearcher() here causes searcher refcount imbalance\n      } catch (SyntaxError e) {\n        throw new RuntimeException(e);\n      }\n      // Phrase slop array\n      int pslop[] = new int[4];\n      pslop[0] = solrParams.getInt(DisMaxParams.PS, 0);\n      pslop[2] = solrParams.getInt(DisMaxParams.PS2, pslop[0]);\n      pslop[3] = solrParams.getInt(DisMaxParams.PS3, pslop[0]);\n      \n      List<FieldParams> phraseFields = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);\n      List<FieldParams> phraseFields2 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);\n      List<FieldParams> phraseFields3 = U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);\n      \n      allPhraseFields = new ArrayList<>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());\n      allPhraseFields.addAll(phraseFields);\n      allPhraseFields.addAll(phraseFields2);\n      allPhraseFields.addAll(phraseFields3);\n      \n      tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n      \n      qslop = solrParams.getInt(DisMaxParams.QS, 0);\n      \n      stopwords = solrParams.getBool(DMP.STOPWORDS, true);\n\n      mmAutoRelax = solrParams.getBool(DMP.MM_AUTORELAX, false);\n      \n      altQ = solrParams.get( DisMaxParams.ALTQ );\n\n      // lowercaseOperators defaults to true for luceneMatchVersion < 7.0 and to false for >= 7.0\n      lowercaseOperators = solrParams.getBool(DMP.LOWERCASE_OPS,\n          !req.getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_0_0));\n      \n      /* * * Boosting Query * * */\n      boostParams = solrParams.getParams(DisMaxParams.BQ);\n      \n      boostFuncs = solrParams.getParams(DisMaxParams.BF);\n      \n      multBoosts = solrParams.getParams(DMP.MULT_BOOST);\n\n      splitOnWhitespace = solrParams.getBool(QueryParsing.SPLIT_ON_WHITESPACE, SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["28288370235ed02234a64753cdbf0c6ec096304a"],"437e65c578cab603d9201916b0e285f3d68aff45":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c03778630c4604270d88c148afb8c7de35b51d3c":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"e55782fb51a6e9789542818eb2161a3247f39ace":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"28288370235ed02234a64753cdbf0c6ec096304a":["e55782fb51a6e9789542818eb2161a3247f39ace","c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["437e65c578cab603d9201916b0e285f3d68aff45"],"08970e5b8411182a29412c177eff67ec1110095b":["c7e79e31f55cbb444e3023d430a340658755aa31"],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["4aee4980038a10791618ea04e79233ce5cbf6607"],"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0":["e55782fb51a6e9789542818eb2161a3247f39ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["28288370235ed02234a64753cdbf0c6ec096304a","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","437e65c578cab603d9201916b0e285f3d68aff45"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["c03778630c4604270d88c148afb8c7de35b51d3c","c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["437e65c578cab603d9201916b0e285f3d68aff45","fab172655716b96f7e42376116235017a922de3a"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"437e65c578cab603d9201916b0e285f3d68aff45":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7","fab172655716b96f7e42376116235017a922de3a"],"c03778630c4604270d88c148afb8c7de35b51d3c":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a91f19e3f7576973404e13b7ecfb8ae94f313921","4aee4980038a10791618ea04e79233ce5cbf6607"],"e55782fb51a6e9789542818eb2161a3247f39ace":["28288370235ed02234a64753cdbf0c6ec096304a","c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4aee4980038a10791618ea04e79233ce5cbf6607":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"c7e79e31f55cbb444e3023d430a340658755aa31":["08970e5b8411182a29412c177eff67ec1110095b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fab172655716b96f7e42376116235017a922de3a":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["fab172655716b96f7e42376116235017a922de3a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}