{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.SinglePositionTokenStream#set(int).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.SinglePositionTokenStream#set(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter.SinglePositionTokenStream#set(int).mjava","sourceNew":"    /**\n     * Set the value we want to keep, as the position increment.\n     * Note that when TermPositions.nextPosition() is later used to\n     * retrieve this value, val-1 will be returned, not val.\n     * <P>\n     * IMPORTANT NOTE: Before Lucene 2.9, val>=0 were safe (for val==0,\n     * the retrieved position would be -1). But starting with Lucene 2.9,\n     * this unfortunately changed, and only val>0 are safe. val=0 can\n     * still be used, but don't count on the value you retrieve later\n     * (it could be 0 or -1, depending on circumstances or versions).\n     * This change is described in Lucene's JIRA: LUCENE-1542. \n     */\n    public void set(int val) {\n      posIncrAtt.setPositionIncrement(val);\n      returned = false;\n    }\n\n","sourceOld":"    /**\n     * Set the value we want to keep, as the position increment.\n     * Note that when TermPositions.nextPosition() is later used to\n     * retrieve this value, val-1 will be returned, not val.\n     * <P>\n     * IMPORTANT NOTE: Before Lucene 2.9, val>=0 were safe (for val==0,\n     * the retrieved position would be -1). But starting with Lucene 2.9,\n     * this unfortunately changed, and only val>0 are safe. val=0 can\n     * still be used, but don't count on the value you retrieve later\n     * (it could be 0 or -1, depending on circumstances or versions).\n     * This change is described in Lucene's JIRA: LUCENE-1542. \n     */\n    public void set(int val) {\n      posIncrAtt.setPositionIncrement(val);\n      returned = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.SinglePositionTokenStream#set(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.SinglePositionTokenStream#set(int).mjava","sourceNew":"    /**\n     * Set the value we want to keep, as the position increment.\n     * Note that when TermPositions.nextPosition() is later used to\n     * retrieve this value, val-1 will be returned, not val.\n     * <P>\n     * IMPORTANT NOTE: Before Lucene 2.9, val>=0 were safe (for val==0,\n     * the retrieved position would be -1). But starting with Lucene 2.9,\n     * this unfortunately changed, and only val>0 are safe. val=0 can\n     * still be used, but don't count on the value you retrieve later\n     * (it could be 0 or -1, depending on circumstances or versions).\n     * This change is described in Lucene's JIRA: LUCENE-1542. \n     */\n    public void set(int val) {\n      posIncrAtt.setPositionIncrement(val);\n      returned = false;\n    }\n\n","sourceOld":"    /**\n     * Set the value we want to keep, as the position increment.\n     * Note that when TermPositions.nextPosition() is later used to\n     * retrieve this value, val-1 will be returned, not val.\n     * <P>\n     * IMPORTANT NOTE: Before Lucene 2.9, val>=0 were safe (for val==0,\n     * the retrieved position would be -1). But starting with Lucene 2.9,\n     * this unfortunately changed, and only val>0 are safe. val=0 can\n     * still be used, but don't count on the value you retrieve later\n     * (it could be 0 or -1, depending on circumstances or versions).\n     * This change is described in Lucene's JIRA: LUCENE-1542. \n     */\n    public void set(int val) {\n      posIncrAtt.setPositionIncrement(val);\n      returned = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}