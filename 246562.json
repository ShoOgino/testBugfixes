{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","sourceOld":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() {\n    try {\n      IndexReader r = IndexReader.open(userindex);\n\n      spellChecker.clearIndex();\n\n      addwords(r, \"field1\");\n      int num_field1 = this.numdoc();\n\n      addwords(r, \"field2\");\n      int num_field2 = this.numdoc();\n\n      assertEquals(num_field2, num_field1 + 1);\n\n      // test small word\n      String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fiv\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"ive\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fives\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fie\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fi\", 2);\n      assertEquals(0, similar.length);\n\n      // test restraint to a field\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n      assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n      assertEquals(1, similar.length); // there is the term thousand in the field field2\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail();\n    }\n\n  }\n\n","sourceOld":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9e55f1144a02aa9e891161b50c49a9911b58ac","date":1138468924,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() {\n    try {\n      IndexReader r = IndexReader.open(userindex);\n\n      spellChecker.clearIndex();\n\n      addwords(r, \"field1\");\n      int num_field1 = this.numdoc();\n\n      addwords(r, \"field2\");\n      int num_field2 = this.numdoc();\n\n      assertEquals(num_field2, num_field1 + 1);\n\n      // test small word\n      String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"five\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n      similar = spellChecker.suggestSimilar(\"fiv\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"ive\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fives\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fie\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fi\", 2);\n      assertEquals(0, similar.length);\n\n      // test restraint to a field\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n      assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n      assertEquals(1, similar.length); // there is the term thousand in the field field2\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testBuild() {\n    try {\n      IndexReader r = IndexReader.open(userindex);\n\n      spellChecker.clearIndex();\n\n      addwords(r, \"field1\");\n      int num_field1 = this.numdoc();\n\n      addwords(r, \"field2\");\n      int num_field2 = this.numdoc();\n\n      assertEquals(num_field2, num_field1 + 1);\n\n      // test small word\n      String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fiv\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"ive\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fives\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fie\", 2);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fi\", 2);\n      assertEquals(0, similar.length);\n\n      // test restraint to a field\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n      assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n      assertEquals(1, similar.length); // there is the term thousand in the field field2\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4edd6709e4d77e1bdff86cf618397d853bd7481","date":1180638030,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    // test small word\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"ive\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fi\", 2);\n    assertEquals(0, similar.length);\n\n    // test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  public void testBuild() {\n    try {\n      IndexReader r = IndexReader.open(userindex);\n\n      spellChecker.clearIndex();\n\n      addwords(r, \"field1\");\n      int num_field1 = this.numdoc();\n\n      addwords(r, \"field2\");\n      int num_field2 = this.numdoc();\n\n      assertEquals(num_field2, num_field1 + 1);\n\n      // test small word\n      String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"five\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n      similar = spellChecker.suggestSimilar(\"fiv\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"ive\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fives\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fie\", 2);\n      assertEquals(1, similar.length);\n      assertEquals(similar[0], \"five\");\n\n      similar = spellChecker.suggestSimilar(\"fi\", 2);\n      assertEquals(0, similar.length);\n\n      // test restraint to a field\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n      assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n      assertEquals(1, similar.length); // there is the term thousand in the field field2\n    } catch (IOException e) {\n      e.printStackTrace();\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06f9496ffee71a7a7baed7d7ffa015dc6811bdba","date":1212682328,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    // test small word\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"ive\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fi\", 2);\n    assertEquals(0, similar.length);\n\n    // test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n\n    try {\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, null, false);\n    } catch (NullPointerException e) {\n      assertTrue(\"threw an NPE, and it shouldn't have\", false);\n    }\n\n\n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    // test small word\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"ive\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fi\", 2);\n    assertEquals(0, similar.length);\n\n    // test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6000179efff4c320dafa76c7f0f088e44c4df0d0","date":1213765317,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    // test small word\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"nine\");     // don't suggest a word for itself\n\n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"ive\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(1, similar.length);\n    assertEquals(similar[0], \"five\");\n\n    similar = spellChecker.suggestSimilar(\"fi\", 2);\n    assertEquals(0, similar.length);\n\n    // test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n\n    try {\n      similar = spellChecker.suggestSimilar(\"tousand\", 10, r, null, false);\n    } catch (NullPointerException e) {\n      assertTrue(\"threw an NPE, and it shouldn't have\", false);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62ef729ef7d982bed7997d2837565d4c63df9c81","date":1242828428,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex, true);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex, true);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n    \n    assertLastSearcherOpen(4);\n    \n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex, true);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n\n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex, true);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n    \n    assertLastSearcherOpen(4);\n    \n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","sourceOld":"  public void testBuild() throws CorruptIndexException, IOException {\n    IndexReader r = IndexReader.open(userindex, true);\n\n    spellChecker.clearIndex();\n\n    addwords(r, \"field1\");\n    int num_field1 = this.numdoc();\n\n    addwords(r, \"field2\");\n    int num_field2 = this.numdoc();\n\n    assertEquals(num_field2, num_field1 + 1);\n    \n    assertLastSearcherOpen(4);\n    \n    checkCommonSuggestions(r);\n    checkLevenshteinSuggestions(r);\n    \n    spellChecker.setStringDistance(new JaroWinklerDistance());\n    spellChecker.setAccuracy(0.8f);\n    checkCommonSuggestions(r);\n    checkJaroWinklerSuggestions();\n    \n    spellChecker.setStringDistance(new NGramDistance(2));\n    spellChecker.setAccuracy(0.5f);\n    checkCommonSuggestions(r);\n    checkNGramSuggestions();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06f9496ffee71a7a7baed7d7ffa015dc6811bdba":["d4edd6709e4d77e1bdff86cf618397d853bd7481"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"62ef729ef7d982bed7997d2837565d4c63df9c81":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["4256bc1b3c94786287ccdfc751230374521843cf"],"d4edd6709e4d77e1bdff86cf618397d853bd7481":["1f9e55f1144a02aa9e891161b50c49a9911b58ac"],"1f9e55f1144a02aa9e891161b50c49a9911b58ac":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"4256bc1b3c94786287ccdfc751230374521843cf":["62ef729ef7d982bed7997d2837565d4c63df9c81"],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["06f9496ffee71a7a7baed7d7ffa015dc6811bdba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"]},"commit2Childs":{"06f9496ffee71a7a7baed7d7ffa015dc6811bdba":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["1f9e55f1144a02aa9e891161b50c49a9911b58ac"],"62ef729ef7d982bed7997d2837565d4c63df9c81":["4256bc1b3c94786287ccdfc751230374521843cf"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"d4edd6709e4d77e1bdff86cf618397d853bd7481":["06f9496ffee71a7a7baed7d7ffa015dc6811bdba"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1f9e55f1144a02aa9e891161b50c49a9911b58ac":["d4edd6709e4d77e1bdff86cf618397d853bd7481"],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["62ef729ef7d982bed7997d2837565d4c63df9c81"],"4256bc1b3c94786287ccdfc751230374521843cf":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}