{"path":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      // note: now this reads even wierder than before\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      this.omitTermFreqAndPositions = false;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name; \n    \n    this.fieldsData = value;\n\n    this.isStored = store.isStored();\n   \n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n    if (index == Index.NO) {\n      // note: now this reads even wierder than before\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    }    \n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   *\n   * @deprecated Use {@link StringField}, {@link TextField} instead. */\n  @Deprecated\n  public Field(String name, String value, Store store, Index index, TermVector termVector) {  \n    this(name, value, translateFieldType(store, index, termVector));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   *\n   * @deprecated Use {@link StringField}, {@link TextField} instead. */\n  @Deprecated\n  public Field(String name, String value, Store store, Index index, TermVector termVector) {  \n    this(name, value, translateFieldType(store, index, termVector));\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   *\n   * @deprecated Use {@link StringField}, {@link TextField} instead. */\n  @Deprecated\n  public Field(String name, String value, Store store, Index index, TermVector termVector) {  \n    this(name, value, translateFieldType(store, index, termVector));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}