{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction());\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction());\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction());\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits.value + \" is not: \" + 1, hits.totalHits.value == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    SpanQuery q1 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    SpanQuery q2 = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\")),\n            new MaxPayloadFunction(), PayloadDecoder.FLOAT_DECODER);\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query.build(), 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random(), query.build(), PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}