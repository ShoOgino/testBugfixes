{"path":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2e5bfa22b27d858fb940b70befda09798b82dd2","date":1233862915,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63","date":1235441473,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["2c4a13538c36c02a7d9b892afcd5494c8c2f5ba5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8a9f711fdd25dc08cf7d2938ae9aa34d21ee55","date":1242307463,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["df8a9f711fdd25dc08cf7d2938ae9aa34d21ee55"],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df8a9f711fdd25dc08cf7d2938ae9aa34d21ee55":["bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63":["df8a9f711fdd25dc08cf7d2938ae9aa34d21ee55"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["bcc5dfd08a9fef57d9ea3e878f8fa5c70d2b0b63"],"df8a9f711fdd25dc08cf7d2938ae9aa34d21ee55":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}