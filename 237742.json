{"path":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","commits":[{"id":"10349d681267bb9b224adb51818a0c9b68fdc22c","date":1441152776,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomTools() throws Exception {\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\")));\n    assertEquals(\"** LATERALUS **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.star(\\\"LATERALUS\\\")\")));\n\n    // Does $log get overridden?\n    assertEquals(\"** log overridden **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$log.star(\\\"log overridden\\\")\")));\n\n    // Does $response get overridden?  actual blank response because of the bang on $! reference that silences bogus $-references\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$!response.star(\\\"response overridden??\\\")\")));\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n//    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n//        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d49824890ade4ceb71eb61c0cde1231c8037621","date":1444746779,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","sourceNew":"  @Test\n  public void testCustomTools() throws Exception {\n    // custom_tool.vm responds with $!mytool.star(\"foo\"), but $mytool is not defined (only in velocityWithCustomTools)\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\")));\n\n    assertEquals(\"** LATERALUS **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.star(\\\"LATERALUS\\\")\")));\n\n    // Does $log get overridden?\n    assertEquals(\"** log overridden **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$log.star(\\\"log overridden\\\")\")));\n\n    // Does $response get overridden?  actual blank response because of the bang on $! reference that silences bogus $-references\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$!response.star(\\\"response overridden??\\\")\")));\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n//    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n//        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")));\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTools() throws Exception {\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\")));\n    assertEquals(\"** LATERALUS **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.star(\\\"LATERALUS\\\")\")));\n\n    // Does $log get overridden?\n    assertEquals(\"** log overridden **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$log.star(\\\"log overridden\\\")\")));\n\n    // Does $response get overridden?  actual blank response because of the bang on $! reference that silences bogus $-references\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$!response.star(\\\"response overridden??\\\")\")));\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n//    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n//        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")));\n  }\n\n","bugFix":null,"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d94deac68514af4c985eabd56d9bb95ce27467b9","date":1576085774,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","sourceNew":"  @Test\n  public void testCustomTools() throws Exception {\n    // Render this template once without a custom tool defined, and once with it defined.  The tool has a `.star` method.\n    // The tool added as `mytool`, `log`, and `response`.  `log` is designed to be overridable, but not `response`\n    //    mytool.star=$!mytool.star(\"LATERALUS\")\n    //    mytool.locale=$!mytool.locale\n    //    log.star=$!log.star(\"log overridden\")\n    //    response.star=$!response.star(\"response overridden??\")\n\n    // First without the tool defined, with `$!` turning null object/method references into empty string\n    Properties rendered_props = new Properties();\n    String rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\"));\n    rendered_props.load(new StringReader(rsp));\n    // ignore mytool.locale here, as it will be the random test one\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n\n    // Now with custom tools defined:\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"** LATERALUS **\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"** log overridden **\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"de_DE\",rendered_props.getProperty(\"mytool.locale\"));\n\n\n    // Turn off trusted configset, which disables the custom tool injection\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(false);\n    assertFalse(h.getCoreContainer().getCoreDescriptor(coreName).isConfigSetTrusted());\n\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.locale\"));\n\n    // set the harness back to the default of trusted\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(true);\n\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n    //    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n    //        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")))\n    //           - NOTE: example uses removed inline param; convert to external template as needed\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTools() throws Exception {\n    // custom_tool.vm responds with $!mytool.star(\"foo\"), but $mytool is not defined (only in velocityWithCustomTools)\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\")));\n\n    assertEquals(\"** LATERALUS **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.star(\\\"LATERALUS\\\")\")));\n\n    // Does $log get overridden?\n    assertEquals(\"** log overridden **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$log.star(\\\"log overridden\\\")\")));\n\n    // Does $response get overridden?  actual blank response because of the bang on $! reference that silences bogus $-references\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$!response.star(\\\"response overridden??\\\")\")));\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n//    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n//        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")));\n  }\n\n","bugFix":["7d49824890ade4ceb71eb61c0cde1231c8037621","10349d681267bb9b224adb51818a0c9b68fdc22c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","sourceNew":"  @Test\n  public void testCustomTools() throws Exception {\n    // Render this template once without a custom tool defined, and once with it defined.  The tool has a `.star` method.\n    // The tool added as `mytool`, `log`, and `response`.  `log` is designed to be overridable, but not `response`\n    //    mytool.star=$!mytool.star(\"LATERALUS\")\n    //    mytool.locale=$!mytool.locale\n    //    log.star=$!log.star(\"log overridden\")\n    //    response.star=$!response.star(\"response overridden??\")\n\n    // First without the tool defined, with `$!` turning null object/method references into empty string\n    Properties rendered_props = new Properties();\n    String rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\"));\n    rendered_props.load(new StringReader(rsp));\n    // ignore mytool.locale here, as it will be the random test one\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n\n    // Now with custom tools defined:\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"** LATERALUS **\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"** log overridden **\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"de_DE\",rendered_props.getProperty(\"mytool.locale\"));\n\n\n    // Turn off trusted configset, which disables the custom tool injection\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(false);\n    assertFalse(h.getCoreContainer().getCoreDescriptor(coreName).isConfigSetTrusted());\n\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.locale\"));\n\n    // set the harness back to the default of trusted\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(true);\n\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n    //    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n    //        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")))\n    //           - NOTE: example uses removed inline param; convert to external template as needed\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTools() throws Exception {\n    // custom_tool.vm responds with $!mytool.star(\"foo\"), but $mytool is not defined (only in velocityWithCustomTools)\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\")));\n\n    assertEquals(\"** LATERALUS **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.star(\\\"LATERALUS\\\")\")));\n\n    // Does $log get overridden?\n    assertEquals(\"** log overridden **\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n            SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$log.star(\\\"log overridden\\\")\")));\n\n    // Does $response get overridden?  actual blank response because of the bang on $! reference that silences bogus $-references\n    assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$!response.star(\\\"response overridden??\\\")\")));\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n//    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n//        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testCustomTools().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCustomTools() throws Exception {\n    // Render this template once without a custom tool defined, and once with it defined.  The tool has a `.star` method.\n    // The tool added as `mytool`, `log`, and `response`.  `log` is designed to be overridable, but not `response`\n    //    mytool.star=$!mytool.star(\"LATERALUS\")\n    //    mytool.locale=$!mytool.locale\n    //    log.star=$!log.star(\"log overridden\")\n    //    response.star=$!response.star(\"response overridden??\")\n\n    // First without the tool defined, with `$!` turning null object/method references into empty string\n    Properties rendered_props = new Properties();\n    String rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"custom_tool\"));\n    rendered_props.load(new StringReader(rsp));\n    // ignore mytool.locale here, as it will be the random test one\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n\n    // Now with custom tools defined:\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"** LATERALUS **\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"** log overridden **\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"de_DE\",rendered_props.getProperty(\"mytool.locale\"));\n\n\n    // Turn off trusted configset, which disables the custom tool injection\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(false);\n    assertFalse(h.getCoreContainer().getCoreDescriptor(coreName).isConfigSetTrusted());\n\n    rsp = h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"custom_tool\",VelocityResponseWriter.LOCALE, \"de_DE\"));\n    rendered_props.clear();\n    rendered_props.load(new StringReader(rsp));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"log.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"response.star\"));\n    assertEquals(\"\",rendered_props.getProperty(\"mytool.locale\"));\n\n    // set the harness back to the default of trusted\n    h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(true);\n\n\n    // Custom tools can also have a SolrCore-arg constructor because they are instantiated with SolrCore.createInstance\n    // TODO: do we really need to support this?  no great loss, as a custom tool could take a SolrCore object as a parameter to\n    // TODO: any method, so one could do $mytool.my_method($request.core)\n    // I'm currently inclined to make this feature undocumented/unsupported, as we may want to instantiate classes\n    // in a different manner that only supports no-arg constructors, commented (passing) test case out\n    //    assertEquals(\"collection1\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithCustomTools\",VelocityResponseWriter.TEMPLATE,\"t\",\n    //        SolrParamResourceLoader.TEMPLATE_PARAM_PREFIX+\"t\", \"$mytool.core.name\")))\n    //           - NOTE: example uses removed inline param; convert to external template as needed\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10349d681267bb9b224adb51818a0c9b68fdc22c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df724d84dab24a0cc54bec95a8680867adc7f171":["7d49824890ade4ceb71eb61c0cde1231c8037621","d94deac68514af4c985eabd56d9bb95ce27467b9"],"7d49824890ade4ceb71eb61c0cde1231c8037621":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"10349d681267bb9b224adb51818a0c9b68fdc22c":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"7d49824890ade4ceb71eb61c0cde1231c8037621":["df724d84dab24a0cc54bec95a8680867adc7f171","d94deac68514af4c985eabd56d9bb95ce27467b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["df724d84dab24a0cc54bec95a8680867adc7f171","b659435fdb2401d91fa87bb3df798ae41a8046cd"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}