{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path       The path expression for this field\n   * @param fieldName        The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if(!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \"+ path);\n    List<String> paths = splitEscapeQuote(path);\n    if(paths.size() ==0) {\n      if(isRecord) rootNode.isRecord=true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n//    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d76fc51e1f6bf807458c684a30c03be70be5c5f","date":1407826855,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path       The path expression for this field\n   * @param fieldName        The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if(!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \"+ path);\n    List<String> paths = splitEscapeQuote(path);\n    if(paths.size() ==0) {\n      if(isRecord) rootNode.isRecord=true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path       The path expression for this field\n   * @param fieldName        The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if(!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \"+ path);\n    List<String> paths = splitEscapeQuote(path);\n    if(paths.size() ==0) {\n      if(isRecord) rootNode.isRecord=true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n//    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path       The path expression for this field\n   * @param fieldName        The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if(!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \"+ path);\n    List<String> paths = splitEscapeQuote(path);\n    if(paths.size() ==0) {\n      if(isRecord) rootNode.isRecord=true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd61945b522c69b4bdd1a107f06659c8fee30c3","date":1464716529,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.setAsRecord();\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.setAsRecord();\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.setAsRecord();\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.setAsRecord();\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addField(String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.setAsRecord();\n      return;//the path is \"/\"\n    }\n    // deal with how split behaves when separator starts with an empty string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","sourceOld":"  /**\n   * Splits the path into a List of segments and calls build() to\n   * construct a tree of Nodes representing path segments. The resulting\n   * tree structure ends up describing all the paths we are interested in.\n   *\n   * @param path        The path expression for this field\n   * @param fieldName   The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in\n   *                    a List&lt;String&gt;\n   * @param isRecord    Flags that this PATH is from a forEach statement\n   */\n  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {\n    if (!path.startsWith(\"/\")) throw new RuntimeException(\"All paths must start with '/' \" + path);\n    List<String> paths = splitEscapeQuote(path);\n    if (paths.size() == 0) {\n      if (isRecord) rootNode.isRecord = true;\n      return;//the patrh is \"/\"\n    }\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, fieldName, multiValued, isRecord, path);\n    rootNode.buildOptimize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["2330174b38007b9942205a2679db9ddffe35af89","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["2330174b38007b9942205a2679db9ddffe35af89","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["611f7ea4eee5babadf4129bfa5fbae964738cd7c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"2330174b38007b9942205a2679db9ddffe35af89":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["2330174b38007b9942205a2679db9ddffe35af89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}