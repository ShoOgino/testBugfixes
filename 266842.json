{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","commits":[{"id":"08b152af2fb3154484c1ff50057759a26f7b826c","date":1304959586,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(Random,String,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(Random random, String dirName, boolean doCFS) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    writer = new IndexWriter(dir, conf);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n    reader.close();\n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(Random,String,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(Random random, String dirName, boolean doCFS) throws IOException {\n\n    File indexDir = _TestUtil.getTempDir(dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    writer.close();\n\n    // open fresh writer so we get no prx file in the added segment\n    conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    writer = new IndexWriter(dir, conf);\n    addNoProxDoc(writer);\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n    reader.close();\n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60553e6f5ac42d9bbffb5d48ad5a44171471a62a","date":1310211886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    \n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10);\n      ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(doCFS);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean optimized) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (optimized) {\n      writer.optimize();\n    }\n    writer.close();\n\n    if (!optimized) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir,\n        conf.setMergePolicy(doCFS ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES)\n      );\n      Term searchTerm = new Term(\"id\", \"7\");\n      writer.deleteDocuments(searchTerm);\n      writer.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir,\n        conf.setMergePolicy(doCFS ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES)\n      );\n      Term searchTerm = new Term(\"id\", \"7\");\n      writer.deleteDocuments(searchTerm);\n      writer.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir,\n        conf.setMergePolicy(doCFS ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES)\n      );\n      Term searchTerm = new Term(\"id\", \"7\");\n      writer.deleteDocuments(searchTerm);\n      writer.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      DefaultSimilarity sim = new DefaultSimilarity();\n      reader.setNorm(21, \"content\", sim.encodeNormValue(1.5f));\n      reader.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#createIndex(String,boolean,boolean).mjava","sourceNew":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir,\n        conf.setMergePolicy(doCFS ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES)\n      );\n      Term searchTerm = new Term(\"id\", \"7\");\n      writer.deleteDocuments(searchTerm);\n      writer.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","sourceOld":"  public File createIndex(String dirName, boolean doCFS, boolean fullyMerged) throws IOException {\n    // we use a real directory name that is not cleaned up, because this method is only used to create backwards indexes:\n    File indexDir = new File(LuceneTestCase.TEMP_DIR, dirName);\n    _TestUtil.rmDir(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setUseCompoundFile(doCFS);\n    mp.setNoCFSRatio(1.0);\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(10).setMergePolicy(mp);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n    if (fullyMerged) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    if (!fullyMerged) {\n      // open fresh writer so we get no prx file in the added segment\n      mp = new LogByteSizeMergePolicy();\n      mp.setUseCompoundFile(doCFS);\n      mp.setNoCFSRatio(1.0);\n      // TODO: remove randomness\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp);\n      writer = new IndexWriter(dir, conf);\n      addNoProxDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir,\n        conf.setMergePolicy(doCFS ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES)\n      );\n      Term searchTerm = new Term(\"id\", \"7\");\n      writer.deleteDocuments(searchTerm);\n      writer.close();\n    }\n    \n    dir.close();\n    \n    return indexDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["08b152af2fb3154484c1ff50057759a26f7b826c"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["60553e6f5ac42d9bbffb5d48ad5a44171471a62a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["f0b9507caf22f292ac0e5e59f62db4275adf4511","60553e6f5ac42d9bbffb5d48ad5a44171471a62a"],"08b152af2fb3154484c1ff50057759a26f7b826c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1291e4568eb7d9463d751627596ef14baf4c1603":["08b152af2fb3154484c1ff50057759a26f7b826c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"60553e6f5ac42d9bbffb5d48ad5a44171471a62a":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08b152af2fb3154484c1ff50057759a26f7b826c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08b152af2fb3154484c1ff50057759a26f7b826c"],"4122a26e1fd0457a340616673a3d3aada370f713":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","60553e6f5ac42d9bbffb5d48ad5a44171471a62a"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"08b152af2fb3154484c1ff50057759a26f7b826c":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"60553e6f5ac42d9bbffb5d48ad5a44171471a62a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08b152af2fb3154484c1ff50057759a26f7b826c","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"4122a26e1fd0457a340616673a3d3aada370f713":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","1291e4568eb7d9463d751627596ef14baf4c1603","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}