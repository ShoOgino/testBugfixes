{"path":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"/dev/null","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}