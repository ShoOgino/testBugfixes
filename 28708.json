{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80","date":1343936895,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":null,"sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["97b1b5806a1f8e249985ae7c486ef449726fd236"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}