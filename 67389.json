{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Throws {@code IllegalArgumentException} if any of these settings\n   *  is invalid. */\n  public static void validateAutoPrefixSettings(int minItemsInAutoPrefix,\n                                                int maxItemsInAutoPrefix) {\n    if (minItemsInAutoPrefix != 0) {\n      if (minItemsInAutoPrefix < 2) {\n        throw new IllegalArgumentException(\"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (2*(minItemsInAutoPrefix-1) > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n    } else if (maxItemsInAutoPrefix != 0) {\n      throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Throws {@code IllegalArgumentException} if any of these settings\n   *  is invalid. */\n  public static void validateAutoPrefixSettings(int minItemsInAutoPrefix,\n                                                int maxItemsInAutoPrefix) {\n    if (minItemsInAutoPrefix != 0) {\n      if (minItemsInAutoPrefix < 2) {\n        throw new IllegalArgumentException(\"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (2*(minItemsInAutoPrefix-1) > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n    } else if (maxItemsInAutoPrefix != 0) {\n      throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","sourceNew":null,"sourceOld":"  /** Throws {@code IllegalArgumentException} if any of these settings\n   *  is invalid. */\n  public static void validateAutoPrefixSettings(int minItemsInAutoPrefix,\n                                                int maxItemsInAutoPrefix) {\n    if (minItemsInAutoPrefix != 0) {\n      if (minItemsInAutoPrefix < 2) {\n        throw new IllegalArgumentException(\"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (2*(minItemsInAutoPrefix-1) > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n    } else if (maxItemsInAutoPrefix != 0) {\n      throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","sourceNew":null,"sourceOld":"  /** Throws {@code IllegalArgumentException} if any of these settings\n   *  is invalid. */\n  public static void validateAutoPrefixSettings(int minItemsInAutoPrefix,\n                                                int maxItemsInAutoPrefix) {\n    if (minItemsInAutoPrefix != 0) {\n      if (minItemsInAutoPrefix < 2) {\n        throw new IllegalArgumentException(\"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (2*(minItemsInAutoPrefix-1) > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n    } else if (maxItemsInAutoPrefix != 0) {\n      throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#validateAutoPrefixSettings(int,int).mjava","sourceNew":null,"sourceOld":"  /** Throws {@code IllegalArgumentException} if any of these settings\n   *  is invalid. */\n  public static void validateAutoPrefixSettings(int minItemsInAutoPrefix,\n                                                int maxItemsInAutoPrefix) {\n    if (minItemsInAutoPrefix != 0) {\n      if (minItemsInAutoPrefix < 2) {\n        throw new IllegalArgumentException(\"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n      if (2*(minItemsInAutoPrefix-1) > maxItemsInAutoPrefix) {\n        throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=\" + maxItemsInAutoPrefix + \" minItemsInAutoPrefix=\" + minItemsInAutoPrefix);\n      }\n    } else if (maxItemsInAutoPrefix != 0) {\n      throw new IllegalArgumentException(\"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["3e8715d826e588419327562287d5d6a8040d63d6","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e8715d826e588419327562287d5d6a8040d63d6","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}