{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","commits":[{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) ctx.readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = strategy.makeFilter(args);\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query = strategy.makeQuery(args);\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = strategy.makeFilter(args);\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query = strategy.makeQuery(args);\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query = strategy.makeQuery(args);\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,Point,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query = strategy.makeQuery(args);\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void _checkHits(boolean bbox, Point pt, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query = strategy.makeQuery(args);\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"1db68e96dd908fcd79ef809095822736aa601d08":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"672b198fc3dce868916c727917cae58c2906763d":["1db68e96dd908fcd79ef809095822736aa601d08"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1db68e96dd908fcd79ef809095822736aa601d08"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1db68e96dd908fcd79ef809095822736aa601d08":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}