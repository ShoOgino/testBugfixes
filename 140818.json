{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // nocommit, don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // nocommit, the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a23c50842ff5508c8cf403efde22f0255055700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46038b846e0361718bd2d85e09b9ae20829327d4","date":1315759199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // nocommit, don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // nocommit, the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3a23c50842ff5508c8cf403efde22f0255055700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readDictionaryFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStream, building up the words map\n   *\n   * @param dictionary InputStream to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFile(InputStream dictionary, CharsetDecoder decoder) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(dictionary, decoder));\n    // TODO: don't create millions of strings.\n    String line = reader.readLine(); // first line is number of entries\n    int numEntries = Integer.parseInt(line);\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    while ((line = reader.readLine()) != null) {\n      String entry;\n      HunspellWord wordForm;\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        \n        wordForm = new HunspellWord(flagParsingStrategy.parseFlags(line.substring(flagSep + 1, end)));\n        Arrays.sort(wordForm.getFlags());\n        entry = line.substring(0, flagSep);\n        if(ignoreCase) {\n          entry = entry.toLowerCase(Locale.ENGLISH);\n        }\n      }\n      \n      List<HunspellWord> entries = words.get(entry);\n      if (entries == null) {\n        entries = new ArrayList<HunspellWord>();\n        words.put(entry, entries);\n      }\n      entries.add(wordForm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"46038b846e0361718bd2d85e09b9ae20829327d4":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77d6144bb77983c683128c11b708057809173cff":["46038b846e0361718bd2d85e09b9ae20829327d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46038b846e0361718bd2d85e09b9ae20829327d4":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["46038b846e0361718bd2d85e09b9ae20829327d4"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}