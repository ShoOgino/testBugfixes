{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#writeField(int,IndexableField).mjava","sourceNew":"  public final void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","sourceOld":"  public final void writeField(int fieldNumber, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public final void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","sourceOld":"  public final void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}