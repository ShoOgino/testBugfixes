{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef658003003b32165df5d5016addcee1da98e4a2","date":1419764948,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5399733c0eeb73827ff5b8aee51c110ec540e6f0","date":1511756706,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,MergeContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, MergeContext mergeContext) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Set<SegmentCommitInfo> merging = mergeContext.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    int numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, IndexWriter writer) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentCommitInfo> segments = new ArrayList<>();\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n\n    for(SegmentCommitInfo sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = TestUtil.nextInt(random, 1, numSegments);\n      if (doNonBulkMerges && random.nextBoolean()) {\n        mergeSpec.add(new MockRandomOneMerge(segments.subList(0, segsToMerge),random.nextLong()));\n      } else {\n        mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n      }\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["ef658003003b32165df5d5016addcee1da98e4a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"ef658003003b32165df5d5016addcee1da98e4a2":["027bee21e09164c9ee230395405076d1e0034b30"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["ef658003003b32165df5d5016addcee1da98e4a2","5399733c0eeb73827ff5b8aee51c110ec540e6f0"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"ef658003003b32165df5d5016addcee1da98e4a2":["5399733c0eeb73827ff5b8aee51c110ec540e6f0","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["1d28f215464f76024caf026606f8ea51a5319c53"],"027bee21e09164c9ee230395405076d1e0034b30":["ef658003003b32165df5d5016addcee1da98e4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}