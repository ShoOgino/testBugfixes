{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testIndexDimEqualDataDimDifferent().mjava","commits":[{"id":"452aca01058c8a4e6827ff9096664dde4a1d9790","date":1543310809,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testIndexDimEqualDataDimDifferent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexDimEqualDataDimDifferent() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims - 1);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    byte[][] indexDimensions = new byte[numDataDims][];\n    for(int dim=0;dim<numIndexDims;dim++) {\n      indexDimensions[dim] = new byte[numBytesPerDim];\n      random().nextBytes(indexDimensions[dim]);\n    }\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numIndexDims;dim++) {\n        values[dim] = indexDimensions[dim];\n      }\n      for (int dim = numIndexDims; dim < numDataDims; dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testIndexDimEqualDataDimDifferent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testIndexDimEqualDataDimDifferent().mjava","sourceNew":"  public void testIndexDimEqualDataDimDifferent() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = Math.min(TestUtil.nextInt(random(), 1, numDataDims - 1), PointValues.MAX_INDEX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    byte[][] indexDimensions = new byte[numDataDims][];\n    for(int dim=0;dim<numIndexDims;dim++) {\n      indexDimensions[dim] = new byte[numBytesPerDim];\n      random().nextBytes(indexDimensions[dim]);\n    }\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numIndexDims;dim++) {\n        values[dim] = indexDimensions[dim];\n      }\n      for (int dim = numIndexDims; dim < numDataDims; dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testIndexDimEqualDataDimDifferent() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 2, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims - 1);\n\n    int numDocs = atLeast(1000);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    byte[][] indexDimensions = new byte[numDataDims][];\n    for(int dim=0;dim<numIndexDims;dim++) {\n      indexDimensions[dim] = new byte[numBytesPerDim];\n      random().nextBytes(indexDimensions[dim]);\n    }\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numIndexDims;dim++) {\n        values[dim] = indexDimensions[dim];\n      }\n      for (int dim = numIndexDims; dim < numDataDims; dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"452aca01058c8a4e6827ff9096664dde4a1d9790":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["452aca01058c8a4e6827ff9096664dde4a1d9790"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"452aca01058c8a4e6827ff9096664dde4a1d9790":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["452aca01058c8a4e6827ff9096664dde4a1d9790"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}