{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","sourceNew":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#inputStreamToByteArray(InputStream).mjava","sourceNew":"  public static ByteBuffer inputStreamToByteArray(InputStream is) throws IOException {\n    return inputStreamToByteArray(is,Integer.MAX_VALUE);\n\n  }\n\n","sourceOld":"  /**\n   * Reads an input stream into a byte array\n   * @param is the input stream\n   * @return the byte array\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int next = is.read();\n    while (next > -1) {\n        bos.write(next);\n        next = is.read();\n    }\n    bos.flush();\n    is.close();\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c2c3a504730329ae644b009dee43024116605d47"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"a0d196318cb8ce39ae32035f290cd1397833e472":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0d196318cb8ce39ae32035f290cd1397833e472"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a0d196318cb8ce39ae32035f290cd1397833e472"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"c2c3a504730329ae644b009dee43024116605d47":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"a0d196318cb8ce39ae32035f290cd1397833e472":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}