{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","sourceNew":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.indexOptions : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.storePayloads : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","sourceOld":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.indexOptions : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.storePayloads : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","sourceNew":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.getIndexOptions() : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.hasPayloads() : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","sourceOld":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.indexOptions : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.storePayloads : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","sourceNew":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.getIndexOptions() : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.hasPayloads() : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","sourceOld":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.indexOptions : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.storePayloads : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#seek(TermInfo,Term).mjava","sourceNew":null,"sourceOld":"  void seek(TermInfo ti, Term term) throws IOException {\n    count = 0;\n    FieldInfo fi = fieldInfos.fieldInfo(term.field());\n    this.indexOptions = (fi != null) ? fi.getIndexOptions() : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    currentFieldStoresPayloads = (fi != null) ? fi.hasPayloads() : false;\n    if (ti == null) {\n      df = 0;\n    } else {\n      df = ti.docFreq;\n      doc = 0;\n      freqBasePointer = ti.freqPointer;\n      proxBasePointer = ti.proxPointer;\n      skipPointer = freqBasePointer + ti.skipOffset;\n      freqStream.seek(freqBasePointer);\n      haveSkipped = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}