{"path":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#flush(SegmentWriteState,DimensionalWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, DimensionalWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new DimensionalReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}