{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#refillDocs().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"/dev/null","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":null,"sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}