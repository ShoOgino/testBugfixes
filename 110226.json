{"path":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testTypeName().mjava","commits":[{"id":"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","date":1336412267,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testTypeName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTypeName() throws Exception{\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    NamedList dynamicStats = mock.getStatistics();\n    assertTrue(dynamicStats.size() != 0);\n    assertTrue(dynamicStats.get(\"Integer\") instanceof Integer);\n    assertTrue(dynamicStats.get(\"Double\") instanceof Double);\n    assertTrue(dynamicStats.get(\"Long\") instanceof Long);\n    assertTrue(dynamicStats.get(\"Short\") instanceof Short);\n    assertTrue(dynamicStats.get(\"Byte\") instanceof Byte);\n    assertTrue(dynamicStats.get(\"Float\") instanceof Float);\n    assertTrue(dynamicStats.get(\"String\") instanceof String);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n\n    ObjectName name = objects.iterator().next().getObjectName();\n    assertMBeanTypeAndValue(name, \"Integer\", Integer.class, 123);\n    assertMBeanTypeAndValue(name, \"Double\", Double.class, 567.534);\n    assertMBeanTypeAndValue(name, \"Long\", Long.class, 32352463l);\n    assertMBeanTypeAndValue(name, \"Short\", Short.class, (short) 32768);\n    assertMBeanTypeAndValue(name, \"Byte\", Byte.class, (byte) 254);\n    assertMBeanTypeAndValue(name, \"Float\", Float.class, 3.456f);\n    assertMBeanTypeAndValue(name, \"String\",String.class, \"testing\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testTypeName().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTypeName() throws Exception{\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    NamedList dynamicStats = mock.getStatistics();\n    assertTrue(dynamicStats.size() != 0);\n    assertTrue(dynamicStats.get(\"Integer\") instanceof Integer);\n    assertTrue(dynamicStats.get(\"Double\") instanceof Double);\n    assertTrue(dynamicStats.get(\"Long\") instanceof Long);\n    assertTrue(dynamicStats.get(\"Short\") instanceof Short);\n    assertTrue(dynamicStats.get(\"Byte\") instanceof Byte);\n    assertTrue(dynamicStats.get(\"Float\") instanceof Float);\n    assertTrue(dynamicStats.get(\"String\") instanceof String);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n\n    ObjectName name = objects.iterator().next().getObjectName();\n    assertMBeanTypeAndValue(name, \"Integer\", Integer.class, 123);\n    assertMBeanTypeAndValue(name, \"Double\", Double.class, 567.534);\n    assertMBeanTypeAndValue(name, \"Long\", Long.class, 32352463l);\n    assertMBeanTypeAndValue(name, \"Short\", Short.class, (short) 32768);\n    assertMBeanTypeAndValue(name, \"Byte\", Byte.class, (byte) 254);\n    assertMBeanTypeAndValue(name, \"Float\", Float.class, 3.456f);\n    assertMBeanTypeAndValue(name, \"String\",String.class, \"testing\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testTypeName().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTypeName() throws Exception{\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    NamedList dynamicStats = mock.getStatistics();\n    assertTrue(dynamicStats.size() != 0);\n    assertTrue(dynamicStats.get(\"Integer\") instanceof Integer);\n    assertTrue(dynamicStats.get(\"Double\") instanceof Double);\n    assertTrue(dynamicStats.get(\"Long\") instanceof Long);\n    assertTrue(dynamicStats.get(\"Short\") instanceof Short);\n    assertTrue(dynamicStats.get(\"Byte\") instanceof Byte);\n    assertTrue(dynamicStats.get(\"Float\") instanceof Float);\n    assertTrue(dynamicStats.get(\"String\") instanceof String);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n\n    ObjectName name = objects.iterator().next().getObjectName();\n    assertMBeanTypeAndValue(name, \"Integer\", Integer.class, 123);\n    assertMBeanTypeAndValue(name, \"Double\", Double.class, 567.534);\n    assertMBeanTypeAndValue(name, \"Long\", Long.class, 32352463l);\n    assertMBeanTypeAndValue(name, \"Short\", Short.class, (short) 32768);\n    assertMBeanTypeAndValue(name, \"Byte\", Byte.class, (byte) 254);\n    assertMBeanTypeAndValue(name, \"Float\", Float.class, 3.456f);\n    assertMBeanTypeAndValue(name, \"String\",String.class, \"testing\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}