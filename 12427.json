{"path":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = newDirectory(RANDOM);\n    MockRAMDirectory dir2 = newDirectory(RANDOM);\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockDirectoryWrapper dir1 = newDirectory(RANDOM);\n    MockDirectoryWrapper dir2 = newDirectory(RANDOM);\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = newDirectory(RANDOM);\n    MockRAMDirectory dir2 = newDirectory(RANDOM);\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c60725108e9c716f323ee50664646dfe2a35927","date":1282679037,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockDirectoryWrapper dir1 = newDirectory(RANDOM);\n    MockDirectoryWrapper dir2 = newDirectory(RANDOM);\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n    dir1.setFailOnOpenInput(false);\n    dir2.setFailOnOpenInput(false);\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n    dir1.setFailOnOpenInput(false);\n    dir2.setFailOnOpenInput(false);\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    // we cant use non-ramdir on windows, because this test needs to double-write.\n    MockDirectoryWrapper dir1 = new MockDirectoryWrapper(random, new RAMDirectory());\n    MockDirectoryWrapper dir2 = new MockDirectoryWrapper(random, new RAMDirectory());\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n    dir1.setFailOnOpenInput(false);\n    dir2.setFailOnOpenInput(false);\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!threads[i].failed);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1c60725108e9c716f323ee50664646dfe2a35927":["a05409176bd65129d67a785ee70e881e238a9aef"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["1c60725108e9c716f323ee50664646dfe2a35927"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3cc749c053615f5871f3b95715fe292f34e70a53":["53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1c60725108e9c716f323ee50664646dfe2a35927":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1c60725108e9c716f323ee50664646dfe2a35927"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}