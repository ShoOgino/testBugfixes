{"path":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init((IndexSchema)null, args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c7ac188e4a03a976c95993dc3cd292df966faa4","date":1365151572,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","sourceNew":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init((IndexSchema)null, args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","bugFix":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","sourceNew":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getLatestSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","sourceNew":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getLatestSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getLatestSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest#testValidSimple().mjava","sourceNew":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getLatestSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidSimple() {\n    PreAnalyzedField paf = new PreAnalyzedField();\n    // use Simple format\n    HashMap<String,String> args = new HashMap<>();\n    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());\n    paf.init(h.getCore().getLatestSchema(), args);\n    PreAnalyzedParser parser = new SimplePreAnalyzedParser();\n    for (int i = 0; i < valid.length; i++) {\n      String s = valid[i];\n      try {\n        Field f = (Field)paf.fromString(field, s, 1.0f);\n        //System.out.println(\" - toString: '\" + sb.toString() + \"'\");\n        assertEquals(validParsed[i], parser.toFormattedString(f));\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"Should pass: '\" + s + \"', exception: \" + e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"08970e5b8411182a29412c177eff67ec1110095b":["6c7ac188e4a03a976c95993dc3cd292df966faa4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}