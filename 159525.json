{"path":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","commits":[{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","pathOld":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","sourceNew":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == UCharacter.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == UCharacter.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","sourceNew":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == ECharacterCategory.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == UCharacter.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","sourceNew":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == ECharacterCategory.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == UCharacter.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ScriptIterator#next().mjava","sourceNew":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == ECharacterCategory.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Iterates to the next script run, returning true if one exists.\n   * \n   * @return true if there is another script run, false otherwise.\n   */\n  boolean next() {\n    if (scriptLimit >= limit)\n      return false;\n\n    scriptCode = UScript.COMMON;\n    scriptStart = scriptLimit;\n\n    while (index < limit) {\n      final int ch = UTF16.charAt(text, start, limit, index - start);\n      final int sc = getScript(ch);\n\n      /*\n       * From UTR #24: Implementations that determine the boundaries between\n       * characters of given scripts should never break between a non-spacing\n       * mark and its base character. Thus for boundary determinations and\n       * similar sorts of processing, a non-spacing mark — whatever its script\n       * value — should inherit the script value of its base character.\n       */\n      if (isSameScript(scriptCode, sc)\n          || UCharacter.getType(ch) == ECharacterCategory.NON_SPACING_MARK) {\n        index += UTF16.getCharCount(ch);\n\n        /*\n         * Inherited or Common becomes the script code of the surrounding text.\n         */\n        if (scriptCode <= UScript.INHERITED && sc > UScript.INHERITED) {\n          scriptCode = sc;\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    scriptLimit = index;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["b441220ceb933f50f32318ab45acc05d5943f3aa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}