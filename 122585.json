{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","commits":[{"id":"6e36353d7461af8d2329a78a71457cf8e3c1e88f","date":1411572107,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);\n    jetty.start();\n\n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n\n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1280741c654e60d3590156727fd5d8daa141efb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1280741c654e60d3590156727fd5d8daa141efb7","date":1420244446,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig == null ? false : sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);\n    jetty.start();\n\n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n\n    return jetty;\n  }\n\n","bugFix":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), solrConfigOverride, schemaOverride, jettyconfig);\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig == null ? false : sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), solrConfigOverride, schemaOverride, jettyconfig);\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig == null ? false : sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createProxiedJetty(File,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a JettySolrRunner with a socket proxy sitting infront of the Jetty server,\n   * which gives us the ability to simulate network partitions without having to fuss\n   * with IPTables.\n   */\n  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["9bc766d645fa848f86c381c7f6acf2c881c99399","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["1280741c654e60d3590156727fd5d8daa141efb7","9bc766d645fa848f86c381c7f6acf2c881c99399"],"61c45e99cf6676da48f19d7511c73712ad39402b":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["c66158bb16e902a21272772f1b911f04b1a55abb"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"],"c66158bb16e902a21272772f1b911f04b1a55abb":["1280741c654e60d3590156727fd5d8daa141efb7"],"1280741c654e60d3590156727fd5d8daa141efb7":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","61c45e99cf6676da48f19d7511c73712ad39402b"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["1280741c654e60d3590156727fd5d8daa141efb7"],"1280741c654e60d3590156727fd5d8daa141efb7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}