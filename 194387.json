{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","commits":[{"id":"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3","date":1329434163,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, SolrCore core,\n      String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, core, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, core, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78ec5a45ec38783c8d979da5915684e3dd0b984c","date":1331688847,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d805d691fbf3ca8aafa5397568ec761790b88622","date":1417093891,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["78ec5a45ec38783c8d979da5915684e3dd0b984c"],"d805d691fbf3ca8aafa5397568ec761790b88622":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"78ec5a45ec38783c8d979da5915684e3dd0b984c":["30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["78ec5a45ec38783c8d979da5915684e3dd0b984c","3f767f8c99eaedb984df754fe61f21c5de260f94"],"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["78ec5a45ec38783c8d979da5915684e3dd0b984c","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d805d691fbf3ca8aafa5397568ec761790b88622"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d805d691fbf3ca8aafa5397568ec761790b88622":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78ec5a45ec38783c8d979da5915684e3dd0b984c":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3":["78ec5a45ec38783c8d979da5915684e3dd0b984c"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["d805d691fbf3ca8aafa5397568ec761790b88622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}