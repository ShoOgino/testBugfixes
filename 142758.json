{"path":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        client.setDefaultMaxConnectionsPerHost(100);\n        client.setMaxTotalConnections(100);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        client.setDefaultMaxConnectionsPerHost(100);\n        client.setMaxTotalConnections(100);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        client.setDefaultMaxConnectionsPerHost(100);\n        client.setMaxTotalConnections(100);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        client.setDefaultMaxConnectionsPerHost(100);\n        client.setMaxTotalConnections(100);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url);\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url);\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url);\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url);\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c033cd5a1320f54b12d30182a3c231d8d38da4e","date":1567086766,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    try {\n      // setup the client...\n      final String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      final HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n      return client;\n    } catch (final Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"collection1\" ) {\n        @Override\n        public void close() {\n          // do not close core container\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"859081acf00749f5dd462772c571d611d4a4d2db":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["43d1e498704edd2bba13548a189eed4dfccff11b"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}