{"path":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","commits":[{"id":"7c4ae300fc0d2aff199cc445aa3acbe1d4629d15","date":1347889619,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\d+:\\\\d+\\\\.\\\\d+,\\\\d+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d29f8f13574628ca144c13cf3b321011c3857b59","date":1347987871,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","sourceNew":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\d+:\\\\d+\\\\.\\\\d+,\\\\d+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","sourceNew":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"/withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"/withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","sourceNew":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"/withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"/withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ResponseLogComponentTest#testToLogScores().mjava","sourceNew":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"/withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"/withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToLogScores() throws Exception {\n    SolrQueryRequest req = null;\n    try {\n      String handler=\"withlog\";\n      req = req(\"indent\",\"true\", \"qt\",\"withlog\",  \"q\",\"aa\", \"rows\",\"2\",\n          \"fl\",\"id,subject,score\", \"responseLog\",\"true\");\n      SolrQueryResponse qr = h.queryAndResponse(handler, req);\n      NamedList<Object> entries = qr.getToLog();\n      String responseLog = (String) entries.get(\"responseLog\");\n      assertNotNull(responseLog);\n      assertTrue(responseLog.matches(\"\\\\w+:\\\\d+\\\\.\\\\d+,\\\\w+:\\\\d+\\\\.\\\\d+\"));\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d29f8f13574628ca144c13cf3b321011c3857b59":["7c4ae300fc0d2aff199cc445aa3acbe1d4629d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c4ae300fc0d2aff199cc445aa3acbe1d4629d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["d29f8f13574628ca144c13cf3b321011c3857b59","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d29f8f13574628ca144c13cf3b321011c3857b59","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["d29f8f13574628ca144c13cf3b321011c3857b59"]},"commit2Childs":{"d29f8f13574628ca144c13cf3b321011c3857b59":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c4ae300fc0d2aff199cc445aa3acbe1d4629d15"],"7c4ae300fc0d2aff199cc445aa3acbe1d4629d15":["d29f8f13574628ca144c13cf3b321011c3857b59"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}