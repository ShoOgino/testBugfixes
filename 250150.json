{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getWordFreqForClass(String,String,Term).mjava","commits":[{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getWordFreqForClass(String,String,Term).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getWordFreqForClass(String,String,BytesRef).mjava","sourceNew":"  /**\n   * Returns the number of documents of the input class ( from the whole index or from a subset)\n   * that contains the word ( in a specific field or in all the fields if no one selected)\n   *\n   * @param word      the token produced by the analyzer\n   * @param fieldName the field the word is coming from\n   * @param term      the class term\n   * @return number of documents of the input class\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private int getWordFreqForClass(String word, String fieldName, Term term) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    subQuery.add(new BooleanClause(new TermQuery(new Term(fieldName, word)), BooleanClause.Occur.SHOULD));\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents of the input class ( from the whole index or from a subset)\n   * that contains the word ( in a specific field or in all the fields if no one selected)\n   *\n   * @param word      the token produced by the analyzer\n   * @param fieldName the field the word is coming from\n   * @param c         the class\n   * @return number of documents of the input class\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private int getWordFreqForClass(String word, String fieldName, BytesRef c) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    subQuery.add(new BooleanClause(new TermQuery(new Term(fieldName, word)), BooleanClause.Occur.SHOULD));\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38b5bd3ae837751f57f363e9a41b833794222814"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38b5bd3ae837751f57f363e9a41b833794222814"],"38b5bd3ae837751f57f363e9a41b833794222814":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}