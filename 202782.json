{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveRandomNodes(int,boolean,Random).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveRandomNodes(int,boolean,Random).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveRandomNodes(int,boolean,Random).mjava","sourceNew":"  /**\n   * Remove a number of randomly selected nodes\n   * @param number number of nodes to remove\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   * @param random random\n   */\n  public void simRemoveRandomNodes(int number, boolean withValues, Random random) throws Exception {\n    List<String> nodes = new ArrayList<>(liveNodesSet.get());\n    Collections.shuffle(nodes, random);\n    int count = Math.min(number, nodes.size());\n    for (int i = 0; i < count; i++) {\n      simRemoveNode(nodes.get(i), withValues);\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a number of randomly selected nodes\n   * @param number number of nodes to remove\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   * @param random random\n   */\n  public void simRemoveRandomNodes(int number, boolean withValues, Random random) throws Exception {\n    List<String> nodes = new ArrayList<>(liveNodesSet.get());\n    Collections.shuffle(nodes, random);\n    int count = Math.min(number, nodes.size());\n    for (int i = 0; i < count; i++) {\n      simRemoveNode(nodes.get(i), withValues);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveRandomNodes(int,boolean,Random).mjava","sourceNew":null,"sourceOld":"  /**\n   * Remove a number of randomly selected nodes\n   * @param number number of nodes to remove\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   * @param random random\n   */\n  public void simRemoveRandomNodes(int number, boolean withValues, Random random) throws Exception {\n    List<String> nodes = new ArrayList<>(liveNodesSet.get());\n    Collections.shuffle(nodes, random);\n    int count = Math.min(number, nodes.size());\n    for (int i = 0; i < count; i++) {\n      simRemoveNode(nodes.get(i), withValues);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}