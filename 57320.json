{"path":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    long maxRamSoFar = perThreadState.perThreadBytes;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.perThreadBytes;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert maxRamUsingThreadState.perThread.getNumDocsInRAM() > 0;\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0ffe595ae62265c3e638777d6f6d3f461f0057"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0ffe595ae62265c3e638777d6f6d3f461f0057","date":1302855976,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    long maxRamSoFar = perThreadState.perThreadBytes;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.perThreadBytes;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    long maxRamSoFar = perThreadState.perThreadBytes;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.perThreadBytes;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert maxRamUsingThreadState.perThread.getNumDocsInRAM() > 0;\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    long maxRamSoFar = perThreadState.perThreadBytes;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.perThreadBytes;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert writer.get().message(\n        \"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.perThread.getNumDocsInRAM() > 0;\n    long maxRamSoFar = perThreadState.bytesUsed;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = perThreadState;\n    assert !perThreadState.flushPending : \"DWPT should have flushed\";\n    Iterator<ThreadState> activePerThreadsIterator = control.allActiveThreads();\n    while (activePerThreadsIterator.hasNext()) {\n      ThreadState next = activePerThreadsIterator.next();\n      if (!next.flushPending) {\n        final long nextRam = next.bytesUsed;\n        if (nextRam > maxRamSoFar && next.perThread.getNumDocsInRAM() > 0) {\n          maxRamSoFar = nextRam;\n          maxRamUsingThreadState = next;\n        }\n      }\n    }\n    assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba0ffe595ae62265c3e638777d6f6d3f461f0057":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["ba0ffe595ae62265c3e638777d6f6d3f461f0057"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["ba0ffe595ae62265c3e638777d6f6d3f461f0057"],"ba0ffe595ae62265c3e638777d6f6d3f461f0057":["f6f4cae61e16730201371ab7e9912721c19324e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["06584e6e98d592b34e1329b384182f368d2025e8","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}