{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}