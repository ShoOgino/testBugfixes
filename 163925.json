{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","commits":[{"id":"60b8eb0dfbfc49ae29429178e88ea97475408151","date":1410452095,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testOverrides() throws Exception {\r\n    // verify that all methods of Spans are overridden by FilterSpans,\r\n    // except those under the 'exclude' list\r\n    Set<Method> exclude = new HashSet<>();\r\n    for (Method m : FilterSpans.class.getMethods()) {\r\n      if (m.getDeclaringClass() == Spans.class) {\r\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4bb142e8a6f1a20aef43b6eefd3d3fac729d954","date":1410461236,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Spans are overridden by FilterSpans,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    for (Method m : FilterSpans.class.getMethods()) {\n      if (m.getDeclaringClass() == Spans.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testOverrides() throws Exception {\r\n    // verify that all methods of Spans are overridden by FilterSpans,\r\n    // except those under the 'exclude' list\r\n    Set<Method> exclude = new HashSet<>();\r\n    for (Method m : FilterSpans.class.getMethods()) {\r\n      if (m.getDeclaringClass() == Spans.class) {\r\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Spans are overridden by FilterSpans,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(FilterSpans.class.getMethod(\"freq\"));\n    exclude.add(FilterSpans.class.getMethod(\"score\"));\n    for (Method m : FilterSpans.class.getMethods()) {\n      if (m.getDeclaringClass() == Spans.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Spans are overridden by FilterSpans,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    for (Method m : FilterSpans.class.getMethods()) {\n      if (m.getDeclaringClass() == Spans.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFilterSpans#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Spans are overridden by FilterSpans,\n    for (Method m : FilterSpans.class.getMethods()) {\n      if (m.getDeclaringClass() == Spans.class) {\n        fail(\"method \" + m.getName() + \" not overridden!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Spans are overridden by FilterSpans,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(FilterSpans.class.getMethod(\"freq\"));\n    exclude.add(FilterSpans.class.getMethod(\"score\"));\n    for (Method m : FilterSpans.class.getMethods()) {\n      if (m.getDeclaringClass() == Spans.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b8eb0dfbfc49ae29429178e88ea97475408151":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["b4bb142e8a6f1a20aef43b6eefd3d3fac729d954"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"b4bb142e8a6f1a20aef43b6eefd3d3fac729d954":["60b8eb0dfbfc49ae29429178e88ea97475408151"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"60b8eb0dfbfc49ae29429178e88ea97475408151":["b4bb142e8a6f1a20aef43b6eefd3d3fac729d954"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60b8eb0dfbfc49ae29429178e88ea97475408151"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4bb142e8a6f1a20aef43b6eefd3d3fac729d954":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}