{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n                          (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n      (new RawCurrencyValueSource(field, currencyCode, parser),\n       p1 == null ? null : p1.getAmount() + \"\", \n       p2 == null ? null : p2.getAmount() + \"\",\n       minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n                          (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n      (new RawCurrencyValueSource(field, currencyCode, parser),\n       p1 == null ? null : p1.getAmount() + \"\", \n       p2 == null ? null : p2.getAmount() + \"\",\n       minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8914a0d123cdba0648288fc001c35ec78dfe698a","date":1499266234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new DocValuesFieldExistsQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new DocValuesFieldExistsQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new FieldValueQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddef54907d52d0079217460aacd73c5d3bb1d39","date":1527887541,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new DocValuesFieldExistsQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Filter docsWithValues = new QueryWrapperFilter(new DocValuesFieldExistsQuery(getAmountField(field).getName()));\n    final Filter vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    final BooleanQuery.Builder docsInRange = new BooleanQuery.Builder();\n    docsInRange.add(docsWithValues, Occur.FILTER);\n    docsInRange.add(vsRangeFilter, Occur.FILTER);\n\n    return new SolrConstantScoreQuery(new QueryWrapperFilter(docsInRange.build()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"8914a0d123cdba0648288fc001c35ec78dfe698a":["28288370235ed02234a64753cdbf0c6ec096304a"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["4ddef54907d52d0079217460aacd73c5d3bb1d39","0c81907bd971f786e378654d32b80da32b0e950d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["8914a0d123cdba0648288fc001c35ec78dfe698a"],"0c81907bd971f786e378654d32b80da32b0e950d":["4ddef54907d52d0079217460aacd73c5d3bb1d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["8914a0d123cdba0648288fc001c35ec78dfe698a","4ddef54907d52d0079217460aacd73c5d3bb1d39"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"e73d8d559120669b47658108d818b637df5456ea":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","8914a0d123cdba0648288fc001c35ec78dfe698a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"8914a0d123cdba0648288fc001c35ec78dfe698a":["4ddef54907d52d0079217460aacd73c5d3bb1d39","b70042a8a492f7054d480ccdd2be9796510d4327","e73d8d559120669b47658108d818b637df5456ea"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e73d8d559120669b47658108d818b637df5456ea"],"28288370235ed02234a64753cdbf0c6ec096304a":["8914a0d123cdba0648288fc001c35ec78dfe698a"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","0c81907bd971f786e378654d32b80da32b0e950d","b70042a8a492f7054d480ccdd2be9796510d4327"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73d8d559120669b47658108d818b637df5456ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","b70042a8a492f7054d480ccdd2be9796510d4327","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}