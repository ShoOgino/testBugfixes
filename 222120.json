{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0351e5a64998aa87ebea3be11fca66075eb1b0","date":1484206200,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout, metricNameStrategy);\n\n  }\n\n","sourceOld":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout, metricNameStrategy);\n\n  }\n\n","sourceOld":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c3e653c3daffe5784c647ee85d0fcb16639d5a","date":1492147999,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n    int maxRecoveryThreads = UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    Object mrt = nl.remove(\"maxRecoveryThreads\");\n    if (mrt != null)  {\n      maxRecoveryThreads = parseInt(\"maxRecoveryThreads\", mrt.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout,\n                                        distributedConnectionTimeout, metricNameStrategy, maxRecoveryThreads);\n\n  }\n\n","sourceOld":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout, metricNameStrategy);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n    int maxRecoveryThreads = UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    Object mrt = nl.remove(\"maxRecoveryThreads\");\n    if (mrt != null)  {\n      maxRecoveryThreads = parseInt(\"maxRecoveryThreads\", mrt.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout,\n                                        distributedConnectionTimeout, metricNameStrategy, maxRecoveryThreads);\n\n  }\n\n","sourceOld":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout, distributedConnectionTimeout, metricNameStrategy);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50942b1c1dd9db22a1348dd0fb05377268b15dd9","date":1535808015,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadUpdateConfig(NamedList[Object],boolean).mjava","sourceNew":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = HttpClientUtil.DEFAULT_MAXCONNECTIONS;\n    int maxUpdateConnectionsPerHost = HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST;\n    int distributedSocketTimeout = HttpClientUtil.DEFAULT_SO_TIMEOUT;\n    int distributedConnectionTimeout = HttpClientUtil.DEFAULT_CONNECT_TIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n    int maxRecoveryThreads = UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    Object mrt = nl.remove(\"maxRecoveryThreads\");\n    if (mrt != null)  {\n      maxRecoveryThreads = parseInt(\"maxRecoveryThreads\", mrt.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout,\n                                        distributedConnectionTimeout, metricNameStrategy, maxRecoveryThreads);\n\n  }\n\n","sourceOld":"  private static UpdateShardHandlerConfig loadUpdateConfig(NamedList<Object> nl, boolean alwaysDefine) {\n\n    if (nl == null && !alwaysDefine)\n      return null;\n\n    if (nl == null)\n      return UpdateShardHandlerConfig.DEFAULT;\n\n    boolean defined = false;\n\n    int maxUpdateConnections = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS;\n    int maxUpdateConnectionsPerHost = UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST;\n    int distributedSocketTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATESOTIMEOUT;\n    int distributedConnectionTimeout = UpdateShardHandlerConfig.DEFAULT_DISTRIBUPDATECONNTIMEOUT;\n    String metricNameStrategy = UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY;\n    int maxRecoveryThreads = UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS;\n\n    Object muc = nl.remove(\"maxUpdateConnections\");\n    if (muc != null) {\n      maxUpdateConnections = parseInt(\"maxUpdateConnections\", muc.toString());\n      defined = true;\n    }\n\n    Object mucph = nl.remove(\"maxUpdateConnectionsPerHost\");\n    if (mucph != null) {\n      maxUpdateConnectionsPerHost = parseInt(\"maxUpdateConnectionsPerHost\", mucph.toString());\n      defined = true;\n    }\n\n    Object dst = nl.remove(\"distribUpdateSoTimeout\");\n    if (dst != null) {\n      distributedSocketTimeout = parseInt(\"distribUpdateSoTimeout\", dst.toString());\n      defined = true;\n    }\n\n    Object dct = nl.remove(\"distribUpdateConnTimeout\");\n    if (dct != null) {\n      distributedConnectionTimeout = parseInt(\"distribUpdateConnTimeout\", dct.toString());\n      defined = true;\n    }\n\n    Object mns = nl.remove(\"metricNameStrategy\");\n    if (mns != null)  {\n      metricNameStrategy = mns.toString();\n      defined = true;\n    }\n\n    Object mrt = nl.remove(\"maxRecoveryThreads\");\n    if (mrt != null)  {\n      maxRecoveryThreads = parseInt(\"maxRecoveryThreads\", mrt.toString());\n      defined = true;\n    }\n\n    if (!defined && !alwaysDefine)\n      return null;\n\n    return new UpdateShardHandlerConfig(maxUpdateConnections, maxUpdateConnectionsPerHost, distributedSocketTimeout,\n                                        distributedConnectionTimeout, metricNameStrategy, maxRecoveryThreads);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["e15199583d3635cb940942caed05132dd6c4c7c6","fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["e15199583d3635cb940942caed05132dd6c4c7c6"],"50942b1c1dd9db22a1348dd0fb05377268b15dd9":["40c3e653c3daffe5784c647ee85d0fcb16639d5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50942b1c1dd9db22a1348dd0fb05377268b15dd9"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["50942b1c1dd9db22a1348dd0fb05377268b15dd9"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","40c3e653c3daffe5784c647ee85d0fcb16639d5a","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"50942b1c1dd9db22a1348dd0fb05377268b15dd9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}