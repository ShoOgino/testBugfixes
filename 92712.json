{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin().mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private void initializeAuthenticationPlugin() {\n    String pluginClassName = null;\n    Map<String, Object> authenticationConfig = null;\n\n    if (isZooKeeperAware()) {\n      Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n      if (securityProps != null) {\n        authenticationConfig = (Map<String, Object>) securityProps.get(\"authentication\");\n        if (authenticationConfig!=null) {\n          if (authenticationConfig.containsKey(\"class\")) {\n            pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n          } else {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n          }\n        }\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d8478e1507f625c01f80a2f9f6dccd426a95708","date":1449667316,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the filter\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      addHttpConfigurer(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.info(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a160431b6dbb348b3b55693f541e3632564094","date":1477466575,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.info(\"Authentication plugin class obtained from ZK: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.info(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {/*do nothing*/ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9095feae302a6e075ef3af4bd81b4cea22c5c71c","date":1555355370,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(readVersion(authenticationConfig),\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":["6bdcb86c29922edae9a14852e636303bc52df094"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \"+pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f912f3dd0ef8a72704a10ac2fddbae91f4db66de","date":1566155934,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics\n        (metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics(solrMetricsContext, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics\n        (metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: {}\", pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '{}': {}\"\n          , AUTHENTICATION_PLUGIN_PROP, pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: {}\", pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics(solrMetricsContext, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: \" + pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '\" +\n          AUTHENTICATION_PLUGIN_PROP + \"': \" + pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: \" + pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics(solrMetricsContext, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthenticationPlugin(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: {}\", pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '{}': {}\"\n          , AUTHENTICATION_PLUGIN_PROP, pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: {}\", pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics(solrMetricsContext, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","sourceOld":"  private synchronized void initializeAuthenticationPlugin(Map<String, Object> authenticationConfig) {\n    authenticationConfig = Utils.getDeepCopy(authenticationConfig, 4);\n    int newVersion = readVersion(authenticationConfig);\n    String pluginClassName = null;\n    if (authenticationConfig != null) {\n      if (authenticationConfig.containsKey(\"class\")) {\n        pluginClassName = String.valueOf(authenticationConfig.get(\"class\"));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'class' specified for authentication in ZK.\");\n      }\n    }\n\n    if (pluginClassName != null) {\n      log.debug(\"Authentication plugin class obtained from security.json: {}\", pluginClassName);\n    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {\n      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);\n      log.debug(\"Authentication plugin class obtained from system property '{}': {}\"\n          , AUTHENTICATION_PLUGIN_PROP, pluginClassName);\n    } else {\n      log.debug(\"No authentication plugin used.\");\n    }\n    SecurityPluginHolder<AuthenticationPlugin> old = authenticationPlugin;\n    SecurityPluginHolder<AuthenticationPlugin> authenticationPlugin = null;\n\n    if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n      log.debug(\"Authentication config not modified\");\n      return;\n    }\n\n    // Initialize the plugin\n    if (pluginClassName != null) {\n      log.info(\"Initializing authentication plugin: {}\", pluginClassName);\n      authenticationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(pluginClassName,\n              AuthenticationPlugin.class,\n              null,\n              new Class[]{CoreContainer.class},\n              new Object[]{this}));\n    }\n    if (authenticationPlugin != null) {\n      authenticationPlugin.plugin.init(authenticationConfig);\n      setupHttpClientForAuthPlugin(authenticationPlugin.plugin);\n      authenticationPlugin.plugin.initializeMetrics(solrMetricsContext, \"/authentication\");\n    }\n    this.authenticationPlugin = authenticationPlugin;\n    try {\n      if (old != null) old.plugin.close();\n    } catch (Exception e) {\n      log.error(\"Exception while attempting to close old authentication plugin\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a160431b6dbb348b3b55693f541e3632564094":["170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["f912f3dd0ef8a72704a10ac2fddbae91f4db66de"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["6bdcb86c29922edae9a14852e636303bc52df094"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["859081acf00749f5dd462772c571d611d4a4d2db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f912f3dd0ef8a72704a10ac2fddbae91f4db66de":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"859081acf00749f5dd462772c571d611d4a4d2db":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"126d6ad24eed13163ba0959435d5a80e5672837c":["859081acf00749f5dd462772c571d611d4a4d2db","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"140be51d03394488536f4aacedace29f9b318347":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["859081acf00749f5dd462772c571d611d4a4d2db","126d6ad24eed13163ba0959435d5a80e5672837c"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74a160431b6dbb348b3b55693f541e3632564094"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"74a160431b6dbb348b3b55693f541e3632564094":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["140be51d03394488536f4aacedace29f9b318347"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["859081acf00749f5dd462772c571d611d4a4d2db"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f912f3dd0ef8a72704a10ac2fddbae91f4db66de":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"859081acf00749f5dd462772c571d611d4a4d2db":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["74a160431b6dbb348b3b55693f541e3632564094"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["f912f3dd0ef8a72704a10ac2fddbae91f4db66de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","170ef9c82c0d27d4151feff316ba63fbedd91bbf","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["12ddd922ea96c1d0ea68a68506b6984a246cfb22","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}