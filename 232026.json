{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + f + \"\\\")\", raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + f + \"\\\")\", raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + f + \"\\\")\", raf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + f + \"\\\")\", raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7be25195304fffb0961b22414915e675ac3c9f6","date":1363889959,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File file = new File(getDirectory(), name);\n    try (FileChannel c = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + file.toString() + \"\\\")\", c);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + f + \"\\\")\", raf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f986320666d675a260eb4529a0c3c40595731441"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File file = new File(getDirectory(), name);\n    try (FileChannel c = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + file.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File file = new File(getDirectory(), name);\n    try (FileChannel c = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n      return new MMapIndexInput(\"MMapIndexInput(path=\\\"\" + file.toString() + \"\\\")\", c);\n    }\n  }\n\n","bugFix":["c7be25195304fffb0961b22414915e675ac3c9f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File file = new File(getDirectory(), name);\n    try (FileChannel c = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + file.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71f8255d67554b78ea0a26a5cdb916a759261aab","date":1471024473,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, new ByteBufferGuard(resourceDescription, useUnmap ? CLEANER : null));\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, new ByteBufferGuard(resourceDescription, useUnmap ? CLEANER : null));\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, new ByteBufferGuard(resourceDescription, useUnmap ? CLEANER : null));\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, new ByteBufferGuard(resourceDescription, useUnmap ? CLEANER : null));\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = directory.resolve(name);\n    try (FileChannel c = FileChannel.open(path, StandardOpenOption.READ)) {\n      final String resourceDescription = \"MMapIndexInput(path=\\\"\" + path.toString() + \"\\\")\";\n      final boolean useUnmap = getUseUnmap();\n      return ByteBufferIndexInput.newInstance(resourceDescription,\n          map(resourceDescription, c, 0, c.size()), \n          c.size(), chunkSizePower, useUnmap ? CLEANER : null, useUnmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["5a207d19eac354d649c3f0e2cce070017c78125e","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"f986320666d675a260eb4529a0c3c40595731441":["c7be25195304fffb0961b22414915e675ac3c9f6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["5a207d19eac354d649c3f0e2cce070017c78125e","71f8255d67554b78ea0a26a5cdb916a759261aab"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["5a207d19eac354d649c3f0e2cce070017c78125e"],"f4abec28b874149a7223e32cc7a01704c27790de":["f986320666d675a260eb4529a0c3c40595731441"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"c7be25195304fffb0961b22414915e675ac3c9f6":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["c7be25195304fffb0961b22414915e675ac3c9f6"],"5a207d19eac354d649c3f0e2cce070017c78125e":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","71f8255d67554b78ea0a26a5cdb916a759261aab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"f986320666d675a260eb4529a0c3c40595731441":["f4abec28b874149a7223e32cc7a01704c27790de"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"f4abec28b874149a7223e32cc7a01704c27790de":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"c7be25195304fffb0961b22414915e675ac3c9f6":["f986320666d675a260eb4529a0c3c40595731441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}