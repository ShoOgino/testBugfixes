{"path":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","commits":[{"id":"8e6deb81c6b16f810baf365f9c768efa270e8d2a","date":1349474419,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new ReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","sourceNew":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","sourceOld":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new ReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","sourceNew":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","sourceOld":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new ReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","sourceNew":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = TestUtil.randomWhitespace(r, 0, 3) +\n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = TestUtil.randomWhitespace(r, 0, 3) +\n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","sourceOld":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        _TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = _TestUtil.randomWhitespace(r, 0, 3) + \n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        _TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"004a37bd5a3c669481a588a87a9929ccce1279c7","date":1440366063,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWhitespace().mjava","sourceNew":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = randomWhitespace(r, 0, 3) +\n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        randomWhitespace(r, 1, 3);\n      final String foo_i = randomWhitespace(r, 0, 3) +\n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","sourceOld":"  public void testWhitespace() {\n    Random r = random();\n    final int iters = atLeast(30);\n\n    for (int i = 0; i < iters; i++) {\n      final boolean aliasId = r.nextBoolean();\n      final boolean aliasFoo = r.nextBoolean();\n\n      final String id = TestUtil.randomWhitespace(r, 0, 3) +\n        (aliasId ? \"aliasId:\" : \"\") +\n        \"id\" + \n        TestUtil.randomWhitespace(r, 1, 3);\n      final String foo_i = TestUtil.randomWhitespace(r, 0, 3) +\n        (aliasFoo ? \"aliasFoo:\" : \"\") +\n        \"foo_i\" + \n        TestUtil.randomWhitespace(r, 0, 3);\n\n      final String fl = id + (r.nextBoolean() ? \"\" : \",\") + foo_i;\n      ReturnFields rf = new SolrReturnFields(req(\"fl\", fl));\n\n      assertFalse(\"score (\"+fl+\")\", rf.wantsScore());\n\n      assertTrue(\"id (\"+fl+\")\", rf.wantsField(\"id\"));\n      assertTrue(\"foo_i (\"+fl+\")\", rf.wantsField(\"foo_i\"));\n\n      assertEquals(\"aliasId (\"+fl+\")\", aliasId, rf.wantsField(\"aliasId\"));\n      assertEquals(\"aliasFoo (\"+fl+\")\", aliasFoo, rf.wantsField(\"aliasFoo\"));\n\n      assertFalse(rf.wantsField(\"xxx\"));\n      assertFalse(rf.wantsAllFields());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8e6deb81c6b16f810baf365f9c768efa270e8d2a","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"004a37bd5a3c669481a588a87a9929ccce1279c7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["004a37bd5a3c669481a588a87a9929ccce1279c7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["004a37bd5a3c669481a588a87a9929ccce1279c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"004a37bd5a3c669481a588a87a9929ccce1279c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}