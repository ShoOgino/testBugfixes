{"path":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","commits":[{"id":"6fd0331972ce2197b3ea098c12464f6034c60b30","date":1259561332,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String[] germanUmlaut = { \"Töne\" };\n    String[] germanOE = { \"Toene\" };\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(new IterTokenStream(germanUmlaut));\n    TokenStream tsOE = factory.create(new IterTokenStream(germanOE));\n    assertTokEqual(BaseTokenTestCase.getTokens(tsUmlaut),\n        BaseTokenTestCase.getTokens(tsOE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String[] germanUmlaut = { \"Töne\" };\n    String[] germanOE = { \"Toene\" };\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(new IterTokenStream(germanUmlaut));\n    TokenStream tsOE = factory.create(new IterTokenStream(germanOE));\n    assertTokEqual(BaseTokenTestCase.getTokens(tsUmlaut),\n        BaseTokenTestCase.getTokens(tsOE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fd0331972ce2197b3ea098c12464f6034c60b30":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["6fd0331972ce2197b3ea098c12464f6034c60b30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6fd0331972ce2197b3ea098c12464f6034c60b30":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6fd0331972ce2197b3ea098c12464f6034c60b30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}