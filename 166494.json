{"path":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","commits":[{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d20d5e40789b1c42f4f926e3174b271256c43657"],"c26f00b574427b55127e869b935845554afde1fa":["b09c7419b92e982a901698cb401ce22ac35e4b04","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d20d5e40789b1c42f4f926e3174b271256c43657":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b09c7419b92e982a901698cb401ce22ac35e4b04"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}