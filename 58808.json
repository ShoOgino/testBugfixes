{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    Enumeration enumeration = doc.fields();\n    while (enumeration.hasMoreElements()) {\n      Field field = (Field) enumeration.nextElement();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb4c50eaa8173000ec556e906872ea29c26312e2","date":1151010727,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List l = doc.getFields();\n    for (Iterator iter = l.iterator(); iter.hasNext();) {\n      Field field = (Field) iter.next();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    Enumeration enumeration = doc.fields();\n    while (enumeration.hasMoreElements()) {\n      Field field = (Field) enumeration.nextElement();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List l = doc.getFields();\n    for (Iterator iter = l.iterator(); iter.hasNext();) {\n      Field field = (Field) iter.next();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List l = doc.getFields();\n    for (Iterator iter = l.iterator(); iter.hasNext();) {\n      Field field = (Field) iter.next();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List l = doc.getFields();\n    for (Iterator iter = l.iterator(); iter.hasNext();) {\n      Field field = (Field) iter.next();\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb4c50eaa8173000ec556e906872ea29c26312e2":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bb4c50eaa8173000ec556e906872ea29c26312e2":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}