{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTaskQueue#remove().mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTaskQueue#remove().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * get the next task. warning: not synchronized\n     *\n     * @return   Description of the Return Value\n     */\n    public Object remove()\n    {\n        FetcherTask t = null;\n        if (servers.size() > 0)\n        {\n            Queue q = (Queue) servers.next();\n            // assert(q != null && q.size() > 0)\n            t = (FetcherTask)q.remove();\n            if (q.size() == 0)\n            {\n                servers.removeCurrent();\n                q = null;\n            }\n            size--;\n        }\n        return t;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c60d9bd42b91d7cb5e45bb6398ddfb7410776f","date":1035299362,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTaskQueue#remove().mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTaskQueue#remove().mjava","sourceNew":"    /**\n     * get the next task. warning: not synchronized\n     *\n     * @return   Description of the Return Value\n     */\n    public Object remove()\n    {\n        FetcherTask t = null;\n        String start=null;\n        if (servers.size() > 0)\n        {\n//            while(true)\n//            {\n                Queue q = (Queue) servers.next();\n                String host = (String)servers.getCurrentKey();\n//                if(start == null)\n//                {\n//                    start = host;\n//                }\n//                else if(host.equals(start))\n//                {\n//                    System.out.println(\"FetcherTaskQueue: all hosts busy. waiting 1sec\");\n//                    try\n//                    {\n//                        Thread.sleep(1000);\n//                    }\n//                    catch(InterruptedException e)\n//                    {\n//                        break;\n//                    }\n//                }\n//                HostInfo hInfo = manager.getHostInfo(host);\n//                System.out.println(\"getting sync on \" + hInfo.getHostName());\n//                synchronized(hInfo.getLockMonitor())\n//                {\n//                    if(!hInfo.isBusy())\n//                    {\n//                        System.out.println(\"FetcherTaskQueue: host \" + host + \" ok\");\n//                        hInfo.obtainLock(); // decreased in FetcherTask\n                        // assert(q != null && q.size() > 0)\n                        t = (FetcherTask)q.remove();\n                        if (q.size() == 0)\n                        {\n                            servers.removeCurrent();\n                            q = null;\n                        }\n                        size--;\n//                        break;\n//                    }\n//                    else\n//                    {\n//                        System.out.println(\"FetcherTaskQueue: host \" + host + \" is busy. next...\");\n//                    }\n//                }\n//            }\n        }\n        return t;\n    }\n\n","sourceOld":"    /**\n     * get the next task. warning: not synchronized\n     *\n     * @return   Description of the Return Value\n     */\n    public Object remove()\n    {\n        FetcherTask t = null;\n        if (servers.size() > 0)\n        {\n            Queue q = (Queue) servers.next();\n            // assert(q != null && q.size() > 0)\n            t = (FetcherTask)q.remove();\n            if (q.size() == 0)\n            {\n                servers.removeCurrent();\n                q = null;\n            }\n            size--;\n        }\n        return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTaskQueue#remove().mjava","sourceNew":null,"sourceOld":"    /**\n     * get the next task. warning: not synchronized\n     *\n     * @return   Description of the Return Value\n     */\n    public Object remove()\n    {\n        FetcherTask t = null;\n        String start=null;\n        if (servers.size() > 0)\n        {\n//            while(true)\n//            {\n                Queue q = (Queue) servers.next();\n                String host = (String)servers.getCurrentKey();\n//                if(start == null)\n//                {\n//                    start = host;\n//                }\n//                else if(host.equals(start))\n//                {\n//                    System.out.println(\"FetcherTaskQueue: all hosts busy. waiting 1sec\");\n//                    try\n//                    {\n//                        Thread.sleep(1000);\n//                    }\n//                    catch(InterruptedException e)\n//                    {\n//                        break;\n//                    }\n//                }\n//                HostInfo hInfo = manager.getHostInfo(host);\n//                System.out.println(\"getting sync on \" + hInfo.getHostName());\n//                synchronized(hInfo.getLockMonitor())\n//                {\n//                    if(!hInfo.isBusy())\n//                    {\n//                        System.out.println(\"FetcherTaskQueue: host \" + host + \" ok\");\n//                        hInfo.obtainLock(); // decreased in FetcherTask\n                        // assert(q != null && q.size() > 0)\n                        t = (FetcherTask)q.remove();\n                        if (q.size() == 0)\n                        {\n                            servers.removeCurrent();\n                            q = null;\n                        }\n                        size--;\n//                        break;\n//                    }\n//                    else\n//                    {\n//                        System.out.println(\"FetcherTaskQueue: host \" + host + \" is busy. next...\");\n//                    }\n//                }\n//            }\n        }\n        return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["e0c60d9bd42b91d7cb5e45bb6398ddfb7410776f"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"],"e0c60d9bd42b91d7cb5e45bb6398ddfb7410776f":["05d36e0b328ec96237035fbcca240e73631396e5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["e0c60d9bd42b91d7cb5e45bb6398ddfb7410776f"],"e0c60d9bd42b91d7cb5e45bb6398ddfb7410776f":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}