{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3db976a3161538fa08d91ca45cc2072fe5ba0c8b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = 0.0f, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3db976a3161538fa08d91ca45cc2072fe5ba0c8b","date":1476451770,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = 0.0f, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = 0.0f, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY;\n      double sum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = (float) (max + (sum - max) * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY;\n      double sum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = (float) (max + (sum - max) * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY, sum = 0.0f;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = max + (sum - max) * tieBreakerMultiplier;\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = 0;\n      double otherSum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          float score = e.getValue();\n          if (score >= max) {\n            otherSum += max;\n            max = score;\n          } else {\n            otherSum += score;\n          }\n        }\n      }\n      if (match) {\n        final float score = (float) (max + otherSum * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = Float.NEGATIVE_INFINITY;\n      double sum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      if (match) {\n        final float score = (float) (max + (sum - max) * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      double max = 0;\n      double otherSum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          double score = e.getValue().doubleValue();\n          if (score >= max) {\n            otherSum += max;\n            max = score;\n          } else {\n            otherSum += score;\n          }\n        }\n      }\n      if (match) {\n        final float score = (float) (max + otherSum * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      boolean match = false;\n      float max = 0;\n      double otherSum = 0;\n      List<Explanation> subs = new ArrayList<>();\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          match = true;\n          subs.add(e);\n          float score = e.getValue();\n          if (score >= max) {\n            otherSum += max;\n            max = score;\n          } else {\n            otherSum += score;\n          }\n        }\n      }\n      if (match) {\n        final float score = (float) (max + otherSum * tieBreakerMultiplier);\n        final String desc = tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\";\n        return Explanation.match(score, desc, subs);\n      } else {\n        return Explanation.noMatch(\"No matching clause\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["3db976a3161538fa08d91ca45cc2072fe5ba0c8b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["3db976a3161538fa08d91ca45cc2072fe5ba0c8b","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"4874ce841615411ddc4f5998fc9db9a533827976":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["4874ce841615411ddc4f5998fc9db9a533827976"],"3db976a3161538fa08d91ca45cc2072fe5ba0c8b":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","3db976a3161538fa08d91ca45cc2072fe5ba0c8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["4874ce841615411ddc4f5998fc9db9a533827976"],"4874ce841615411ddc4f5998fc9db9a533827976":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3db976a3161538fa08d91ca45cc2072fe5ba0c8b":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["3db976a3161538fa08d91ca45cc2072fe5ba0c8b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}