{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    newReader.writer = writer;\n    newReader.hasDeletions = hasDeletions;\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8414cdacb05e1277df96a30710f570f4251d9a","date":1323040348,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    assert openReadOnly;\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    newReader.writer = writer;\n    newReader.hasDeletions = hasDeletions;\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    newReader.writer = writer;\n    newReader.hasDeletions = hasDeletions;\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef5d5589290633d3913407e8e8320c227949ff40","date":1323041363,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    assert openReadOnly;\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    newReader.writer = writer;\n    newReader.hasDeletions = hasDeletions;\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    // doOpenIfChanged calls ensureOpen\n    DirectoryReader newReader = doOpenIfChanged((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n    assert newReader.readerFinishedListeners != null;\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef5d5589290633d3913407e8e8320c227949ff40":["4b8414cdacb05e1277df96a30710f570f4251d9a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","ef5d5589290633d3913407e8e8320c227949ff40"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ef5d5589290633d3913407e8e8320c227949ff40":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","e1f693ce507c40f77e3a92acd16c6b79cdd730e4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["ef5d5589290633d3913407e8e8320c227949ff40"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["4b8414cdacb05e1277df96a30710f570f4251d9a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}