{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random, reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       false);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              false);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"),\n                                                                      false);\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    FieldsEnum fields = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fields.next()) != null) {\n      Terms terms = fields.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                       DocHelper.TEXT_FIELD_1_KEY,\n                                       new BytesRef(\"field\"),\n                                       MultiFields.getLiveDocs(reader),\n                                       null,\n                                       0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = _TestUtil.docs(random(), reader,\n                              DocHelper.NO_NORMS_KEY,\n                              new BytesRef(DocHelper.NO_NORMS_TEXT),\n                              MultiFields.getLiveDocs(reader),\n                              null,\n                              0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    DocsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    DocsAndPositionsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        MultiFields.getLiveDocs(reader),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      MultiFields.getLiveDocs(reader),\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    final Collection<String> fields = MultiFields.getIndexedFields(reader);\n    for (String field : fields) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    Fields fields = MultiFields.getFields(reader);\n    for (String field : fields) {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    final Collection<String> fields = FieldInfos.getIndexedFields(reader);\n    for (String field : fields) {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiTerms.getTermPostingsEnum(reader,\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    final Collection<String> fields = MultiFields.getIndexedFields(reader);\n    for (String field : fields) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator();\n      while(termsEnum.next() != null) {\n        BytesRef term = termsEnum.term();\n        assertTrue(term != null);\n        String fieldValue = (String) DocHelper.nameValues.get(field);\n        assertTrue(fieldValue.indexOf(term.utf8ToString()) != -1);\n      }\n    }\n    \n    PostingsEnum termDocs = TestUtil.docs(random(), reader,\n        DocHelper.TEXT_FIELD_1_KEY,\n        new BytesRef(\"field\"),\n        null,\n        0);\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    termDocs = TestUtil.docs(random(), reader,\n        DocHelper.NO_NORMS_KEY,\n        new BytesRef(DocHelper.NO_NORMS_TEXT),\n        null,\n        0);\n\n    assertTrue(termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n\n    \n    PostingsEnum positions = MultiFields.getTermPositionsEnum(reader,\n                                                                      DocHelper.TEXT_FIELD_1_KEY,\n                                                                      new BytesRef(\"field\"));\n    // NOTE: prior rev of this test was failing to first\n    // call next here:\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(positions.docID() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["02331260bb246364779cb6f04919ca47900d01bb"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["6613659748fe4411a7dcf85266e55db1f95f7315","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"02331260bb246364779cb6f04919ca47900d01bb":["fb07ab105350b80ed9d63ca64b117084ed7391bc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}