{"path":"solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput#writeBytes(byte[],int,int).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    if (getFilePointer() + length > fileLength) {\n      fileLength = getFilePointer() + length;\n    }\n    if (length <= bufferSize - bufferPosition) {\n      // the buffer contains enough space to satisfy this request\n      if (length > 0) { // to allow b to be null if len is 0...\n        System.arraycopy(b, offset, buffer, bufferPosition, length);\n      }\n      bufferPosition += length;\n      if (bufferPosition > bufferLength) {\n        bufferLength = bufferPosition;\n      }\n    } else {\n      // the buffer does not have enough space. First buffer all we've got.\n      int available = bufferSize - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(b, offset, buffer, bufferPosition, available);\n        offset += available;\n        length -= available;\n        bufferPosition = bufferSize;\n        bufferLength = bufferSize;\n      }\n      \n      flushBufferToCache();\n      \n      // and now, write the remaining 'length' bytes:\n      if (length < bufferSize) {\n        // If the amount left to write is small enough do it in the usual\n        // buffered way:\n        System.arraycopy(b, offset, buffer, 0, length);\n        bufferPosition = length;\n        bufferLength = length;\n      } else {\n        // The amount left to write is larger than the buffer\n        // there's no performance reason not to write it all\n        // at once.\n        writeInternal(b, offset, length);\n        bufferStart += length;\n        bufferPosition = 0;\n        bufferLength = 0;\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/ReusedBufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    if (getFilePointer() + length > fileLength) {\n      fileLength = getFilePointer() + length;\n    }\n    if (length <= bufferSize - bufferPosition) {\n      // the buffer contains enough space to satisfy this request\n      if (length > 0) { // to allow b to be null if len is 0...\n        System.arraycopy(b, offset, buffer, bufferPosition, length);\n      }\n      bufferPosition += length;\n      if (bufferPosition > bufferLength) {\n        bufferLength = bufferPosition;\n      }\n    } else {\n      // the buffer does not have enough space. First buffer all we've got.\n      int available = bufferSize - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(b, offset, buffer, bufferPosition, available);\n        offset += available;\n        length -= available;\n        bufferPosition = bufferSize;\n        bufferLength = bufferSize;\n      }\n      \n      flushBufferToCache();\n      \n      // and now, write the remaining 'length' bytes:\n      if (length < bufferSize) {\n        // If the amount left to write is small enough do it in the usual\n        // buffered way:\n        System.arraycopy(b, offset, buffer, 0, length);\n        bufferPosition = length;\n        bufferLength = length;\n      } else {\n        // The amount left to write is larger than the buffer\n        // there's no performance reason not to write it all\n        // at once.\n        writeInternal(b, offset, length);\n        bufferStart += length;\n        bufferPosition = 0;\n        bufferLength = 0;\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}