{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","commits":[{"id":"f077558a20149ff0f23405cbae03daeb5aa5a29d","date":1415893048,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter, false), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aeebe27bce18b879b80f68494c52cda1021b5705","date":1417792137,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter, false), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter, false), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter, false), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery;\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new TermQuery(new Term(FIELD_NAME, \"parent\")));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new QueryWrapperFilter(\n          new TermQuery(new Term(FIELD_NAME, \"parent\"))));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new TermQuery(new Term(FIELD_NAME, \"parent\")));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits.value; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new TermQuery(new Term(FIELD_NAME, \"parent\")));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"944feda4f2ab2e2de62f308b3cbb6ba6953902ef","date":1539867181,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testToChildBlockJoinQuery().mjava","sourceNew":null,"sourceOld":"  public void testToChildBlockJoinQuery() throws Exception {\n    BitSetProducer parentFilter = new QueryBitSetProducer(\n        new TermQuery(new Term(FIELD_NAME, \"parent\")));\n    \n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new ToChildBlockJoinQuery(new TermQuery(\n        new Term(FIELD_NAME, \"parent\")), parentFilter), Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"child\")), Occur.MUST);\n    query = booleanQuery.build();\n    \n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits.value; i++) {\n      String text = \"parent document\";\n      final int docId = hits.scoreDocs[i].doc;\n      TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n      \n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n    }\n    \n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"fb17639909a369c1e64866842e5c213440acc17e":["aeebe27bce18b879b80f68494c52cda1021b5705"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["4b3915945926c0bf7def01b0c504977709d3aed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["fb17639909a369c1e64866842e5c213440acc17e"],"f077558a20149ff0f23405cbae03daeb5aa5a29d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"4b3915945926c0bf7def01b0c504977709d3aed3":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"aeebe27bce18b879b80f68494c52cda1021b5705":["f077558a20149ff0f23405cbae03daeb5aa5a29d"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4b3915945926c0bf7def01b0c504977709d3aed3"],"fb17639909a369c1e64866842e5c213440acc17e":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f077558a20149ff0f23405cbae03daeb5aa5a29d"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f077558a20149ff0f23405cbae03daeb5aa5a29d":["aeebe27bce18b879b80f68494c52cda1021b5705"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"4b3915945926c0bf7def01b0c504977709d3aed3":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"aeebe27bce18b879b80f68494c52cda1021b5705":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}