{"path":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","commits":[{"id":"976d98a0401f84b6ea0d80eb0066fd081c51107d","date":1224355104,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\" });\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n\n    assertNull(filter.next(new Token()));\n    \n    // should have something after the stream\n    stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\", \"hello\" });\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertNotNull(filter.next(new Token()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa80fea59ec56244d5ba2f55be0164acd59a0b","date":1250264608,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\" });\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n\n    assertEquals(\"12345\", filter.next(new Token()).term());\n    \n    // should have something after the stream\n    stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\", \"hello\" });\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertNotNull(filter.next(new Token()));\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\" });\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n\n    assertNull(filter.next(new Token()));\n    \n    // should have something after the stream\n    stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\", \"hello\" });\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertNotNull(filter.next(new Token()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\" });\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n\n    assertEquals(\"12345\", filter.next(new Token()).term());\n    \n    // should have something after the stream\n    stream = new IterTokenStream(\n        new String[] { \"12345\", \"#$%@#^%&\", \"hello\" });\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertNotNull(filter.next(new Token()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"src/test/org/apache/solr/analysis/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa80fea59ec56244d5ba2f55be0164acd59a0b":["976d98a0401f84b6ea0d80eb0066fd081c51107d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"976d98a0401f84b6ea0d80eb0066fd081c51107d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["d4aa80fea59ec56244d5ba2f55be0164acd59a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4aa80fea59ec56244d5ba2f55be0164acd59a0b":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["976d98a0401f84b6ea0d80eb0066fd081c51107d"],"976d98a0401f84b6ea0d80eb0066fd081c51107d":["d4aa80fea59ec56244d5ba2f55be0164acd59a0b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}