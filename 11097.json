{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","commits":[{"id":"b50e78d06f282e14c7918c600c1f098b14171ead","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(\"sort\"); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(\"sort\", sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(\"sort\"); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(\"sort\", sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(\"sort\"); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(\"sort\", sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(\"sort\"); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(\"sort\", sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = (new CloudSolrClient.Builder()).withZkHost(zkHost).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = (new CloudSolrClient.Builder()).withZkHost(zkHost).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = (new CloudSolrClient.Builder()).withZkHost(zkHost).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = (new CloudSolrClient.Builder()).withZkHost(zkHost).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["63a1978c6710c767fa084741e3d6424840003a62"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params, SolrRequest.METHOD.POST);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n\n    params.remove(SORT); //Override any sort.\n\n    Random rand = new Random();\n    int seed = rand.nextInt();\n\n    String sortField = \"random_\"+seed;\n    params.add(SORT, sortField+\" asc\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["b50e78d06f282e14c7918c600c1f098b14171ead"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6f4c5d3859373c3a74734e85efa122b17514e3e8","63a1978c6710c767fa084741e3d6424840003a62"],"b50e78d06f282e14c7918c600c1f098b14171ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a1978c6710c767fa084741e3d6424840003a62":["01624b85de12fb02335810bdf325124e59040772"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b50e78d06f282e14c7918c600c1f098b14171ead"],"01624b85de12fb02335810bdf325124e59040772":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["01624b85de12fb02335810bdf325124e59040772","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b50e78d06f282e14c7918c600c1f098b14171ead":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b50e78d06f282e14c7918c600c1f098b14171ead","0e15955b4980562a0c1c81d08654904f3fadb83b"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}