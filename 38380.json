{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","commits":[{"id":"8da82893d5e353d2449455b404921423e0ebc20c","date":1393049956,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<String>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    FileInputStream is = new FileInputStream(new File(ExternalPaths.SOURCE_HOME, \"solrj/src/test-files/solrj/updateReq_4_5.bin\"));\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a475a1c165e02515bff766b3b7be0c42edf1870c","date":1393099333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<String>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<String>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    FileInputStream is = new FileInputStream(new File(ExternalPaths.SOURCE_HOME, \"solrj/src/test-files/solrj/updateReq_4_5.bin\"));\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<String>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\", foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, (document, req, commitWithin, override) -> {\n      if (commitWithin == null) {\n        req.add(document);\n      }\n      System.err.println(\"Doc\" + document + \" ,commitWithin:\" + commitWithin + \" , override:\" + override);\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\" + i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0),\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0),\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testBackCompat4_5().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\", foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, (document, req, commitWithin, override) -> {\n      if (commitWithin == null) {\n        req.add(document);\n      }\n      System.err.println(\"Doc\" + document + \" ,commitWithin:\" + commitWithin + \" , override:\" + override);\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\" + i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0),\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0),\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"8da82893d5e353d2449455b404921423e0ebc20c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["8da82893d5e353d2449455b404921423e0ebc20c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["8d35c84fdef07284c122012ca4000d3b7285a66e","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acd9883560fd89e6448b2b447302fe543040cd4f"],"8da82893d5e353d2449455b404921423e0ebc20c":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8da82893d5e353d2449455b404921423e0ebc20c"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}