{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","commits":[{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>5\");\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">5\", ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4b4a0745c88f26fb0cb08db12df3db00e49df3b8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>5\");\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">5\", ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>5\");\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">5\", ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32107162655f090081799924aa5b12d561689fcc","date":1434560890,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>5\");\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">5\", ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","4b4a0745c88f26fb0cb08db12df3db00e49df3b8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","date":1472818982,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":["32107162655f090081799924aa5b12d561689fcc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b4a0745c88f26fb0cb08db12df3db00e49df3b8","date":1473917688,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","32107162655f090081799924aa5b12d561689fcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ec497284686a1567bffcc0c843a8b9eaae57b","date":1475677162,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB2);\n    String rulesColl = \"modifyColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setNumShards(1)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\"+minGB1)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", rulesColl);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"rule\", \"cores:<5\");\n      p.add(\"rule\", \"node:*,replica:1\");\n      p.add(\"rule\", \"freedisk:>\"+minGB2);\n      p.add(\"autoAddReplicas\", \"true\");\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n\n\n    for (int i = 0; i < 20; i++) {\n      DocCollection rulesCollection = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), rulesColl);\n      log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n      List list = (List) rulesCollection.get(\"rule\");\n      assertEquals(3, list.size());\n      if (!\"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n        if (i < 19) {\n          Thread.sleep(100);\n          continue;\n        }\n\n      }\n      assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n      assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n      assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n      assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n      list = (List) rulesCollection.get(\"snitch\");\n      assertEquals(1, list.size());\n      assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eade42881b2b73694a2b065cce4d6367a1870676","date":1564191666,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    log.info(\"version_of_coll {}  \", rulesCollection.getZNodeVersion());\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals(\"<5\", ((Map) list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB2, ((Map) list.get(2)).get(\"freedisk\"));\n    assertEquals(\"true\", String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", ((Map) list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5bcf88d0563d08e5b68c127842dd8e7d7e81338","date":1575519379,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   @SuppressWarnings({\"rawtypes\"})\n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   @SuppressWarnings({\"rawtypes\"})\n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n\n    final long minGB1 = (random().nextBoolean() ? 1 : 0);\n    final long minGB2 = 5;\n    assumeTrue(\"testModifyColl needs minGB1=\"+minGB1+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB1);\n    assumeTrue(\"testModifyColl needs minGB2=\"+minGB2+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB2);\n\n    String rulesColl = \"modifyColl\";\n    CollectionAdminRequest.createCollection(rulesColl, \"conf\", 1, 2)\n        .setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>\" + minGB1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n\n    // TODO: Make a MODIFYCOLLECTION SolrJ class\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(\"collection\", rulesColl);\n    p.add(\"action\", \"MODIFYCOLLECTION\");\n    p.add(\"rule\", \"cores:<5\");\n    p.add(\"rule\", \"node:*,replica:1\");\n    p.add(\"rule\", \"freedisk:>\"+minGB2);\n    p.add(\"autoAddReplicas\", \"true\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n\n    waitForState(\"Should have found updated rules in DocCollection\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   if (null == rulesCollection) {\n                     return false;\n                   } \n                   @SuppressWarnings({\"rawtypes\"})\n                   List list = (List) rulesCollection.get(\"rule\");\n                   if (null == list || 3 != list.size()) {\n                     return false;\n                   }\n                   if (! \"<5\".equals(((Map) list.get(0)).get(\"cores\"))) {\n                     return false;\n                   }\n                   if (! \"1\".equals(((Map) list.get(1)).get(\"replica\"))) {\n                     return false;\n                   }\n                   if (! (\">\"+minGB2).equals(((Map) list.get(2)).get(\"freedisk\"))) {\n                     return false;\n                   }\n                   if (! \"true\".equals(String.valueOf(rulesCollection.getProperties().get(\"autoAddReplicas\")))) {\n                     return false;\n                   }\n                   list = (List) rulesCollection.get(\"snitch\");\n                   if (null == list || 1 != list.size()) {\n                     return false;\n                   }\n                   if (! \"ImplicitSnitch\".equals(((Map) list.get(0)).get(\"class\"))) {\n                     return false;\n                   }\n                   return true;\n                 });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b4a0745c88f26fb0cb08db12df3db00e49df3b8":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["32107162655f090081799924aa5b12d561689fcc"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"32107162655f090081799924aa5b12d561689fcc":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["eade42881b2b73694a2b065cce4d6367a1870676","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"82ac6146556cfb813fae76783544007fc3aaa34d":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"bc8f206328a706450934717bec7ccc22ad166fc0":["32107162655f090081799924aa5b12d561689fcc","5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82ac6146556cfb813fae76783544007fc3aaa34d","eade42881b2b73694a2b065cce4d6367a1870676"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["32107162655f090081799924aa5b12d561689fcc","82ac6146556cfb813fae76783544007fc3aaa34d"],"eade42881b2b73694a2b065cce4d6367a1870676":["82ac6146556cfb813fae76783544007fc3aaa34d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["32107162655f090081799924aa5b12d561689fcc","4b4a0745c88f26fb0cb08db12df3db00e49df3b8"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["eade42881b2b73694a2b065cce4d6367a1870676"]},"commit2Childs":{"4b4a0745c88f26fb0cb08db12df3db00e49df3b8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["4b4a0745c88f26fb0cb08db12df3db00e49df3b8","bc8f206328a706450934717bec7ccc22ad166fc0"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"32107162655f090081799924aa5b12d561689fcc":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"82ac6146556cfb813fae76783544007fc3aaa34d":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","eade42881b2b73694a2b065cce4d6367a1870676"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"eade42881b2b73694a2b065cce4d6367a1870676":["a90f561fc609ec007ba18b10dea9191dbbd71831","f8061ddd97f3352007d927dae445884a6f3d857b","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["82ac6146556cfb813fae76783544007fc3aaa34d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["32107162655f090081799924aa5b12d561689fcc"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a90f561fc609ec007ba18b10dea9191dbbd71831","aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a90f561fc609ec007ba18b10dea9191dbbd71831","bc8f206328a706450934717bec7ccc22ad166fc0","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}