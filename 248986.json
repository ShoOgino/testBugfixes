{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","commits":[{"id":"b2a6913ca906832d1ef58d72498167acb00a7e4f","date":1330499260,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void persist(Properties props) {\n    Properties existing = readIndexerProperties();\n    existing.putAll(props);\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void persist(Properties props) {\n    Properties existing = readIndexerProperties();\n    existing.putAll(props);\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Properties props) {\n    Properties existing = readIndexerProperties();\n    existing.putAll(props);\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void persist(Properties props) {\n    Properties existing = readIndexerProperties();\n    existing.putAll(props);\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b2a6913ca906832d1ef58d72498167acb00a7e4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b2a6913ca906832d1ef58d72498167acb00a7e4f","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2a6913ca906832d1ef58d72498167acb00a7e4f","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}