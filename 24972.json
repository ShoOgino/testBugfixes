{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = IndexReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["cfd641edd796340315609425e9f70819e6d9ef0e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","cfd641edd796340315609425e9f70819e6d9ef0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cfd641edd796340315609425e9f70819e6d9ef0e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}