{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"    /** Recursively examines the given query list for identical structure in all queries. */\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"    /** Recursively examines the given query list for identical structure in all queries. */\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97","date":1492643011,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","sourceNew":"    /**\n     * Recursively examines the given query list for identical structure in all queries.\n     * Boosts on BoostQuery-s are ignored, and the contained queries are instead used as the basis for comparison.\n     **/\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      if (firstQuery instanceof BoostQuery) {\n        firstQuery = ((BoostQuery)firstQuery).getQuery(); // ignore boost; compare contained query\n      }\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery instanceof BoostQuery) {\n          nthQuery = ((BoostQuery)nthQuery).getQuery();\n        }\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","sourceOld":"    /** Recursively examines the given query list for identical structure in all queries. */\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#allSameQueryStructure(List[Query]).mjava","sourceNew":"    /**\n     * Recursively examines the given query list for identical structure in all queries.\n     * Boosts on BoostQuery-s are ignored, and the contained queries are instead used as the basis for comparison.\n     **/\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      if (firstQuery instanceof BoostQuery) {\n        firstQuery = ((BoostQuery)firstQuery).getQuery(); // ignore boost; compare contained query\n      }\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery instanceof BoostQuery) {\n          nthQuery = ((BoostQuery)nthQuery).getQuery();\n        }\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","sourceOld":"    /** Recursively examines the given query list for identical structure in all queries. */\n    private boolean allSameQueryStructure(List<Query> lst) {\n      boolean allSame = true;\n      Query firstQuery = lst.get(0);\n      for (int n = 1 ; n < lst.size(); ++n) {\n        Query nthQuery = lst.get(n);\n        if (nthQuery.getClass() != firstQuery.getClass()) {\n          allSame = false;\n          break;\n        }\n        if (firstQuery instanceof BooleanQuery) {\n          List<BooleanClause> firstBooleanClauses = ((BooleanQuery)firstQuery).clauses();\n          List<BooleanClause> nthBooleanClauses = ((BooleanQuery)nthQuery).clauses();\n          if (firstBooleanClauses.size() != nthBooleanClauses.size()) {\n            allSame = false;\n            break;\n          }\n          for (int c = 0 ; c < firstBooleanClauses.size() ; ++c) {\n            if (nthBooleanClauses.get(c).getQuery().getClass() != firstBooleanClauses.get(c).getQuery().getClass()\n                || nthBooleanClauses.get(c).getOccur() != firstBooleanClauses.get(c).getOccur()) {\n              allSame = false;\n              break;\n            }\n            if (firstBooleanClauses.get(c).getQuery() instanceof BooleanQuery && ! allSameQueryStructure\n                (Arrays.asList(firstBooleanClauses.get(c).getQuery(), nthBooleanClauses.get(c).getQuery()))) {\n              allSame = false;\n              break;\n            }\n          }\n        }\n      }\n      return allSame;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c03778630c4604270d88c148afb8c7de35b51d3c","d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e55782fb51a6e9789542818eb2161a3247f39ace":["d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}