{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#loadDirectoryFactory(SolrConfig,CoreContainer,String).mjava","commits":[{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#loadDirectoryFactory(SolrConfig,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new DirectoryFactory instance from the given SolrConfig and tied to the specified core container.\n   */\n  static DirectoryFactory loadDirectoryFactory(SolrConfig config, CoreContainer cc, String registryName) {\n    final PluginInfo info = config.getPluginInfo(DirectoryFactory.class.getName());\n    final DirectoryFactory dirFactory;\n    if (info != null) {\n      log.debug(info.className);\n      dirFactory = config.getResourceLoader().newInstance(info.className, DirectoryFactory.class);\n      // allow DirectoryFactory instances to access the CoreContainer\n      dirFactory.initCoreContainer(cc);\n      dirFactory.init(info.initArgs);\n    } else {\n      log.debug(\"solr.NRTCachingDirectoryFactory\");\n      dirFactory = new NRTCachingDirectoryFactory();\n      dirFactory.initCoreContainer(cc);\n    }\n    if (config.indexConfig.metricsInfo != null && config.indexConfig.metricsInfo.isEnabled()) {\n      final DirectoryFactory factory = new MetricsDirectoryFactory(cc.getMetricManager(),\n          registryName, dirFactory);\n        factory.init(config.indexConfig.metricsInfo.initArgs);\n      return factory;\n    } else {\n      return dirFactory;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#loadDirectoryFactory(SolrConfig,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new DirectoryFactory instance from the given SolrConfig and tied to the specified core container.\n   */\n  static DirectoryFactory loadDirectoryFactory(SolrConfig config, CoreContainer cc, String registryName) {\n    final PluginInfo info = config.getPluginInfo(DirectoryFactory.class.getName());\n    final DirectoryFactory dirFactory;\n    if (info != null) {\n      log.debug(info.className);\n      dirFactory = config.getResourceLoader().newInstance(info.className, DirectoryFactory.class);\n      // allow DirectoryFactory instances to access the CoreContainer\n      dirFactory.initCoreContainer(cc);\n      dirFactory.init(info.initArgs);\n    } else {\n      log.debug(\"solr.NRTCachingDirectoryFactory\");\n      dirFactory = new NRTCachingDirectoryFactory();\n      dirFactory.initCoreContainer(cc);\n    }\n    if (config.indexConfig.metricsInfo != null && config.indexConfig.metricsInfo.isEnabled()) {\n      final DirectoryFactory factory = new MetricsDirectoryFactory(cc.getMetricManager(),\n          registryName, dirFactory);\n        factory.init(config.indexConfig.metricsInfo.initArgs);\n      return factory;\n    } else {\n      return dirFactory;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e037d4cc589a2acd147ea27ffc29b19d595be53f","date":1488209547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#loadDirectoryFactory(SolrConfig,CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#loadDirectoryFactory(SolrConfig,CoreContainer,String).mjava","sourceNew":"  /**\n   * Create a new DirectoryFactory instance from the given SolrConfig and tied to the specified core container.\n   */\n  static DirectoryFactory loadDirectoryFactory(SolrConfig config, CoreContainer cc, String registryName) {\n    final PluginInfo info = config.getPluginInfo(DirectoryFactory.class.getName());\n    final DirectoryFactory dirFactory;\n    if (info != null) {\n      log.debug(info.className);\n      dirFactory = config.getResourceLoader().newInstance(info.className, DirectoryFactory.class);\n      // allow DirectoryFactory instances to access the CoreContainer\n      dirFactory.initCoreContainer(cc);\n      dirFactory.init(info.initArgs);\n    } else {\n      log.debug(\"solr.NRTCachingDirectoryFactory\");\n      dirFactory = new NRTCachingDirectoryFactory();\n      dirFactory.initCoreContainer(cc);\n    }\n    return dirFactory;\n  }\n\n","sourceOld":"  /**\n   * Create a new DirectoryFactory instance from the given SolrConfig and tied to the specified core container.\n   */\n  static DirectoryFactory loadDirectoryFactory(SolrConfig config, CoreContainer cc, String registryName) {\n    final PluginInfo info = config.getPluginInfo(DirectoryFactory.class.getName());\n    final DirectoryFactory dirFactory;\n    if (info != null) {\n      log.debug(info.className);\n      dirFactory = config.getResourceLoader().newInstance(info.className, DirectoryFactory.class);\n      // allow DirectoryFactory instances to access the CoreContainer\n      dirFactory.initCoreContainer(cc);\n      dirFactory.init(info.initArgs);\n    } else {\n      log.debug(\"solr.NRTCachingDirectoryFactory\");\n      dirFactory = new NRTCachingDirectoryFactory();\n      dirFactory.initCoreContainer(cc);\n    }\n    if (config.indexConfig.metricsInfo != null && config.indexConfig.metricsInfo.isEnabled()) {\n      final DirectoryFactory factory = new MetricsDirectoryFactory(cc.getMetricManager(),\n          registryName, dirFactory);\n        factory.init(config.indexConfig.metricsInfo.initArgs);\n      return factory;\n    } else {\n      return dirFactory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e037d4cc589a2acd147ea27ffc29b19d595be53f"],"e037d4cc589a2acd147ea27ffc29b19d595be53f":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","e037d4cc589a2acd147ea27ffc29b19d595be53f"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e037d4cc589a2acd147ea27ffc29b19d595be53f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}