{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n      int lastCollected = -1;\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        super.setScorer(AssertingScorer.getAssertingScorer(random, scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        if (inOrder || !acceptsDocsOutOfOrder()) {\n          assert doc > lastCollected : \"Out of order : \" + lastCollected + \" \" + doc;\n        }\n        in.collect(doc);\n        lastCollected = doc;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n      int lastCollected = -1;\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        super.setScorer(AssertingScorer.getAssertingScorer(random, scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        if (inOrder || !acceptsDocsOutOfOrder()) {\n          assert doc > lastCollected : \"Out of order : \" + lastCollected + \" \" + doc;\n        }\n        in.collect(doc);\n        lastCollected = doc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"023aa7229ae194442d2c4f36a9aaea1588760416","date":1421349700,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS, scoreMode()) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS, scoreMode()) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(random, in, 0, DocIdSetIterator.NO_MORE_DOCS, scoreMode()) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4","date":1558462722,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    assert context.docBase >= previousLeafMaxDoc;\n    previousLeafMaxDoc = context.docBase + context.reader().maxDoc();\n\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    final LeafCollector in = super.getLeafCollector(context);\n    final int docBase = context.docBase;\n    return new AssertingLeafCollector(in, 0, DocIdSetIterator.NO_MORE_DOCS) {\n      @Override\n      public void collect(int doc) throws IOException {\n        // check that documents are scored in order globally,\n        // not only per segment\n        assert docBase + doc >= maxDoc : \"collection is not in order: current doc=\"\n            + (docBase + doc) + \" while \" + maxDoc + \" has already been collected\";\n        super.collect(doc);\n        maxDoc = docBase + doc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["023aa7229ae194442d2c4f36a9aaea1588760416"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"023aa7229ae194442d2c4f36a9aaea1588760416":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb1ea7c2a1a6c0b29808a5562d417545dd5529e4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["e166cc9c5f45f78a8dd02332b5ac100221063fd8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cb1ea7c2a1a6c0b29808a5562d417545dd5529e4"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["023aa7229ae194442d2c4f36a9aaea1588760416"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"023aa7229ae194442d2c4f36a9aaea1588760416":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}