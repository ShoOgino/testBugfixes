{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (final SegmentEndpoint pathPoint : points) {\n            if (pathPoint.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        for (final PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane plane, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (int i = 0; i < points.size(); i++) {\n            final SegmentEndpoint pathPoint = points.get(i);\n            Membership previousEndBound = null;\n            Membership nextStartBound = null;\n            if (i > 0)\n                previousEndBound = segments.get(i-1).invertedEndCutoffPlane;\n            if (i < segments.size())\n                nextStartBound = segments.get(i).invertedStartCutoffPlane;\n            if (pathPoint.intersects(plane, bounds, previousEndBound, nextStartBound)) {\n                return true;\n            }\n        }\n\n        for (PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n\n    for (final SegmentEndpoint pathPoint : points) {\n      if (pathPoint.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (final SegmentEndpoint pathPoint : points) {\n            if (pathPoint.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        for (final PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n\n    for (final SegmentEndpoint pathPoint : points) {\n      if (pathPoint.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n\n    for (final SegmentEndpoint pathPoint : points) {\n      if (pathPoint.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n\n    for (final SegmentEndpoint pathPoint : points) {\n      if (pathPoint.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}