{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n                                                                                          \n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n    \n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n                                                                                          \n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n    \n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4aa1632edb30be45101a30485138211a97b2c5c","date":1472253048,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n                                                                                          \n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n    \n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":["faff74992839549208db29d95b9ad4a1d3846c79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n                                                                                          \n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n    \n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n                                                                                          \n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n    \n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\"); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\", \"10\", \"2\", \"4\", \"6\", \"1\", \"7\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"1\", \"3\", \"5\", \"9\");\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"9\", \"5\", \"3\", \"1\");\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"4\", \"2\", \"10\");\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"10\", \"2\", \"4\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"6\", \"8\");\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"8\", \"6\", \"7\");\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"12\", \"13\", \"11\");\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"12\");\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id_i:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id_i)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, \"5\", \"6\",\"4\", \"7\",\"3\" , \"8\",\"2\" , \"9\",\"1\" , \"10\" );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id_i desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\",   \"15\",\"14\",\"4\",   \"2\",   \"18\",\"17\",\"16\",\"10\",   \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id_i asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\",   \"10\",\"16\",\"17\",\"18\",   \"2\",   \"4\",\"14\",\"15\",   \"6\", \"1\", \"7\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\"); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\", \"10\", \"2\", \"4\", \"6\", \"1\", \"7\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"1\", \"3\", \"5\", \"9\");\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"9\", \"5\", \"3\", \"1\");\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"4\", \"2\", \"10\");\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"10\", \"2\", \"4\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"6\", \"8\");\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"8\", \"6\", \"7\");\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"12\", \"13\", \"11\");\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"12\");\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id_i:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id_i)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, \"5\", \"6\",\"4\", \"7\",\"3\" , \"8\",\"2\" , \"9\",\"1\" , \"10\" );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id_i desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\",   \"15\",\"14\",\"4\",   \"2\",   \"18\",\"17\",\"16\",\"10\",   \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id_i asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\",   \"10\",\"16\",\"17\",\"18\",   \"2\",   \"4\",\"14\",\"15\",   \"6\", \"1\", \"7\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentCustomSortTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\"); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\", \"10\", \"2\", \"4\", \"6\", \"1\", \"7\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", \"7\", \"1\", \"6\", \"4\", \"2\", \"10\", \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"1\", \"3\", \"5\", \"9\");\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"9\", \"5\", \"3\", \"1\");\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"4\", \"2\", \"10\");\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"10\", \"2\", \"4\");\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"6\", \"8\");\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"8\", \"6\", \"7\");\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"12\", \"13\", \"11\");\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"12\");\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id_i:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id_i)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, \"5\", \"6\",\"4\", \"7\",\"3\" , \"8\",\"2\" , \"9\",\"1\" , \"10\" );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id_i desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"7\", \"1\", \"6\",   \"15\",\"14\",\"4\",   \"2\",   \"18\",\"17\",\"16\",\"10\",   \"12\", \"3\", \"5\", \"9\", \"8\", \"13\", \"11\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id_i asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, \"11\", \"13\", \"8\", \"9\", \"5\", \"3\", \"12\",   \"10\",\"16\",\"17\",\"18\",   \"2\",   \"4\",\"14\",\"15\",   \"6\", \"1\", \"7\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2 \n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5 \n    index(id, \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8 \n    index(id, \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4 \n    index(id, \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9 \n    index(id, \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3 \n    index(id, \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1 \n    index(id, \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11 \n    index(id, \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10 \n    index(id, \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6 \n    index(id, \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13 \n    index(id, \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7 \n    index(id, \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12 \n    commit();\n\n    QueryResponse rsp;\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11); \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"key:id,id:text\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), \"key\", 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    \n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 1, 3, 5, 9);\n    rsp = query(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 9, 5, 3, 1);\n    \n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 4, 2, 10);\n    rsp = query(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 10, 2, 4);\n\n    // SOLR-6744\n    rsp = query(\"q\", \"text:b\", \"fl\", \"key:id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, null, null, null);\n\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 6, 8);\n    rsp = query(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 8, 6, 7);\n    \n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 12, 13, 11);\n    rsp = query(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 12);\n\n    // sanity check function sorting\n    rsp = query(\"q\", \"id:[1 TO 10]\", \"fl\", \"id\", \"rows\", \"20\",\n                \"sort\", \"abs(sub(5,id)) asc, id desc\");\n    assertFieldValues(rsp.getResults(), id, 5 , 6,4 , 7,3 , 8,2 , 9,1 , 10 );\n\n    // Add two more docs with same payload as in doc #4 \n    index(id, \"14\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n    index(id, \"15\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 })); \n\n    // Add three more docs with same payload as in doc #10\n    index(id, \"16\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"17\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c })); \n    index(id, \"18\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));\n    \n    commit();\n    \n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6,   15,14,4,   2,   18,17,16,10,   12, 3, 5, 9, 8, 13, 11);\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc, id asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12,   10,16,17,18,   2,   4,14,15,   6, 1, 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4aa1632edb30be45101a30485138211a97b2c5c":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["abb23fcc2461782ab204e61213240feb77d355aa","a4aa1632edb30be45101a30485138211a97b2c5c"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["abb23fcc2461782ab204e61213240feb77d355aa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a4aa1632edb30be45101a30485138211a97b2c5c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"abb23fcc2461782ab204e61213240feb77d355aa":["a4aa1632edb30be45101a30485138211a97b2c5c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}