{"path":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return convertCharSeq(getFirstValue( (String)key));\n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return (Set<String>) convertCharSeq(_fields.keySet());  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3665b66adafb1514bba04cd1d5c477fcaa93d592","date":1576153597,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return getFirstValue( (String)key);\n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return convertCharSeq(getFirstValue( (String)key));\n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return (Set<String>) convertCharSeq(_fields.keySet());  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return getFirstValue( (String)key);\n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      @Override\n      public Object get(Object key) { \n        return convertCharSeq(getFirstValue( (String)key));\n      }\n      \n      // Easily Supported methods\n      @Override\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      @Override\n      public Set<String>  keySet()           { return (Set<String>) convertCharSeq(_fields.keySet());  }\n      @Override\n      public int          size()             { return _fields.size();    }\n      @Override\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      @Override\n      public void clear() { throw new UnsupportedOperationException(); }\n      @Override\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      @Override\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      @Override\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      @Override\n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3665b66adafb1514bba04cd1d5c477fcaa93d592"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["df724d84dab24a0cc54bec95a8680867adc7f171","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}