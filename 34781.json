{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","commits":[{"id":"41e0d5825f76d6bd3636a0dbaf6aa020cb357334","date":1435740067,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Weight).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Weight} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Weight lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41e0d5825f76d6bd3636a0dbaf6aa020cb357334":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03e38c6374c23083c93e212a9498ff0a9c255476":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["41e0d5825f76d6bd3636a0dbaf6aa020cb357334"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e38c6374c23083c93e212a9498ff0a9c255476"]},"commit2Childs":{"41e0d5825f76d6bd3636a0dbaf6aa020cb357334":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41e0d5825f76d6bd3636a0dbaf6aa020cb357334"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}