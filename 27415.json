{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","commits":[{"id":"d631465f88a03f4c835b8afad23d09615067b978","date":1483120253,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {     \n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {     \n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","sourceNew":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {     \n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","sourceOld":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {     \n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","sourceNew":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {\n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      log.error(\"Exception running full import\", e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","sourceOld":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {     \n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testCursorMarkNoSort().mjava","sourceNew":null,"sourceOld":"  public void testCursorMarkNoSort() throws SolrServerException, IOException {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    addDocumentsToSolr(generateSolrDocuments(7));\n    try {\n      List<String> errors = Arrays.asList(\"sort='id'\", //wrong sort spec\n          \"\", //no sort spec\n          \"sort='id asc' timeout='12345'\"); // sort is fine, but set timeout\n      Collections.shuffle(errors, random());\n      String attrs = \"query='*:*' rows='2' fl='id,desc' cursorMark='true' \"\n                                                            + errors.get(0);\n      runFullImport(generateDIHConfig(attrs,\n            false));\n    } catch (Exception e) {\n      log.error(\"Exception running full import\", e);\n      fail(e.getMessage());\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d631465f88a03f4c835b8afad23d09615067b978":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d631465f88a03f4c835b8afad23d09615067b978"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d631465f88a03f4c835b8afad23d09615067b978"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d631465f88a03f4c835b8afad23d09615067b978","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d631465f88a03f4c835b8afad23d09615067b978":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}