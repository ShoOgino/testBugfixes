{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","commits":[{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertEquals(\"minorMerge: \" + timer.getCount(), 4, timer.getCount());\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertEquals(\"flush: \" + meter.getCount(), 19, meter.getCount());\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11a663cf78956908deec3d6106ec00b5171f6a5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertEquals(\"minorMerge: \" + timer.getCount(), 4, timer.getCount());\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertEquals(\"flush: \" + meter.getCount(), 19, meter.getCount());\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"603fd58374299a2c53df1929fedfb39224cc6803","date":1483957000,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertEquals(\"minorMerge: \" + timer.getCount(), 4, timer.getCount());\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertEquals(\"flush: \" + meter.getCount(), 19, meter.getCount());\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertEquals(\"minorMerge: \" + timer.getCount(), 4, timer.getCount());\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertEquals(\"flush: \" + meter.getCount(), 19, meter.getCount());\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a663cf78956908deec3d6106ec00b5171f6a5e","date":1485778881,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 20);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","bugFix":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","sourceNew":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 20);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 50);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","date":1487166948,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetricsWithDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexMetrics().mjava","sourceNew":"  @Test\n  public void testIndexMetricsWithDetails() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\"); // test mergeDetails override too\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"true\");\n    System.setProperty(\"solr.tests.metrics.directory\", \"false\");\n    System.setProperty(\"solr.tests.metrics.directoryDetails\", \"true\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 20);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    // check detailed meters\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    // check detailed meters\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexMetrics() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler uh = req.getCore().getUpdateHandler();\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    for (int i = 0; i < 1000; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", \"\" + i);\n      add.solrDoc.addField(\"foo_s\", \"foo-\" + i);\n      uh.addDoc(add);\n    }\n    uh.commit(new CommitUpdateCommand(req, false));\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n    // make sure all merges are finished\n    h.reload();\n\n    Map<String, Metric> metrics = registry.getMetrics();\n\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count() >= 12);\n    // this is variable, depending on the codec and the number of created files\n    assertTrue(metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count() > 20);\n\n    // check basic index meters\n    Timer timer = (Timer)metrics.get(\"INDEX.merge.minor\");\n    assertTrue(\"minorMerge: \" + timer.getCount(), timer.getCount() >= 3);\n    timer = (Timer)metrics.get(\"INDEX.merge.major\");\n    assertEquals(\"majorMerge: \" + timer.getCount(), 0, timer.getCount());\n    Meter meter = (Meter)metrics.get(\"INDEX.merge.major.docs\");\n    assertEquals(\"majorMergeDocs: \" + meter.getCount(), 0, meter.getCount());\n    meter = (Meter)metrics.get(\"INDEX.flush\");\n    assertTrue(\"flush: \" + meter.getCount(), meter.getCount() > 10);\n\n    // check basic directory meters\n    meter = (Meter)metrics.get(\"DIRECTORY.total.reads\");\n    assertTrue(\"totalReads\", meter.getCount() > 0);\n    meter = (Meter)metrics.get(\"DIRECTORY.total.writes\");\n    assertTrue(\"totalWrites\", meter.getCount() > 0);\n    Histogram histogram = (Histogram)metrics.get(\"DIRECTORY.total.readSizes\");\n    assertTrue(\"readSizes\", histogram.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.total.writeSizes\");\n    assertTrue(\"writeSizes\", histogram.getCount() > 0);\n    // check detailed meters\n    meter = (Meter)metrics.get(\"DIRECTORY.segments.writes\");\n    assertTrue(\"segmentsWrites\", meter.getCount() > 0);\n    histogram = (Histogram)metrics.get(\"DIRECTORY.segments.writeSizes\");\n    assertTrue(\"segmentsWriteSizes\", histogram.getCount() > 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"603fd58374299a2c53df1929fedfb39224cc6803":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["11a663cf78956908deec3d6106ec00b5171f6a5e"],"11a663cf78956908deec3d6106ec00b5171f6a5e":["603fd58374299a2c53df1929fedfb39224cc6803"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","11a663cf78956908deec3d6106ec00b5171f6a5e"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f03e4bed5023ec3ef93a771b8888cae991cf448d","603fd58374299a2c53df1929fedfb39224cc6803"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"]},"commit2Childs":{"603fd58374299a2c53df1929fedfb39224cc6803":["11a663cf78956908deec3d6106ec00b5171f6a5e","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a663cf78956908deec3d6106ec00b5171f6a5e":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["603fd58374299a2c53df1929fedfb39224cc6803","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}