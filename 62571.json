{"path":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","commits":[{"id":"1ab51a69d46b495c00b86cf406ed599035e94d70","date":1161321049,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(\" \" + words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b97548d27406e9f33187836e1de98d473a63f5d","date":1196088721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(\" \" + words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.TOKENIZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuffer sb = new StringBuffer(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(10);\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ab51a69d46b495c00b86cf406ed599035e94d70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["8b97548d27406e9f33187836e1de98d473a63f5d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"8b97548d27406e9f33187836e1de98d473a63f5d":["1ab51a69d46b495c00b86cf406ed599035e94d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1ab51a69d46b495c00b86cf406ed599035e94d70":["8b97548d27406e9f33187836e1de98d473a63f5d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab51a69d46b495c00b86cf406ed599035e94d70"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"8b97548d27406e9f33187836e1de98d473a63f5d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}