{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    }\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    }\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n          throws KeeperException, InterruptedException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"deleteReplica() : {}\", Utils.toJSONString(message));\n    }\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    //If a count is specified the strategy needs be different\n    if (message.getStr(COUNT_PROP) != null) {\n      deleteReplicaBasedOnCount(clusterState, message, results, onComplete, parallel);\n      return;\n    }\n\n\n    ocmh.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP);\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String replicaName = message.getStr(REPLICA_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Slice slice = coll.getSlice(shard);\n    if (slice == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid shard name : \" +  shard + \" in collection : \" +  collectionName);\n    }\n\n    deleteCore(slice, collectionName, replicaName, message, shard, results, onComplete,  parallel);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}