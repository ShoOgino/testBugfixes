{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","commits":[{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c27ce32f195c27953d9bfdc5eae3b2d212f3186","date":1551188777,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.CircleSegmentEndpoint#CircleSegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public CircleSegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      super(point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","760628478e121972168791a2afa6af915192c4a6"],"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c27ce32f195c27953d9bfdc5eae3b2d212f3186"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","8c27ce32f195c27953d9bfdc5eae3b2d212f3186"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}