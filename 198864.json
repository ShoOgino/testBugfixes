{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[FacetLabel]).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<FacetLabel> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<FacetLabel> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      FacetLabel cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<CategoryPath> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<CategoryPath> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      CategoryPath cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder#build(IntsRef,Iterable[FacetLabel]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Every returned {@link BytesRef} corresponds to a single partition (as\n   * defined by {@link FacetIndexingParams#getPartitionSize()}) and the key\n   * denotes the partition ID. When no partitions are defined, the returned map\n   * contains only one value.\n   * <p>\n   * <b>NOTE:</b> the {@code ordinals} array is modified by adding parent\n   * ordinals to it. Also, some encoders may sort the array and remove duplicate\n   * ordinals. Therefore you may want to invoke this method after you finished\n   * processing the array for other purposes.\n   */\n  @Override\n  public Map<String,BytesRef> build(IntsRef ordinals, Iterable<FacetLabel> categories) throws IOException {\n    int upto = ordinals.length; // since we may add ordinals to IntsRef, iterate upto original length\n\n    Iterator<FacetLabel> iter = categories.iterator();\n    for (int i = 0; i < upto; i++) {\n      int ordinal = ordinals.ints[i];\n      FacetLabel cp = iter.next();\n      OrdinalPolicy op = clp.getOrdinalPolicy(cp.components[0]);\n      if (op != OrdinalPolicy.NO_PARENTS) {\n        // need to add parents too\n        int parent = taxoWriter.getParent(ordinal);\n        if (parent > 0) {\n          // only do this if the category is not a dimension itself, otherwise, it was just discarded by the 'if' below\n          while (parent > 0) {\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n          if (op == OrdinalPolicy.ALL_BUT_DIMENSION) { // discard the last added parent, which is the dimension\n            ordinals.length--;\n          }\n        }\n      }\n    }\n    return ordinalsEncoder.encode(ordinals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}