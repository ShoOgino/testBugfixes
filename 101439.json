{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compressWithDictionary(byte[],int,int,int,DataOutput,HashTable).mjava","commits":[{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#compressWithDictionary(byte[],int,int,int,DataOutput,HashTable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compress {@code bytes[dictOff+dictLen:dictOff+dictLen+len]} into\n   * {@code out} using at most 16kB of memory.\n   * {@code bytes[dictOff:dictOff+dictLen]} will be used as a dictionary.\n   * {@code dictLen} must not be greater than 64kB, the maximum window size.\n   *\n   * {@code ht} shouldn't be shared across threads but can safely be reused.\n   */\n  public static void compressWithDictionary(byte[] bytes, int dictOff, int dictLen, int len, DataOutput out, HashTable ht) throws IOException {\n    Objects.checkFromIndexSize(dictOff, dictLen, bytes.length);\n    Objects.checkFromIndexSize(dictOff + dictLen, len, bytes.length);\n    if (dictLen > MAX_DISTANCE) {\n      throw new IllegalArgumentException(\"dictLen must not be greater than 64kB, but got \" + dictLen);\n    }\n\n    final int end = dictOff + dictLen + len;\n\n    int off = dictOff + dictLen;\n    int anchor = off;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n      ht.reset(bytes, dictOff, dictLen + len);\n      ht.initDictionary(dictLen);\n\n      main:\n      while (off <= limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          ref = ht.get(off);\n          if (ref != -1) {\n            assert ref >= dictOff && ref < off;\n            assert readInt(bytes, ref) == readInt(bytes, off);\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        int matchLen = MIN_MATCH + commonBytes(bytes, ref + MIN_MATCH, off + MIN_MATCH, limit);\n\n        // try to find a better match\n        for (int r = ht.previous(ref), min = Math.max(off - MAX_DISTANCE + 1, dictOff); r >= min; r = ht.previous(r)) {\n          assert readInt(bytes, r) == readInt(bytes, off);\n          int rMatchLen = MIN_MATCH + commonBytes(bytes, r + MIN_MATCH, off + MIN_MATCH, limit);\n          if (rMatchLen > matchLen) {\n            ref = r;\n            matchLen = rMatchLen;\n          }\n        }\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}