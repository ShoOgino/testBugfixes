{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}