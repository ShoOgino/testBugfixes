{"path":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,int).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eda42a68fb3a18d611a6e502bdbb764723a10e7d","date":1427824032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight();\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight();\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new RandomAccessWeight(this) {\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return new Bits.MatchAllBits(context.reader().maxDoc());\n      }\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new MatchAllDocsWeight();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1fcc859387ae32303c9b229af1a57eee490af7b","date":1441099430,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new RandomAccessWeight(this) {\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return new Bits.MatchAllBits(context.reader().maxDoc());\n      }\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new RandomAccessWeight(this) {\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return new Bits.MatchAllBits(context.reader().maxDoc());\n      }\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee980c3dbcdb797812ff3323dabe38770216cf1a","date":1441189115,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new ConstantScoreWeight(this) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new RandomAccessWeight(this) {\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return new Bits.MatchAllBits(context.reader().maxDoc());\n      }\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new ConstantScoreWeight(this) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) {\n    return new ConstantScoreWeight(this) {\n      @Override\n      public String toString() {\n        return \"weight(\" + MatchAllDocsQuery.this + \")\";\n      }\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));\n      }\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final float score = score();\n        final int maxDoc = context.reader().maxDoc();\n        return new BulkScorer() {\n          @Override\n          public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n            max = Math.min(max, maxDoc);\n            FakeScorer scorer = new FakeScorer();\n            scorer.score = score;\n            collector.setScorer(scorer);\n            for (int doc = min; doc < max; ++doc) {\n              scorer.doc = doc;\n              if (acceptDocs == null || acceptDocs.get(doc)) {\n                collector.collect(doc);\n              }\n            }\n            return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;\n          }\n          @Override\n          public long cost() {\n            return maxDoc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda42a68fb3a18d611a6e502bdbb764723a10e7d":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1fcc859387ae32303c9b229af1a57eee490af7b":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["eda42a68fb3a18d611a6e502bdbb764723a10e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["ee980c3dbcdb797812ff3323dabe38770216cf1a"],"ee980c3dbcdb797812ff3323dabe38770216cf1a":["b1fcc859387ae32303c9b229af1a57eee490af7b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"fab172655716b96f7e42376116235017a922de3a":["6a47d642ab24da1a811adce4bda9cc52c520ca13","eda42a68fb3a18d611a6e502bdbb764723a10e7d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ee980c3dbcdb797812ff3323dabe38770216cf1a","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"eda42a68fb3a18d611a6e502bdbb764723a10e7d":["a7f94ff172f40ff68a926d112e25b96bc38e5a27","fab172655716b96f7e42376116235017a922de3a"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["eda42a68fb3a18d611a6e502bdbb764723a10e7d","fab172655716b96f7e42376116235017a922de3a"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"b1fcc859387ae32303c9b229af1a57eee490af7b":["ee980c3dbcdb797812ff3323dabe38770216cf1a"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["b1fcc859387ae32303c9b229af1a57eee490af7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee980c3dbcdb797812ff3323dabe38770216cf1a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"fab172655716b96f7e42376116235017a922de3a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}