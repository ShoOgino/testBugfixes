{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","commits":[{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesIfNotNull(SolrParams,Map[String,Object]).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  private void copyPropertiesIfNotNull(SolrParams params, Map<String, Object> props) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX)) {\n        props.put(param, params.get(param));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  /**\n   * Copy prefixed params into a map.  There must only be one value for these parameters.\n   *\n   * @param params The source of params from which copies should be made\n   * @param props The map into which param names and values should be copied as keys and values respectively\n   * @param prefix The prefix to select.\n   * @return the map supplied in the props parameter, modified to contain the prefixed params.\n   */\n  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        final String[] values = params.getParams(param);\n        if (values.length != 1) {\n          throw new SolrException(BAD_REQUEST, \"Only one value can be present for parameter \" + param);\n        }\n        props.put(param, values[0]);\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  /**\n   * Copy prefixed params into a map.  There must only be one value for these parameters.\n   *\n   * @param params The source of params from which copies should be made\n   * @param props  The map into which param names and values should be copied as keys and values respectively\n   * @param prefix The prefix to select.\n   * @return the map supplied in the props parameter, modified to contain the prefixed params.\n   */\n  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter = params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        final String[] values = params.getParams(param);\n        if (values.length != 1) {\n          throw new SolrException(BAD_REQUEST, \"Only one value can be present for parameter \" + param);\n        }\n        props.put(param, values[0]);\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /**\n   * Copy prefixed params into a map.  There must only be one value for these parameters.\n   *\n   * @param params The source of params from which copies should be made\n   * @param props The map into which param names and values should be copied as keys and values respectively\n   * @param prefix The prefix to select.\n   * @return the map supplied in the props parameter, modified to contain the prefixed params.\n   */\n  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        final String[] values = params.getParams(param);\n        if (values.length != 1) {\n          throw new SolrException(BAD_REQUEST, \"Only one value can be present for parameter \" + param);\n        }\n        props.put(param, values[0]);\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}