{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","commits":[{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    if (leaderZkNodeParentVersion != null) {\n      try {\n        // We need to be careful and make sure we *only* delete our own leader registration node.\n        // We do this by using a multi and ensuring the parent znode of the leader registration node\n        // matches the version we expect - there is a setData call that increments the parent's znode\n        // version whenever a leader registers.\n        log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n        List<Op> ops = new ArrayList<>(2);\n        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n        ops.add(Op.delete(leaderPath, -1));\n        zkClient.multi(ops, true);\n      } catch (KeeperException.NoNodeException nne) {\n        // no problem\n        log.info(\"No leader registration node found to remove: {}\", leaderPath);\n      } catch (KeeperException.BadVersionException bve) {\n        log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n        // no problem\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n      leaderZkNodeParentVersion = null;\n    } else {\n      log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n    }\n    super.cancelElection();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ea01e15f477524516b07b300a3ae03d1bec9bc","date":1455919598,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    if (leaderZkNodeParentVersion != null) {\n      try {\n        // We need to be careful and make sure we *only* delete our own leader registration node.\n        // We do this by using a multi and ensuring the parent znode of the leader registration node\n        // matches the version we expect - there is a setData call that increments the parent's znode\n        // version whenever a leader registers.\n        log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n        List<Op> ops = new ArrayList<>(2);\n        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n        ops.add(Op.delete(leaderPath, -1));\n        zkClient.multi(ops, true);\n      } catch (KeeperException.NoNodeException nne) {\n        // no problem\n        log.info(\"No leader registration node found to remove: {}\", leaderPath);\n      } catch (KeeperException.BadVersionException bve) {\n        log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n        // no problem\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n      leaderZkNodeParentVersion = null;\n    } else {\n      log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    if (leaderZkNodeParentVersion != null) {\n      try {\n        // We need to be careful and make sure we *only* delete our own leader registration node.\n        // We do this by using a multi and ensuring the parent znode of the leader registration node\n        // matches the version we expect - there is a setData call that increments the parent's znode\n        // version whenever a leader registers.\n        log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n        List<Op> ops = new ArrayList<>(2);\n        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n        ops.add(Op.delete(leaderPath, -1));\n        zkClient.multi(ops, true);\n      } catch (KeeperException.NoNodeException nne) {\n        // no problem\n        log.info(\"No leader registration node found to remove: {}\", leaderPath);\n      } catch (KeeperException.BadVersionException bve) {\n        log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n        // no problem\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n      leaderZkNodeParentVersion = null;\n    } else {\n      log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n    }\n    super.cancelElection();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857","date":1456507932,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.info(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    if (leaderZkNodeParentVersion != null) {\n      try {\n        // We need to be careful and make sure we *only* delete our own leader registration node.\n        // We do this by using a multi and ensuring the parent znode of the leader registration node\n        // matches the version we expect - there is a setData call that increments the parent's znode\n        // version whenever a leader registers.\n        log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n        List<Op> ops = new ArrayList<>(2);\n        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n        ops.add(Op.delete(leaderPath, -1));\n        zkClient.multi(ops, true);\n      } catch (KeeperException.NoNodeException nne) {\n        // no problem\n        log.info(\"No leader registration node found to remove: {}\", leaderPath);\n      } catch (KeeperException.BadVersionException bve) {\n        log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n        // no problem\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n      leaderZkNodeParentVersion = null;\n    } else {\n      log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.info(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    if (leaderZkNodeParentVersion != null) {\n      try {\n        // We need to be careful and make sure we *only* delete our own leader registration node.\n        // We do this by using a multi and ensuring the parent znode of the leader registration node\n        // matches the version we expect - there is a setData call that increments the parent's znode\n        // version whenever a leader registers.\n        log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n        List<Op> ops = new ArrayList<>(2);\n        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n        ops.add(Op.delete(leaderPath, -1));\n        zkClient.multi(ops, true);\n      } catch (KeeperException.NoNodeException nne) {\n        // no problem\n        log.info(\"No leader registration node found to remove: {}\", leaderPath);\n      } catch (KeeperException.BadVersionException bve) {\n        log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n        // no problem\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n      leaderZkNodeParentVersion = null;\n    } else {\n      log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.info(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.info(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.info(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.info(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(Paths.get(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(Paths.get(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#cancelElection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#cancelElection().mjava","sourceNew":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        // no problem\n        // no problem\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (IllegalArgumentException e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelElection() throws InterruptedException, KeeperException {\n    super.cancelElection();\n    synchronized (lock) {\n      if (leaderZkNodeParentVersion != null) {\n        try {\n          // We need to be careful and make sure we *only* delete our own leader registration node.\n          // We do this by using a multi and ensuring the parent znode of the leader registration node\n          // matches the version we expect - there is a setData call that increments the parent's znode\n          // version whenever a leader registers.\n          log.debug(\"Removing leader registration node on cancel: {} {}\", leaderPath, leaderZkNodeParentVersion);\n          List<Op> ops = new ArrayList<>(2);\n          ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));\n          ops.add(Op.delete(leaderPath, -1));\n          zkClient.multi(ops, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // no problem\n          log.debug(\"No leader registration node found to remove: {}\", leaderPath);\n        } catch (KeeperException.BadVersionException bve) {\n          log.info(\"Cannot remove leader registration node because the current registered node is not ours: {}\", leaderPath);\n          // no problem\n        } catch (InterruptedException e) {\n          throw e;\n        } catch (Exception e) {\n          SolrException.log(log, e);\n        }\n        leaderZkNodeParentVersion = null;\n      } else {\n        log.info(\"No version found for ephemeral leader parent node, won't remove previous leader registration.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a1ea01e15f477524516b07b300a3ae03d1bec9bc","7e29cfec8d8ad7e37d8e7a4d954e786b3249c857"],"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"a5d615d62cd8aff3690943d765e46942551f98b6":["af2638813028b254a88b418ebeafb541afb49653"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af2638813028b254a88b418ebeafb541afb49653","a5d615d62cd8aff3690943d765e46942551f98b6"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857":["af2638813028b254a88b418ebeafb541afb49653"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["af2638813028b254a88b418ebeafb541afb49653","7e29cfec8d8ad7e37d8e7a4d954e786b3249c857"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}