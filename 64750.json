{"path":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[],TestCase).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[],TestCase).mjava","pathOld":"/dev/null","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        Hits hits1,\n        Hits hits2,\n        int[] results,\n        TestCase testCase)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1, testCase);\n    checkDocIds(\"hits2\", results, hits2, testCase);\n    \n    final float scoreTolerance = 1.0e-7f;\n    for (int i = 0; i < results.length; i++) {\n      if (Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance) {\n        testCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal scores: \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57324580db0f0db467fb175ac76b537522210b68","date":1115333169,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[],TestCase).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[],TestCase).mjava","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        Hits hits1,\n        Hits hits2,\n        int[] results,\n        TestCase testCase)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1, testCase);\n    checkDocIds(\"hits2\", results, hits2, testCase);\n    \n    final float scoreTolerance = 1.0e-7f;\n    for (int i = 0; i < results.length; i++) {\n      if (Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance) {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal scores: \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        Hits hits1,\n        Hits hits2,\n        int[] results,\n        TestCase testCase)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1, testCase);\n    checkDocIds(\"hits2\", results, hits2, testCase);\n    \n    final float scoreTolerance = 1.0e-7f;\n    for (int i = 0; i < results.length; i++) {\n      if (Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance) {\n        testCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal scores: \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56b47d7ef702892600c875ce48ffbdd5701bb3f3","date":1115407780,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,Hits,Hits,int[],TestCase).mjava","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        Hits hits1,\n        Hits hits2,\n        int[] results)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    \n    final float scoreTolerance = 1.0e-7f;\n    for (int i = 0; i < results.length; i++) {\n      if (Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance) {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal scores: \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        Hits hits1,\n        Hits hits2,\n        int[] results,\n        TestCase testCase)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1, testCase);\n    checkDocIds(\"hits2\", results, hits2, testCase);\n    \n    final float scoreTolerance = 1.0e-7f;\n    for (int i = 0; i < results.length; i++) {\n      if (Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance) {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal scores: \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["57324580db0f0db467fb175ac76b537522210b68"],"57324580db0f0db467fb175ac76b537522210b68":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"]},"commit2Childs":{"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57324580db0f0db467fb175ac76b537522210b68":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["57324580db0f0db467fb175ac76b537522210b68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}