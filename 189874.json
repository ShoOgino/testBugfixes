{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","date":1344893790,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.getConstructor().newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballStemmer> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballStemmer.class);\n      stemmer = stemClass.getConstructor().newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    //Class.forName is frowned upon in place of the ResourceLoader but in this case,\n    // the factory will use the other constructor so that the program is already loaded.\n    try {\n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.getConstructor().newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["b88a121b875f9ae2ac50f85cf46dcb680f126357","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}