{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","commits":[{"id":"8b49777657109e40eeddc1c8b0f7850d3c06e1ed","date":1428506188,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery mpq = newMultiPhraseQuery();\n    mpq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpq.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpq.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpq.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpq.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd564443cc619840b8e9859c46194b087f94ffce","date":1479727773,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  protected Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeMultiPhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  protected Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","sourceOld":"  /** \n   * Creates complex phrase query from the cached tokenstream contents \n   */\n  private Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {\n    MultiPhraseQuery.Builder mpqb = newMultiPhraseQueryBuilder();\n    mpqb.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;  \n    \n    List<Term> multiTerms = new ArrayList<>();\n    stream.reset();\n    while (stream.incrementToken()) {\n      int positionIncrement = posIncrAtt.getPositionIncrement();\n      \n      if (positionIncrement > 0 && multiTerms.size() > 0) {\n        if (enablePositionIncrements) {\n          mpqb.add(multiTerms.toArray(new Term[0]), position);\n        } else {\n          mpqb.add(multiTerms.toArray(new Term[0]));\n        }\n        multiTerms.clear();\n      }\n      position += positionIncrement;\n      multiTerms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    if (enablePositionIncrements) {\n      mpqb.add(multiTerms.toArray(new Term[0]), position);\n    } else {\n      mpqb.add(multiTerms.toArray(new Term[0]));\n    }\n    return mpqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd564443cc619840b8e9859c46194b087f94ffce":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["38b5bd3ae837751f57f363e9a41b833794222814"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"cd70af1186a18d10a788433cc33be44327a83ce7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","bd564443cc619840b8e9859c46194b087f94ffce"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["38b5bd3ae837751f57f363e9a41b833794222814","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd564443cc619840b8e9859c46194b087f94ffce"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["38b5bd3ae837751f57f363e9a41b833794222814"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"bd564443cc619840b8e9859c46194b087f94ffce":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"38b5bd3ae837751f57f363e9a41b833794222814":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["bd564443cc619840b8e9859c46194b087f94ffce","cd70af1186a18d10a788433cc33be44327a83ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}