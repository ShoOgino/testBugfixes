{"path":"src/java/org/apache/solr/util/TokenOrderingFilter[SolrPluginUtils]#next().mjava","commits":[{"id":"09b389e81c6f6d4cd07c05a8189081bc814b01ce","date":1152976365,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TokenOrderingFilter[SolrPluginUtils]#next().mjava","pathOld":"/dev/null","sourceNew":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090f8d702b753c18c64a6fd5fb550596c68861ce","date":1172108327,"type":5,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","pathOld":"src/java/org/apache/solr/util/TokenOrderingFilter[SolrPluginUtils]#next().mjava","sourceNew":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09b389e81c6f6d4cd07c05a8189081bc814b01ce":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"090f8d702b753c18c64a6fd5fb550596c68861ce":["09b389e81c6f6d4cd07c05a8189081bc814b01ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"09b389e81c6f6d4cd07c05a8189081bc814b01ce":["090f8d702b753c18c64a6fd5fb550596c68861ce"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["09b389e81c6f6d4cd07c05a8189081bc814b01ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"090f8d702b753c18c64a6fd5fb550596c68861ce":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["090f8d702b753c18c64a6fd5fb550596c68861ce","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}