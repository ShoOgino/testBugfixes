{"path":"src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList);\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList);\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList);\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}