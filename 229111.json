{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","commits":[{"id":"fbf673cc117fc27d2c820811d2a886119346b0c9","date":1302615417,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"/dev/null","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"/dev/null","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"/dev/null","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    final String codecIdAsString = state.codecIdAsString();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"/dev/null","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    super();\n    final String codecIdAsString = state.codecIdAsString();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    final String docFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, DOC_EXTENSION);\n    docOut = factory.createOutput(state.directory, docFileName);\n    docIndex = docOut.index();\n\n    if (state.fieldInfos.hasProx()) {\n      final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, FREQ_EXTENSION);\n      freqOut = factory.createOutput(state.directory, frqFileName);\n      freqIndex = freqOut.index();\n\n      final String posFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, POS_EXTENSION);\n      posOut = factory.createOutput(state.directory, posFileName);\n      posIndex = posOut.index();\n\n      // TODO: -- only if at least one field stores payloads?\n      final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, PAYLOAD_EXTENSION);\n      payloadOut = state.directory.createOutput(payloadFileName);\n\n    } else {\n      freqOut = null;\n      freqIndex = null;\n      posOut = null;\n      posIndex = null;\n      payloadOut = null;\n    }\n\n    final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, codecIdAsString, SKIP_EXTENSION);\n    skipOut = state.directory.createOutput(skipFileName);\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new SepSkipListWriter(skipInterval,\n                                           maxSkipLevels,\n                                           state.numDocs,\n                                           freqOut, docOut,\n                                           posOut, payloadOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasProx()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n        \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"efb7a19703a037c29e30440260d393500febc1f4":["fbf673cc117fc27d2c820811d2a886119346b0c9"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"962d04139994fce5193143ef35615499a9a96d78":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","fbf673cc117fc27d2c820811d2a886119346b0c9","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}