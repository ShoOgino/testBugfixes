{"path":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","commits":[{"id":"5220c264531ed933424a495eb8ed8ada158961cc","date":1493367833,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    }else{\n      query = fp.subQuery(fp.getParam(CommonParams.Q), BlockJoinParentQParserPlugin.NAME).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    }else{\n      query = fp.subQuery(fp.getParam(CommonParams.Q), BlockJoinParentQParserPlugin.NAME).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    }else{\n      query = fp.subQuery(fp.getParam(CommonParams.Q), BlockJoinParentQParserPlugin.NAME).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    }else{\n      query = fp.subQuery(fp.getParam(CommonParams.Q), BlockJoinParentQParserPlugin.NAME).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24d1e8d5bdb993e38677e49c2fb4f7008b24895","date":1567089468,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).filter;\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).filter;\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      if (log.isErrorEnabled()) {\n        log.error(\"can't parse {}\", fp.getString(), e);\n      }\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse \"+fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse {}\", fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      if (log.isErrorEnabled()) {\n        log.error(\"can't parse {}\", fp.getString(), e);\n      }\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed7576365aa15478ffb164ad40e9e556e294885e","date":1590803084,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ChildFieldValueSourceParser#parse(FunctionQParser).mjava","sourceNew":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedBitSetProducer(fp.getReq(), bjQ.getParentQuery());\n      childFilter = BlockJoinParentQParser.getCachedBitSetProducer(fp.getReq(), bjQ.getChildQuery());\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse {}\", fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","sourceOld":"  @Override\n  public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n    \n    final String sortFieldName = fp.parseArg();\n    final Query query;\n    if (fp.hasMoreArguments()){\n      query = fp.parseNestedQuery();\n    } else {\n      query = fp.subQuery(fp.getParam(CommonParams.Q), null).getQuery();\n    }\n    \n    BitSetProducer parentFilter;\n    BitSetProducer childFilter;\n    SchemaField sf;\n    try {\n      AllParentsAware bjQ;\n      if (!(query instanceof AllParentsAware)) {\n        throw new SyntaxError(\"expect a reference to block join query \"+\n              AllParentsAware.class.getSimpleName()+\" in \"+fp.getString());\n      }\n      bjQ = (AllParentsAware) query;\n      \n      parentFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getParentQuery()).getFilter();\n      childFilter = BlockJoinParentQParser.getCachedFilter(fp.getReq(), bjQ.getChildQuery()).getFilter();\n\n      if (sortFieldName==null || sortFieldName.equals(\"\")) {\n        throw new SyntaxError (\"field is omitted in \"+fp.getString());\n      }\n      \n      sf = fp.getReq().getSchema().getFieldOrNull(sortFieldName);\n      if (null == sf) {\n        throw new SyntaxError\n          (NAME+\" sort param field \\\"\"+ sortFieldName+\"\\\" can't be found in schema\");\n      }\n    } catch (SyntaxError e) {\n      log.error(\"can't parse {}\", fp.getString(), e);\n      throw e;\n    }\n    return new BlockJoinSortFieldValueSource(childFilter, parentFilter, sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed7576365aa15478ffb164ad40e9e556e294885e":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5220c264531ed933424a495eb8ed8ada158961cc"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["b24d1e8d5bdb993e38677e49c2fb4f7008b24895"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["5220c264531ed933424a495eb8ed8ada158961cc","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["5220c264531ed933424a495eb8ed8ada158961cc"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"b24d1e8d5bdb993e38677e49c2fb4f7008b24895":["4aee4980038a10791618ea04e79233ce5cbf6607"],"5220c264531ed933424a495eb8ed8ada158961cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed7576365aa15478ffb164ad40e9e556e294885e"]},"commit2Childs":{"ed7576365aa15478ffb164ad40e9e556e294885e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5220c264531ed933424a495eb8ed8ada158961cc"],"4aee4980038a10791618ea04e79233ce5cbf6607":["b24d1e8d5bdb993e38677e49c2fb4f7008b24895"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ed7576365aa15478ffb164ad40e9e556e294885e"],"b24d1e8d5bdb993e38677e49c2fb4f7008b24895":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"5220c264531ed933424a495eb8ed8ada158961cc":["e9017cf144952056066919f1ebc7897ff9bd71b1","4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}