{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"/dev/null","sourceNew":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"/dev/null","sourceNew":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"/dev/null","sourceNew":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52aa8538d23f046de4a22d633043361c3e07fb16","date":1327549005,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(500);\n    }\n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e01d291bdafb90b742ae6847d7df76bf5e47c45f","date":1327628452,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 15000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(500);\n    }\n    return leader;\n  }\n\n","bugFix":null,"bugIntro":["9a896b98a41875f2ad698c844cf3ce56e96b794d","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 15000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"524e1f15a75045f8189997ef41d177cbc67c1e6e","date":1327802035,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 15000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a896b98a41875f2ad698c844cf3ce56e96b794d","date":1327803120,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":["e01d291bdafb90b742ae6847d7df76bf5e47c45f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    reader.updateCloudState(true);\n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 15000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    String leader = null;\n    int tries = 30;\n    while (tries-- > 0) {\n      ZkNodeProps props;\n      try {\n        reader.updateCloudState(true);\n        props = reader.getLeaderProps(\"collection1\", \"shard1\", 500);\n        leader = props.get(ZkStateReader.NODE_NAME_PROP);\n        if (leader != null) {\n          break;\n        }\n      } catch (KeeperException e) {\n        // ignore\n      }\n      Thread.sleep(200);\n    }\n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":["e01d291bdafb90b742ae6847d7df76bf5e47c45f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException, KeeperException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.get(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderRetry(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderRetry(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderProps(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader(String collection) throws InterruptedException {\n    \n    ZkNodeProps props = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collection, \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderRetry(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":"  private String getLeader(String collection) throws InterruptedException {\n    \n    ZkNodeProps props = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collection, \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderRetry(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#getLeader().mjava","sourceNew":null,"sourceOld":"  private String getLeader() throws InterruptedException {\n    \n    ZkNodeProps props = reader.getLeaderRetry(\"collection1\", \"shard1\", 30000);\n    String leader = props.getStr(ZkStateReader.NODE_NAME_PROP);\n    \n    return leader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fa64435b5902ce266c23755a4a00691a3285dab8","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e01d291bdafb90b742ae6847d7df76bf5e47c45f"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"fa64435b5902ce266c23755a4a00691a3285dab8":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9a896b98a41875f2ad698c844cf3ce56e96b794d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"52aa8538d23f046de4a22d633043361c3e07fb16":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["9a896b98a41875f2ad698c844cf3ce56e96b794d","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a896b98a41875f2ad698c844cf3ce56e96b794d":["524e1f15a75045f8189997ef41d177cbc67c1e6e"],"524e1f15a75045f8189997ef41d177cbc67c1e6e":["e01d291bdafb90b742ae6847d7df76bf5e47c45f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["78a55f24d9b493c2a1cecf79f1d78279062b545b","9a896b98a41875f2ad698c844cf3ce56e96b794d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["9a896b98a41875f2ad698c844cf3ce56e96b794d"],"e01d291bdafb90b742ae6847d7df76bf5e47c45f":["52aa8538d23f046de4a22d633043361c3e07fb16"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["fa64435b5902ce266c23755a4a00691a3285dab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"52aa8538d23f046de4a22d633043361c3e07fb16":["e01d291bdafb90b742ae6847d7df76bf5e47c45f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9a896b98a41875f2ad698c844cf3ce56e96b794d":["fd92b8bcc88e969302510acf77bd6970da3994c4","fe33227f6805edab2036cbb80645cc4e2d1fa424","8f4a0c306589f8607dc4b33f7abaf753db19f76e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"524e1f15a75045f8189997ef41d177cbc67c1e6e":["9a896b98a41875f2ad698c844cf3ce56e96b794d"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","52aa8538d23f046de4a22d633043361c3e07fb16","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"e01d291bdafb90b742ae6847d7df76bf5e47c45f":["78a55f24d9b493c2a1cecf79f1d78279062b545b","524e1f15a75045f8189997ef41d177cbc67c1e6e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fa64435b5902ce266c23755a4a00691a3285dab8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fd92b8bcc88e969302510acf77bd6970da3994c4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","fe33227f6805edab2036cbb80645cc4e2d1fa424","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}