{"path":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,int,char[]).mjava","commits":[{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,int,char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,char[]).mjava","sourceNew":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    if (ignoreCase) {\n      for(int i=0;i<len;i++) {\n        if (Character.toLowerCase(text1[off+i]) != text2[i])\n          return false;\n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean equals(char[] text1, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    for(int i=0;i<len;i++) {\n      if (ignoreCase) {\n        if (Character.toLowerCase(text1[i]) != text2[i])\n          return false;\n      } else {\n        if (text1[i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,int,char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,int,char[]).mjava","sourceNew":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = charUtils.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != charUtils.codePointAt(text2, i))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    if (ignoreCase) {\n      for(int i=0;i<len;i++) {\n        if (Character.toLowerCase(text1[off+i]) != text2[i])\n          return false;\n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArrayMap#equals(char[],int,int,char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#equals(char[],int,int,char[]).mjava","sourceNew":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = charUtils.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != charUtils.codePointAt(text2, i))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = charUtils.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != charUtils.codePointAt(text2, i))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09067bd60a59f680992d62794689898c0148ac"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["050b03edbe9b8423ff4c09685c6f03d900e86b83"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["3c09067bd60a59f680992d62794689898c0148ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}