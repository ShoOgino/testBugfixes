{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsAndPositionsEnum#addPositions(DocsAndPositionsEnum,IndexOutput).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsAndPositionsEnum#addPositions(DocsAndPositionsEnum,IndexOutput).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsAndPositionsEnum#addPositions(DocsAndPositionsEnum,IndexOutput).mjava","sourceNew":"    private void addPositions(final DocsAndPositionsEnum in, final IndexOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position. \n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","sourceOld":"    private void addPositions(final DocsAndPositionsEnum in, final IndexOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position. \n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#addPositions(PostingsEnum,IndexOutput).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsAndPositionsEnum#addPositions(DocsAndPositionsEnum,IndexOutput).mjava","sourceNew":"    private void addPositions(final PostingsEnum in, final IndexOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position.\n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","sourceOld":"    private void addPositions(final DocsAndPositionsEnum in, final IndexOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position. \n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}