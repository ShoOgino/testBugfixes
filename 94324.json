{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    if (!state.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Source Node: \" + node + \" is not live\");\n    }\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, \"node\");\n    String node = message.getStr(\"node\");\n    List<ZkNodeProps> sourceReplicas = ReplaceNodeCmd.getReplicasOfNode(node, state);\n    List<String> singleReplicas = verifyReplicaAvailability(sourceReplicas, state);\n    if (!singleReplicas.isEmpty()) {\n      results.add(\"failure\", \"Can't delete the only existing non-PULL replica(s) on node \" + node + \": \" + singleReplicas.toString());\n    } else {\n      cleanupReplicas(results, state, sourceReplicas, ocmh, node, message.getStr(ASYNC));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}