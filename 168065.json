{"path":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader.Builder#add(CompositeReader,boolean).mjava","commits":[{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader.Builder#add(CompositeReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /** Add an CompositeReader whose stored fields will not be returned.  This can\n     * accelerate search when stored fields are only needed from a subset of\n     * the IndexReaders.\n     *\n     * @throws IllegalArgumentException if not all indexes contain the same number\n     *     of documents\n     * @throws IllegalArgumentException if not all indexes have the same value\n     *     of {@link AtomicReader#maxDoc()}\n     * @throws IOException if there is a low-level IO error\n     */\n    public Builder add(CompositeReader reader, boolean ignoreStoredFields) throws IOException {\n      final IndexReader[] subs = reader.getSequentialSubReaders();\n      if (readers.isEmpty()) {\n        this.maxDoc = reader.maxDoc();\n        this.numDocs = reader.numDocs();\n        childSizes = new int[subs.length];\n        for (int i = 0; i < subs.length; i++) {\n          childSizes[i] = subs[i].maxDoc();\n        }\n        final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n        leaveSizes = new int[leaves.length];\n        for (int i = 0; i < leaves.length; i++) {\n          leaveSizes[i] = leaves[i].reader().maxDoc();\n        }\n      } else {\n        // check compatibility\n        if (reader.maxDoc() != maxDoc)\n          throw new IllegalArgumentException(\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n        if (reader.numDocs() != numDocs)\n          throw new IllegalArgumentException(\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n        if (subs.length != childSizes.length)\n          throw new IllegalArgumentException(\"All readers must have same number of subReaders\");\n        for (int i = 0; i < subs.length; i++) {\n          if (subs[i].maxDoc() != childSizes[i])\n            throw new IllegalArgumentException(\"All readers must have same subReader maxDoc\");\n        }\n        // the following checks are only to detect errors early, otherwise a wrong leaf\n        // structure would only cause errors on build(). These checks are still incomplete...\n        final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n        if (leaves.length != leaveSizes.length)\n          throw new IllegalArgumentException(\"All readers must have same number of atomic leaves\");\n        for (int i = 0; i < leaves.length; i++) {\n          if (leaves[i].reader().maxDoc() != leaveSizes[i])\n            throw new IllegalArgumentException(\"All readers must have atomic leaves with same maxDoc\");\n        }\n      }\n      \n      ignoreStoredFieldsSet.set(readers.size(), ignoreStoredFields);\n      readers.add(reader);\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader.Builder#add(CompositeReader,boolean).mjava","sourceNew":null,"sourceOld":"    /** Add an CompositeReader whose stored fields will not be returned.  This can\n     * accelerate search when stored fields are only needed from a subset of\n     * the IndexReaders.\n     *\n     * @throws IllegalArgumentException if not all indexes contain the same number\n     *     of documents\n     * @throws IllegalArgumentException if not all indexes have the same value\n     *     of {@link AtomicReader#maxDoc()}\n     * @throws IOException if there is a low-level IO error\n     */\n    public Builder add(CompositeReader reader, boolean ignoreStoredFields) throws IOException {\n      final IndexReader[] subs = reader.getSequentialSubReaders();\n      if (readers.isEmpty()) {\n        this.maxDoc = reader.maxDoc();\n        this.numDocs = reader.numDocs();\n        childSizes = new int[subs.length];\n        for (int i = 0; i < subs.length; i++) {\n          childSizes[i] = subs[i].maxDoc();\n        }\n        final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n        leaveSizes = new int[leaves.length];\n        for (int i = 0; i < leaves.length; i++) {\n          leaveSizes[i] = leaves[i].reader().maxDoc();\n        }\n      } else {\n        // check compatibility\n        if (reader.maxDoc() != maxDoc)\n          throw new IllegalArgumentException(\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n        if (reader.numDocs() != numDocs)\n          throw new IllegalArgumentException(\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n        if (subs.length != childSizes.length)\n          throw new IllegalArgumentException(\"All readers must have same number of subReaders\");\n        for (int i = 0; i < subs.length; i++) {\n          if (subs[i].maxDoc() != childSizes[i])\n            throw new IllegalArgumentException(\"All readers must have same subReader maxDoc\");\n        }\n        // the following checks are only to detect errors early, otherwise a wrong leaf\n        // structure would only cause errors on build(). These checks are still incomplete...\n        final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n        if (leaves.length != leaveSizes.length)\n          throw new IllegalArgumentException(\"All readers must have same number of atomic leaves\");\n        for (int i = 0; i < leaves.length; i++) {\n          if (leaves[i].reader().maxDoc() != leaveSizes[i])\n            throw new IllegalArgumentException(\"All readers must have atomic leaves with same maxDoc\");\n        }\n      }\n      \n      ignoreStoredFieldsSet.set(readers.size(), ignoreStoredFields);\n      readers.add(reader);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08b385e33541f6749e71618c9ab36fad908a7ed0"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}