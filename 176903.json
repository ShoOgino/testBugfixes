{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c0b7c041280280c54063d34a48a0ee85332b1e3","date":1287540778,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~2.0 f2:bla~2.0 f3:bla~2.0\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["8c0b7c041280280c54063d34a48a0ee85332b1e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9454a6510e2db155fb01faa5c049b06ece95fab9","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8c0b7c041280280c54063d34a48a0ee85332b1e3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}