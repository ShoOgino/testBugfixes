{"path":"lucene/sandbox/src/java/org/apache/lucene/search/MultiRangeQuery#toString(String).mjava","commits":[{"id":"bc29621aa343e88cbc47d168a1d556972a8d3851","date":1564149243,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/MultiRangeQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    int count = 0;\n    // print ourselves as \"range per dimension per value\"\n    for (RangeClause rangeClause : rangeClauses) {\n      if (count > 0) {\n        sb.append(',');\n      }\n      sb.append('{');\n      for (int i = 0; i < numDims; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n\n        int startOffset = bytesPerDim * i;\n\n        sb.append('[');\n        sb.append(toString(i, ArrayUtil.copyOfSubArray(rangeClause.lowerValue, startOffset, startOffset + bytesPerDim)));\n        sb.append(\" TO \");\n        sb.append(toString(i, ArrayUtil.copyOfSubArray(rangeClause.upperValue, startOffset, startOffset + bytesPerDim)));\n        sb.append(']');\n      }\n      sb.append('}');\n      ++count;\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9da1d4a2d2f04a562030d1d46862163f506f62","date":1566205061,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/MultiRangeQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    int count = 0;\n    // print ourselves as \"range per dimension per value\"\n    for (RangeClause rangeClause : rangeClauses) {\n      if (count > 0) {\n        sb.append(',');\n      }\n      sb.append('{');\n      for (int i = 0; i < numDims; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n\n        int startOffset = bytesPerDim * i;\n\n        sb.append('[');\n        sb.append(toString(i, ArrayUtil.copyOfSubArray(rangeClause.lowerValue, startOffset, startOffset + bytesPerDim)));\n        sb.append(\" TO \");\n        sb.append(toString(i, ArrayUtil.copyOfSubArray(rangeClause.upperValue, startOffset, startOffset + bytesPerDim)));\n        sb.append(']');\n      }\n      sb.append('}');\n      ++count;\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc29621aa343e88cbc47d168a1d556972a8d3851"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9da1d4a2d2f04a562030d1d46862163f506f62"]},"commit2Childs":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["cf9da1d4a2d2f04a562030d1d46862163f506f62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc29621aa343e88cbc47d168a1d556972a8d3851","cf9da1d4a2d2f04a562030d1d46862163f506f62"],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}