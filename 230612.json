{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","commits":[{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = tokensToCompare[i].term();\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}