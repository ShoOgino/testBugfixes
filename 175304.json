{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        zkController.close();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        zkController.close();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        zkController.close();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7f588c30f12151056b2349753f06dc61888d38","date":1328025392,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        zkController.close();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core, ZkStateReader.DOWN);\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e1) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerInZk(SolrCore).mjava","sourceNew":"  public void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e1) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","sourceOld":"  private void registerInZk(SolrCore core) {\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (Exception e) {\n        // if register fails, this is really bad - close the zkController to\n        // minimize any damage we can cause\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e1) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        SolrException.log(log, \"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["a5093a9e893633cc091cf2f729d7863671c2b715"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae7f588c30f12151056b2349753f06dc61888d38":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["ae7f588c30f12151056b2349753f06dc61888d38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ae7f588c30f12151056b2349753f06dc61888d38"],"ae7f588c30f12151056b2349753f06dc61888d38":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}