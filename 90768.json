{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      sis.set(i, (SegmentInfo) sis.info(i).clone());\n    }\n    sis.userData = new HashMap<String, String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      sis.set(i, (SegmentInfo) sis.info(i).clone());\n    }\n    sis.userData = new HashMap<String, String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodec() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      sis.set(i, (SegmentInfo) sis.info(i).clone());\n    }\n    sis.userData = new HashMap<String, String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodecInfo() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodec() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodecInfo() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodec() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bc084aae57b2027dcd1e8786dabc47987dce76b","date":1289596643,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodecInfo() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodecInfo() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getCodec() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    SegmentInfos sis = (SegmentInfos) super.clone();\n    for(int i=0;i<sis.size();i++) {\n      final SegmentInfo info = sis.info(i);\n      assert info.getSegmentCodecs() != null;\n      sis.set(i, (SegmentInfo) info.clone());\n    }\n    sis.userData = new HashMap<String,String>(userData);\n    return sis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["85a883878c0af761245ab048babc63d099f835f3","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"7b91922b55d15444d554721b352861d028eb8278":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"8bc084aae57b2027dcd1e8786dabc47987dce76b":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["8bc084aae57b2027dcd1e8786dabc47987dce76b"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["8bc084aae57b2027dcd1e8786dabc47987dce76b","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8bc084aae57b2027dcd1e8786dabc47987dce76b":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233"],"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["7b91922b55d15444d554721b352861d028eb8278","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}