{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getUncompressedBinary(FieldInfo).mjava","commits":[{"id":"5fcfc028fca127dc2779630e53a9c2ec208ee7a0","date":1582034562,"type":0,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getUncompressedBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  // BWC - old binary format \n  private BinaryDocValues getUncompressedBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptyBinary();\n    }\n\n    final IndexInput bytesSlice = data.slice(\"fixed-binary\", entry.dataOffset, entry.dataLength);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) doc * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new DenseBinaryDocValues(maxDoc) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            long startOffset = addresses.get(doc);\n            bytes.length = (int) (addresses.get(doc + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength,\n          entry.jumpTableEntryCount, entry.denseRankPower, entry.numDocsWithField);\n      if (entry.minLength == entry.maxLength) {\n        // fixed length\n        final int length = entry.maxLength;\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[length], 0, length);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            bytesSlice.seek((long) disi.index() * length);\n            bytesSlice.readBytes(bytes.bytes, 0, length);\n            return bytes;\n          }\n        };\n      } else {\n        // variable length\n        final RandomAccessInput addressesData = this.data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n        final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesData);\n        return new SparseBinaryDocValues(disi) {\n          final BytesRef bytes = new BytesRef(new byte[entry.maxLength], 0, entry.maxLength);\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            final int index = disi.index();\n            long startOffset = addresses.get(index);\n            bytes.length = (int) (addresses.get(index + 1L) - startOffset);\n            bytesSlice.seek(startOffset);\n            bytesSlice.readBytes(bytes.bytes, 0, bytes.length);\n            return bytes;\n          }\n        };\n      }\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}