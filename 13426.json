{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean,boolean).mjava","commits":[{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads, boolean hasContexts) throws IOException {\n      this.hasPayloads = hasPayloads;\n      this.hasContexts = hasContexts;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField, contextsField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      this.hasPayloads = hasPayloads;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean,boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads, boolean hasContexts) throws IOException {\n      this.hasPayloads = hasPayloads;\n      this.hasContexts = hasContexts;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiBits.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField, contextsField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads, boolean hasContexts) throws IOException {\n      this.hasPayloads = hasPayloads;\n      this.hasContexts = hasContexts;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField, contextsField});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}