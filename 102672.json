{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":null,"sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}