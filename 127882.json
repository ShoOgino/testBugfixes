{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936f1eae75daf11568fe1480aec9e06d2ef55367":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","936f1eae75daf11568fe1480aec9e06d2ef55367"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["936f1eae75daf11568fe1480aec9e06d2ef55367"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}