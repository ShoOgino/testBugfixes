{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#deleteEntry(ServerBaseEntry).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#deleteEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#deleteEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not delete entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"delete entry for feed: \" + entry.getFeedId()\n                    + \" entry ID: \" + entry.getId());\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        DateTime time = DateTime.now();\n        if (persistentEntry.getEntry().getUpdated() != null)\n            time.setTzShift(persistentEntry.getEntry().getUpdated().getTzShift());\n        feed.setUpdated(time);\n        try {\n            //delete the entry\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.set(feed);\n            this.container.commit();\n            \n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not delete entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"delete entry for feed: \" + entry.getFeedId()\n                    + \" entry ID: \" + entry.getId());\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        DateTime time = DateTime.now();\n        if (persistentEntry.getEntry().getUpdated() != null)\n            time.setTzShift(persistentEntry.getEntry().getUpdated().getTzShift());\n        feed.setUpdated(time);\n        try {\n            //delete the entry\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.set(feed);\n            this.container.commit();\n            \n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#deleteEntry(ServerBaseEntry).mjava","sourceNew":null,"sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not delete entry -- is null\");\n        if (entry.getFeedId() == null)\n            throw new StorageException(\n                    \"can not delete entry -- feed id is null\");\n        if (entry.getId() == null)\n            throw new StorageException(\"Can not delete entry -- id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"delete entry for feed: \" + entry.getFeedId()\n                    + \" entry ID: \" + entry.getId());\n        DB4oEntry persistentEntry = getInternalEntry(entry.getId());\n        // lock the entry to prevent concurrent access\n        createSemaphore(entry.getId());\n        refreshPersistentObject(persistentEntry);\n        if(persistentEntry.getVersion() != entry.getVersion())\n            throw new ModificationConflictException(\n                    \"Current version does not match given version  -- currentVersion: \"+persistentEntry.getVersion()+\"; given Version: \"+entry.getVersion() );\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n        refreshPersistentObject(feed);\n        DateTime time = DateTime.now();\n        if (persistentEntry.getEntry().getUpdated() != null)\n            time.setTzShift(persistentEntry.getEntry().getUpdated().getTzShift());\n        feed.setUpdated(time);\n        try {\n            //delete the entry\n            this.container.delete(persistentEntry.getEntry());\n            this.container.delete(persistentEntry);\n            this.container.set(feed);\n            this.container.commit();\n            \n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        } finally {\n            releaseSemaphore(entry.getId());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}