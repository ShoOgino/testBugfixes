{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","sourceOld":"  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","sourceOld":"  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","sourceOld":"  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","sourceOld":"  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    // Buffer all input on the first call.\n    if (transformedInput == null) {\n      StringBuilder buffered = new StringBuilder();\n      char [] temp = new char [1024];\n      for (int cnt = input.read(temp); cnt > 0; cnt = input.read(temp)) {\n        buffered.append(temp, 0, cnt);\n      }\n      transformedInput = new StringReader(processPattern(buffered).toString());\n    }\n\n    return transformedInput.read(cbuf, off, len);\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    // Buffer all input on the first call.\n    if (transformedInput == null) {\n      StringBuilder buffered = new StringBuilder();\n      char [] temp = new char [1024];\n      for (int cnt = input.read(temp); cnt > 0; cnt = input.read(temp)) {\n        buffered.append(temp, 0, cnt);\n      }\n      transformedInput = new StringReader(processPattern(buffered).toString());\n    }\n\n    return transformedInput.read(cbuf, off, len);\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    char[] tmp = new char[len];\n    int l = input.read(tmp, 0, len);\n    if (l != -1) {\n      for(int i = 0; i < l; i++)\n        pushLastChar(tmp[i]);\n    }\n    l = 0;\n    for(int i = off; i < off + len; i++) {\n      int c = read();\n      if (c == -1) break;\n      cbuf[i] = (char) c;\n      l++;\n    }\n    return l == 0 ? -1 : l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    // Buffer all input on the first call.\n    if (transformedInput == null) {\n      StringBuilder buffered = new StringBuilder();\n      char [] temp = new char [1024];\n      for (int cnt = input.read(temp); cnt > 0; cnt = input.read(temp)) {\n        buffered.append(temp, 0, cnt);\n      }\n      transformedInput = new StringReader(processPattern(buffered).toString());\n    }\n\n    return transformedInput.read(cbuf, off, len);\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    // Buffer all input on the first call.\n    if (transformedInput == null) {\n      StringBuilder buffered = new StringBuilder();\n      char [] temp = new char [1024];\n      for (int cnt = input.read(temp); cnt > 0; cnt = input.read(temp)) {\n        buffered.append(temp, 0, cnt);\n      }\n      transformedInput = new StringReader(processPattern(buffered).toString());\n    }\n\n    return transformedInput.read(cbuf, off, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["47777586dd4c026834be0b2cc454d527cf8884b3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","47777586dd4c026834be0b2cc454d527cf8884b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"47777586dd4c026834be0b2cc454d527cf8884b3":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","29ef99d61cda9641b6250bf9567329a6e65f901d","47777586dd4c026834be0b2cc454d527cf8884b3","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"47777586dd4c026834be0b2cc454d527cf8884b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}