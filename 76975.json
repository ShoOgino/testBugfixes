{"path":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,boolean).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}