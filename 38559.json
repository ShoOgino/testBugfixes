{"path":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#assertMinCompetitiveScore(Collection[FakeScorer],MaxScoreSumPropagator,float).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#assertMinCompetitiveScore(Collection[FakeScorer],MaxScoreSumPropagator,float).mjava","pathOld":"/dev/null","sourceNew":"  private void assertMinCompetitiveScore(Collection<FakeScorer> scorers, MaxScoreSumPropagator p, float minCompetitiveScore) {\n    p.setMinCompetitiveScore(minCompetitiveScore);\n\n    for (FakeScorer scorer : scorers) {\n      if (scorer.minCompetitiveScore == 0f) {\n        // no propagation is performed, still visiting all hits\n        break;\n      }\n      double scoreSum = scorer.minCompetitiveScore;\n      for (FakeScorer scorer2 : scorers) {\n        if (scorer2 != scorer) {\n          scoreSum += scorer2.maxScore();\n        }\n      }\n      assertTrue(\n          \"scoreSum=\" + scoreSum + \", minCompetitiveScore=\" + minCompetitiveScore,\n          (float) scoreSum <= minCompetitiveScore);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#assertMinCompetitiveScore(Collection[FakeScorer],MaxScoreSumPropagator,float).mjava","sourceNew":null,"sourceOld":"  private void assertMinCompetitiveScore(Collection<FakeScorer> scorers, MaxScoreSumPropagator p, float minCompetitiveScore) {\n    p.setMinCompetitiveScore(minCompetitiveScore);\n\n    for (FakeScorer scorer : scorers) {\n      if (scorer.minCompetitiveScore == 0f) {\n        // no propagation is performed, still visiting all hits\n        break;\n      }\n      double scoreSum = scorer.minCompetitiveScore;\n      for (FakeScorer scorer2 : scorers) {\n        if (scorer2 != scorer) {\n          scoreSum += scorer2.maxScore();\n        }\n      }\n      assertTrue(\n          \"scoreSum=\" + scoreSum + \", minCompetitiveScore=\" + minCompetitiveScore,\n          (float) scoreSum <= minCompetitiveScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#assertMinCompetitiveScore(Collection[FakeScorer],MaxScoreSumPropagator,float).mjava","pathOld":"/dev/null","sourceNew":"  private void assertMinCompetitiveScore(Collection<FakeScorer> scorers, MaxScoreSumPropagator p, float minCompetitiveScore) throws IOException {\n    p.setMinCompetitiveScore(minCompetitiveScore);\n\n    for (FakeScorer scorer : scorers) {\n      if (scorer.minCompetitiveScore == 0f) {\n        // no propagation is performed, still visiting all hits\n        break;\n      }\n      double scoreSum = scorer.minCompetitiveScore;\n      for (FakeScorer scorer2 : scorers) {\n        if (scorer2 != scorer) {\n          scoreSum += scorer2.getMaxScore(NO_MORE_DOCS);\n        }\n      }\n      assertTrue(\n          \"scoreSum=\" + scoreSum + \", minCompetitiveScore=\" + minCompetitiveScore,\n          (float) scoreSum <= minCompetitiveScore);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}