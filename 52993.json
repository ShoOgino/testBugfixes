{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],CoreContainer).mjava","commits":[{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public SearchRateTrigger(String name, Map<String, Object> properties, CoreContainer container) {\n    super(TriggerEventType.SEARCHRATE, name, properties, container.getResourceLoader(), container.getZkController().getZkClient());\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.container = container;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2ba631afa835c2dfd14555cf19ae7e73663c17","date":1505762504,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":null,"sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties, CoreContainer container) {\n    super(TriggerEventType.SEARCHRATE, name, properties, container.getResourceLoader(), container.getZkController().getZkClient());\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.container = container;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":["3955a9511098c96b652734b2f2d4160d07cc2d63"]},"commit2Childs":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3955a9511098c96b652734b2f2d4160d07cc2d63","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}