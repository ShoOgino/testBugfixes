{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"635548f88824977119a14d0594bf158e75cb2b48","date":1328965599,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"635548f88824977119a14d0594bf158e75cb2b48":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["635548f88824977119a14d0594bf158e75cb2b48"]},"commit2Childs":{"635548f88824977119a14d0594bf158e75cb2b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["635548f88824977119a14d0594bf158e75cb2b48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}