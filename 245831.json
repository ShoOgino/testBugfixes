{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#readToken(StringBuilder).mjava","commits":[{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#readToken(StringBuilder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#readToken(StringBuffer).mjava","sourceNew":"  protected String readToken(StringBuilder chars) {\n    String word;\n    boolean space = false;\n    int i;\n    for (i = 0; i < chars.length(); i++) {\n      if (Character.isWhitespace(chars.charAt(i))) {\n        space = true;\n      } else {\n        break;\n      }\n    }\n    if (space) {\n      // chars.delete(0,i);\n      for (int countr = i; countr < chars.length(); countr++) {\n        chars.setCharAt(countr - i, chars.charAt(countr));\n      }\n      chars.setLength(chars.length() - i);\n      if (token.length() > 0) {\n        word = token.toString();\n        token.setLength(0);\n        return word;\n      }\n    }\n    space = false;\n    for (i = 0; i < chars.length(); i++) {\n      if (Character.isWhitespace(chars.charAt(i))) {\n        space = true;\n        break;\n      }\n    }\n    token.append(chars.toString().substring(0, i));\n    // chars.delete(0,i);\n    for (int countr = i; countr < chars.length(); countr++) {\n      chars.setCharAt(countr - i, chars.charAt(countr));\n    }\n    chars.setLength(chars.length() - i);\n    if (space) {\n      word = token.toString();\n      token.setLength(0);\n      return word;\n    }\n    token.append(chars);\n    return null;\n  }\n\n","sourceOld":"  protected String readToken(StringBuffer chars) {\n    String word;\n    boolean space = false;\n    int i;\n    for (i = 0; i < chars.length(); i++) {\n      if (Character.isWhitespace(chars.charAt(i))) {\n        space = true;\n      } else {\n        break;\n      }\n    }\n    if (space) {\n      // chars.delete(0,i);\n      for (int countr = i; countr < chars.length(); countr++) {\n        chars.setCharAt(countr - i, chars.charAt(countr));\n      }\n      chars.setLength(chars.length() - i);\n      if (token.length() > 0) {\n        word = token.toString();\n        token.setLength(0);\n        return word;\n      }\n    }\n    space = false;\n    for (i = 0; i < chars.length(); i++) {\n      if (Character.isWhitespace(chars.charAt(i))) {\n        space = true;\n        break;\n      }\n    }\n    token.append(chars.toString().substring(0, i));\n    // chars.delete(0,i);\n    for (int countr = i; countr < chars.length(); countr++) {\n      chars.setCharAt(countr - i, chars.charAt(countr));\n    }\n    chars.setLength(chars.length() - i);\n    if (space) {\n      word = token.toString();\n      token.setLength(0);\n      return word;\n    }\n    token.append(chars);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d06343967a29132f5d782f74e8d0988400278a02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d06343967a29132f5d782f74e8d0988400278a02"]},"commit2Childs":{"d06343967a29132f5d782f74e8d0988400278a02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d06343967a29132f5d782f74e8d0988400278a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}