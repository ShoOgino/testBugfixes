{"path":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","sourceNew":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    // jmxAttributes override any real values\n    val = jmxAttributes.get(attribute);\n    if (val != null) {\n      return val;\n    }\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","sourceNew":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    // jmxAttributes override any real values\n    val = jmxAttributes.get(attribute);\n    if (val != null) {\n      return val;\n    }\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getAttribute(String).mjava","sourceNew":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    // jmxAttributes override any real values\n    if (jmxAttributes != null) {\n      val = jmxAttributes.get(attribute);\n      if (val != null) {\n        return val;\n      }\n    }\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {\n    Object val;\n    // jmxAttributes override any real values\n    val = jmxAttributes.get(attribute);\n    if (val != null) {\n      return val;\n    }\n    Map<String,Object> stats = null;\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      Map<String,Object> cachedStats = this.cachedValue;\n      if (cachedStats != null) {\n        stats = cachedStats;\n      }\n    }\n    if (stats == null) {\n      stats = getValue(true);\n    }\n    val = stats.get(attribute);\n\n    if (val != null) {\n      // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n      for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n        if (val.getClass().getName().equals(simpleTypeName)) {\n          return val;\n        }\n      }\n      // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n      // a workable representation of the object\n      return val.toString();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["122c889ac8944e19f984ba4306b02a8742e914a7"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["122c889ac8944e19f984ba4306b02a8742e914a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}