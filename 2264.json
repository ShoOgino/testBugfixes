{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","commits":[{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getState() == State.ACTIVE) {\n        log.info(\"Old leader {}, new leader. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"/dev/null","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getState() == State.ACTIVE) {\n        log.info(\"Old leader {}, new leader. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97b0a5af1d6ccf86352a90571828b70ceb53b4f","date":1484580242,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getState() == State.ACTIVE) {\n        log.info(\"Old leader {}, new leader. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getState() == State.ACTIVE) {\n        log.info(\"Old leader {}, new leader. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n    \n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return false;\n      \n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStream(System.out);\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n\n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return false;\n\n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n    \n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return false;\n      \n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStream(System.out);\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n\n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (docCollection) -> {\n      if (docCollection == null)\n        return false;\n\n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStream(System.out);\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n\n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return false;\n\n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,TimeOut).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\"\n              , oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS));\n        }\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStream(System.out);\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n\n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (docCollection) -> {\n      if (docCollection == null)\n        return false;\n\n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\"\n              , oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS));\n        }\n        return true;\n      }\n      return false;\n    });\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, TimeOut timeOut)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", timeOut.timeLeft(SECONDS));\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n\n    for (; ; ) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if (slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(),timeOut.timeElapsed(MILLISECONDS) );\n        break;\n      }\n\n      if (timeOut.hasTimedOut()) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStream(System.out);\n        fail(\"Could not find new leader even after waiting for \" + timeOut.timeElapsed(MILLISECONDS) + \"ms\");\n      }\n\n      Thread.sleep(100);\n    }\n\n    zkStateReader.waitForState(\"collection1\", timeOut.timeLeft(SECONDS), TimeUnit.SECONDS, (docCollection) -> {\n      if (docCollection == null)\n        return false;\n\n      Slice slice = docCollection.getSlice(shardName);\n      if (slice != null && slice.getLeader() != null && !slice.getLeader().equals(oldLeader) && slice.getLeader().getState() == Replica.State.ACTIVE) {\n        log.info(\"Old leader {}, new leader {}. New leader got elected in {} ms\", oldLeader, slice.getLeader(), timeOut.timeElapsed(MILLISECONDS) );\n        return true;\n      }\n      return false;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d97b0a5af1d6ccf86352a90571828b70ceb53b4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d97b0a5af1d6ccf86352a90571828b70ceb53b4f":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["7b366e7dd3172289251a86be96031af4002cd19c"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d97b0a5af1d6ccf86352a90571828b70ceb53b4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"7b366e7dd3172289251a86be96031af4002cd19c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"d97b0a5af1d6ccf86352a90571828b70ceb53b4f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","507e7decdf00981d09a74632ea30299a4ce6ba72"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["7b366e7dd3172289251a86be96031af4002cd19c"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["d97b0a5af1d6ccf86352a90571828b70ceb53b4f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}