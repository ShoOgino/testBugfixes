{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}