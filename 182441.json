{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["6b87d1f8719d7f05be003f3477450b74af13706a"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"6b87d1f8719d7f05be003f3477450b74af13706a":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}