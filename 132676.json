{"path":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","commits":[{"id":"3d5335b75378451628ea2c59d34e446d476a78a8","date":1097529879,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    if (mergeFactor < 2)\n      throw new IllegalArgumentException(\"mergeFactor cannot be less than 2\");\n    this.mergeFactor = mergeFactor;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    ensureOpen();\n    if (mergeFactor < 2)\n      throw new IllegalArgumentException(\"mergeFactor cannot be less than 2\");\n    this.mergeFactor = mergeFactor;\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    if (mergeFactor < 2)\n      throw new IllegalArgumentException(\"mergeFactor cannot be less than 2\");\n    this.mergeFactor = mergeFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    ensureOpen();\n    if (mergeFactor < 2)\n      throw new IllegalArgumentException(\"mergeFactor cannot be less than 2\");\n    this.mergeFactor = mergeFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["3d5335b75378451628ea2c59d34e446d476a78a8"],"3d5335b75378451628ea2c59d34e446d476a78a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"3d5335b75378451628ea2c59d34e446d476a78a8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d5335b75378451628ea2c59d34e446d476a78a8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}