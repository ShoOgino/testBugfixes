{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void oneMultiOneSingleValueParameterTest() {\n    TestLongValueStream val1 = new TestLongValueStream();\n    TestDoubleValue val2 = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = AddFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2});\n    assertTrue(uncasted instanceof DoubleValueStream);\n    DoubleValueStream func = (DoubleValueStream) uncasted;\n\n    // No values, One value\n    val1.setValues();\n    val2.setValue(21.56F).setExists(true);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, no value\n    val1.setValues(4L, 10023L);\n    val2.setExists(false);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, one value\n    val1.setValues(4L, 10023L, 48L);\n    val2.setValue(21.56F).setExists(true);\n    Iterator<Double> values = Arrays.asList(25.56, 10044.56, 69.56).iterator();\n    func.streamDoubles( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value, 0.000001);\n    });\n    assertFalse(values.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","sourceNew":"  @Test\n  public void oneMultiOneSingleValueParameterTest() {\n    TestLongValueStream val1 = new TestLongValueStream();\n    TestDoubleValue val2 = new TestDoubleValue();\n\n    AnalyticsValueStream uncasted = AddFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2});\n    assertTrue(uncasted instanceof DoubleValueStream);\n    DoubleValueStream func = (DoubleValueStream) uncasted;\n\n    // No values, One value\n    val1.setValues();\n    val2.setValue(21.56F).setExists(true);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Multiple values, no value\n    val1.setValues(4L, 10023L);\n    val2.setExists(false);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Multiple values, one value\n    val1.setValues(4L, 10023L, 48L);\n    val2.setValue(21.56F).setExists(true);\n    Iterator<Double> values = Arrays.asList(25.56, 10044.56, 69.56).iterator();\n    func.streamDoubles( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value, 0.000001);\n    });\n    assertFalse(values.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void oneMultiOneSingleValueParameterTest() {\n    TestLongValueStream val1 = new TestLongValueStream();\n    TestDoubleValue val2 = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = AddFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2});\n    assertTrue(uncasted instanceof DoubleValueStream);\n    DoubleValueStream func = (DoubleValueStream) uncasted;\n\n    // No values, One value\n    val1.setValues();\n    val2.setValue(21.56F).setExists(true);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, no value\n    val1.setValues(4L, 10023L);\n    val2.setExists(false);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, one value\n    val1.setValues(4L, 10023L, 48L);\n    val2.setValue(21.56F).setExists(true);\n    Iterator<Double> values = Arrays.asList(25.56, 10044.56, 69.56).iterator();\n    func.streamDoubles( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value, 0.000001);\n    });\n    assertFalse(values.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/AddFunctionTest#oneMultiOneSingleValueParameterTest().mjava","sourceNew":"  @Test\n  public void oneMultiOneSingleValueParameterTest() {\n    TestLongValueStream val1 = new TestLongValueStream();\n    TestDoubleValue val2 = new TestDoubleValue();\n\n    AnalyticsValueStream uncasted = AddFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2});\n    assertTrue(uncasted instanceof DoubleValueStream);\n    DoubleValueStream func = (DoubleValueStream) uncasted;\n\n    // No values, One value\n    val1.setValues();\n    val2.setValue(21.56F).setExists(true);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Multiple values, no value\n    val1.setValues(4L, 10023L);\n    val2.setExists(false);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Multiple values, one value\n    val1.setValues(4L, 10023L, 48L);\n    val2.setValue(21.56F).setExists(true);\n    Iterator<Double> values = Arrays.asList(25.56, 10044.56, 69.56).iterator();\n    func.streamDoubles( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value, 0.000001);\n    });\n    assertFalse(values.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void oneMultiOneSingleValueParameterTest() {\n    TestLongValueStream val1 = new TestLongValueStream();\n    TestDoubleValue val2 = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = AddFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2});\n    assertTrue(uncasted instanceof DoubleValueStream);\n    DoubleValueStream func = (DoubleValueStream) uncasted;\n\n    // No values, One value\n    val1.setValues();\n    val2.setValue(21.56F).setExists(true);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, no value\n    val1.setValues(4L, 10023L);\n    val2.setExists(false);\n    func.streamDoubles( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Multiple values, one value\n    val1.setValues(4L, 10023L, 48L);\n    val2.setValue(21.56F).setExists(true);\n    Iterator<Double> values = Arrays.asList(25.56, 10044.56, 69.56).iterator();\n    func.streamDoubles( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value, 0.000001);\n    });\n    assertFalse(values.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}