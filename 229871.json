{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461fea4b90072bede0ef2dc0dba66a8c5dbf1356","date":1316194960,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, DateField.formatExternal(val));\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(val);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, TrieDateField.formatExternal(val));\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, DateField.formatExternal(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, DateFormatUtil.formatExternal(val));\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, TrieDateField.formatExternal(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, val.toInstant().toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, DateFormatUtil.formatExternal(val));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeDate(String,Date).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":"  default void writeDate(String name, Date val) throws IOException {\n    writeDate(name, val.toInstant().toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, val.toInstant().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, val.toInstant().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    writeDate(name, val.toInstant().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d3f6c7717a0f1decd1668144537943efcc70cd95","26dad91f15019714a045b4d8c5f40162b2058b54"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"26dad91f15019714a045b4d8c5f40162b2058b54":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["2106271e380c198349e0f6eac0395bb462913fab"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d3f6c7717a0f1decd1668144537943efcc70cd95","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"c26f00b574427b55127e869b935845554afde1fa":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["2106271e380c198349e0f6eac0395bb462913fab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}