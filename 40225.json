{"path":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(String,boolean).mjava","commits":[{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a searcher searching the index in the named\n   *  directory.  You should pass readOnly=true, since it\n   *  gives much better concurrent performance, unless you\n   *  intend to do write operations (delete documents or\n   *  change norms) with the underlying IndexReader.\n   * @param path directory where IndexReader will be opened\n   * @param readOnly if true, the underlying IndexReader\n   * will be opened readOnly\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, readOnly), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(String,boolean).mjava","sourceNew":"  /** Creates a searcher searching the index in the named\n   *  directory.  You should pass readOnly=true, since it\n   *  gives much better concurrent performance, unless you\n   *  intend to do write operations (delete documents or\n   *  change norms) with the underlying IndexReader.\n   * @param path directory where IndexReader will be opened\n   * @param readOnly if true, the underlying IndexReader\n   * will be opened readOnly\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #IndexSearcher(Directory, boolean)} instead\n   */\n  public IndexSearcher(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, readOnly), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the named\n   *  directory.  You should pass readOnly=true, since it\n   *  gives much better concurrent performance, unless you\n   *  intend to do write operations (delete documents or\n   *  change norms) with the underlying IndexReader.\n   * @param path directory where IndexReader will be opened\n   * @param readOnly if true, the underlying IndexReader\n   * will be opened readOnly\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, readOnly), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Creates a searcher searching the index in the named\n   *  directory.  You should pass readOnly=true, since it\n   *  gives much better concurrent performance, unless you\n   *  intend to do write operations (delete documents or\n   *  change norms) with the underlying IndexReader.\n   * @param path directory where IndexReader will be opened\n   * @param readOnly if true, the underlying IndexReader\n   * will be opened readOnly\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #IndexSearcher(Directory, boolean)} instead\n   */\n  public IndexSearcher(String path, boolean readOnly) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, readOnly), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["ba712167ee848727018d8b77aa0c273839fbe15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["ba712167ee848727018d8b77aa0c273839fbe15c"],"ba712167ee848727018d8b77aa0c273839fbe15c":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}