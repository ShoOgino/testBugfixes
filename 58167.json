{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient.getSolrZooKeeper(), \"/overseer/collection-queue-work\", null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient.getSolrZooKeeper(), \"/overseer/collection-queue-work\", null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d0da1152c8dd998675c30a3f6f599a91770c2b","date":1342792640,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/collection-queue-work\", null);\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient.getSolrZooKeeper(), \"/overseer/collection-queue-work\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/collection-queue-work\", null);\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient.getSolrZooKeeper(), \"/overseer/collection-queue-work\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/collection-queue-work\", null);\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient.getSolrZooKeeper(), \"/overseer/collection-queue-work\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/collection-queue-work\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static OverseerCollectionQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static DistributedQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /* Collection creation queue */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static OverseerCollectionQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /* Collection creation queue */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link DistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getCollectionQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to submit collection API tasks to the Overseer.\n   * <p>\n   * This queue is used internally by the {@link CollectionsHandler} to submit collection API\n   * tasks which are executed by the {@link OverseerCollectionMessageHandler}. The actions supported\n   * by this queue are listed in the {@link org.apache.solr.common.params.CollectionParams.CollectionAction}\n   * enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static OverseerTaskQueue getCollectionQueue(final SolrZkClient zkClient) {\n    return getCollectionQueue(zkClient, new Stats());\n  }\n\n","bugFix":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"af2638813028b254a88b418ebeafb541afb49653":["2209af2c265d2258ec4b29c8cc78622d36994a15","19498030e0adab22f604f935cae3c03dcf0952a6"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["af2638813028b254a88b418ebeafb541afb49653"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"9f45f67a018421da088ea39274f23ad5d339b97d":["c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"19498030e0adab22f604f935cae3c03dcf0952a6":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["af2638813028b254a88b418ebeafb541afb49653"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["9f45f67a018421da088ea39274f23ad5d339b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["9f45f67a018421da088ea39274f23ad5d339b97d","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"af2638813028b254a88b418ebeafb541afb49653":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["c2d0da1152c8dd998675c30a3f6f599a91770c2b","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f45f67a018421da088ea39274f23ad5d339b97d":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","6240b74b884c5587f2a4062dd27d6c32bf228889","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}