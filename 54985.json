{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexQueryDeleteHierarchical().mjava","commits":[{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexQueryDeleteHierarchical().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexQueryDeleteHierarchical(long).mjava","sourceNew":"  public long testIndexQueryDeleteHierarchical() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String collectionName = createAndSetNewDefaultCollection();\n    \n    // index\n    long docId = 42;\n    int topDocsNum = atLeast(5);\n    int childsNum = 5+random().nextInt(5);\n    for (int i = 0; i < topDocsNum; ++i) {\n      UpdateRequest uReq = new UpdateRequest();\n      SolrInputDocument topDocument = new SolrInputDocument();\n      topDocument.addField(\"id\", docId++);\n      topDocument.addField(\"type_s\", \"parent\");\n      topDocument.addField(i + \"parent_f1_s\", \"v1\");\n      topDocument.addField(i + \"parent_f2_s\", \"v2\");\n      \n      \n      for (int index = 0; index < childsNum; ++index) {\n        docId = addChildren(\"child\", topDocument, index, false, docId);\n      }\n      \n      uReq.add(topDocument);\n      assertEquals(i + \"/\" + docId,\n                   0, uReq.process(cloudClient).getStatus());\n    }\n    assertEquals(0, cloudClient.commit().getStatus());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"added_all_top_docs_with_kids\"));\n    \n    // query\n    \n    // parents\n    assertEquals(topDocsNum,\n                 cloudClient.query(new SolrQuery(\"type_s:parent\")).getResults().getNumFound());\n    \n    // childs \n    assertEquals(topDocsNum * childsNum,\n                 cloudClient.query(new SolrQuery(\"type_s:child\")).getResults().getNumFound());\n                 \n    \n    // grandchilds\n    //\n    //each topDoc has t childs where each child has x = 0 + 2 + 4 + ..(t-1)*2 grands\n    //x = 2 * (1 + 2 + 3 +.. (t-1)) => arithmetic summ of t-1 \n    //x = 2 * ((t-1) * t / 2) = t * (t - 1)\n    assertEquals(topDocsNum * childsNum * (childsNum - 1),\n                 cloudClient.query(new SolrQuery(\"type_s:grand\")).getResults().getNumFound());\n    \n    //delete\n    assertEquals(0, cloudClient.deleteByQuery(\"*:*\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"delAll\"));\n    \n    return docId;\n  }\n\n","sourceOld":"  private long testIndexQueryDeleteHierarchical(long docId) throws Exception {\n    //index\n    int topDocsNum = atLeast(10);\n    int childsNum = 5+random().nextInt(5);\n    for (int i = 0; i < topDocsNum; ++i) {\n      UpdateRequest uReq = new UpdateRequest();\n      SolrInputDocument topDocument = new SolrInputDocument();\n      topDocument.addField(\"id\", docId++);\n      topDocument.addField(\"type_s\", \"parent\");\n      topDocument.addField(i + \"parent_f1_s\", \"v1\");\n      topDocument.addField(i + \"parent_f2_s\", \"v2\");\n      \n      \n      for (int index = 0; index < childsNum; ++index) {\n        docId = addChildren(\"child\", topDocument, index, false, docId);\n      }\n      \n      uReq.add(topDocument);\n      uReq.process(cloudClient);\n      uReq.process(controlClient);\n    }\n    \n    commit();\n    checkShardConsistency();\n    assertDocCounts(VERBOSE);\n    \n    //query\n    // parents\n    SolrQuery query = new SolrQuery(\"type_s:parent\");\n    QueryResponse results = cloudClient.query(query);\n    assertEquals(topDocsNum, results.getResults().getNumFound());\n    \n    //childs \n    query = new SolrQuery(\"type_s:child\");\n    results = cloudClient.query(query);\n    assertEquals(topDocsNum * childsNum, results.getResults().getNumFound());\n    \n    //grandchilds\n    query = new SolrQuery(\"type_s:grand\");\n    results = cloudClient.query(query);\n    //each topDoc has t childs where each child has x = 0 + 2 + 4 + ..(t-1)*2 grands\n    //x = 2 * (1 + 2 + 3 +.. (t-1)) => arithmetic summ of t-1 \n    //x = 2 * ((t-1) * t / 2) = t * (t - 1)\n    assertEquals(topDocsNum * childsNum * (childsNum - 1), results.getResults().getNumFound());\n    \n    //delete\n    del(\"*:*\");\n    commit();\n    \n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexQueryDeleteHierarchical().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexQueryDeleteHierarchical(long).mjava","sourceNew":"  public long testIndexQueryDeleteHierarchical() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String collectionName = createAndSetNewDefaultCollection();\n    \n    // index\n    long docId = 42;\n    int topDocsNum = atLeast(5);\n    int childsNum = 5+random().nextInt(5);\n    for (int i = 0; i < topDocsNum; ++i) {\n      UpdateRequest uReq = new UpdateRequest();\n      SolrInputDocument topDocument = new SolrInputDocument();\n      topDocument.addField(\"id\", docId++);\n      topDocument.addField(\"type_s\", \"parent\");\n      topDocument.addField(i + \"parent_f1_s\", \"v1\");\n      topDocument.addField(i + \"parent_f2_s\", \"v2\");\n      \n      \n      for (int index = 0; index < childsNum; ++index) {\n        docId = addChildren(\"child\", topDocument, index, false, docId);\n      }\n      \n      uReq.add(topDocument);\n      assertEquals(i + \"/\" + docId,\n                   0, uReq.process(cloudClient).getStatus());\n    }\n    assertEquals(0, cloudClient.commit().getStatus());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"added_all_top_docs_with_kids\"));\n    \n    // query\n    \n    // parents\n    assertEquals(topDocsNum,\n                 cloudClient.query(new SolrQuery(\"type_s:parent\")).getResults().getNumFound());\n    \n    // childs \n    assertEquals(topDocsNum * childsNum,\n                 cloudClient.query(new SolrQuery(\"type_s:child\")).getResults().getNumFound());\n                 \n    \n    // grandchilds\n    //\n    //each topDoc has t childs where each child has x = 0 + 2 + 4 + ..(t-1)*2 grands\n    //x = 2 * (1 + 2 + 3 +.. (t-1)) => arithmetic summ of t-1 \n    //x = 2 * ((t-1) * t / 2) = t * (t - 1)\n    assertEquals(topDocsNum * childsNum * (childsNum - 1),\n                 cloudClient.query(new SolrQuery(\"type_s:grand\")).getResults().getNumFound());\n    \n    //delete\n    assertEquals(0, cloudClient.deleteByQuery(\"*:*\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"delAll\"));\n    \n    return docId;\n  }\n\n","sourceOld":"  private long testIndexQueryDeleteHierarchical(long docId) throws Exception {\n    //index\n    int topDocsNum = atLeast(10);\n    int childsNum = 5+random().nextInt(5);\n    for (int i = 0; i < topDocsNum; ++i) {\n      UpdateRequest uReq = new UpdateRequest();\n      SolrInputDocument topDocument = new SolrInputDocument();\n      topDocument.addField(\"id\", docId++);\n      topDocument.addField(\"type_s\", \"parent\");\n      topDocument.addField(i + \"parent_f1_s\", \"v1\");\n      topDocument.addField(i + \"parent_f2_s\", \"v2\");\n      \n      \n      for (int index = 0; index < childsNum; ++index) {\n        docId = addChildren(\"child\", topDocument, index, false, docId);\n      }\n      \n      uReq.add(topDocument);\n      uReq.process(cloudClient);\n      uReq.process(controlClient);\n    }\n    \n    commit();\n    checkShardConsistency();\n    assertDocCounts(VERBOSE);\n    \n    //query\n    // parents\n    SolrQuery query = new SolrQuery(\"type_s:parent\");\n    QueryResponse results = cloudClient.query(query);\n    assertEquals(topDocsNum, results.getResults().getNumFound());\n    \n    //childs \n    query = new SolrQuery(\"type_s:child\");\n    results = cloudClient.query(query);\n    assertEquals(topDocsNum * childsNum, results.getResults().getNumFound());\n    \n    //grandchilds\n    query = new SolrQuery(\"type_s:grand\");\n    results = cloudClient.query(query);\n    //each topDoc has t childs where each child has x = 0 + 2 + 4 + ..(t-1)*2 grands\n    //x = 2 * (1 + 2 + 3 +.. (t-1)) => arithmetic summ of t-1 \n    //x = 2 * ((t-1) * t / 2) = t * (t - 1)\n    assertEquals(topDocsNum * childsNum * (childsNum - 1), results.getResults().getNumFound());\n    \n    //delete\n    del(\"*:*\");\n    commit();\n    \n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}