{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Map<String, List<ReplicaInfo>>> res = new HashMap<>();\n    // TODO: probably needs special treatment for \"metrics:solr.core...\" tags\n    for (ReplicaInfo r : replicas) {\n      Map<String, List<ReplicaInfo>> perCollection = res.computeIfAbsent(r.getCollection(), s -> new HashMap<>());\n      List<ReplicaInfo> perShard = perCollection.computeIfAbsent(r.getShard(), s -> new ArrayList<>());\n      perShard.add(r);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c5018985f5ddacff38d20cd4b39cf3c885fa234","date":1547081878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Map<String, List<ReplicaInfo>>> res = new HashMap<>();\n    // TODO: probably needs special treatment for \"metrics:solr.core...\" tags\n    for (ReplicaInfo r : replicas) {\n      Map<String, List<ReplicaInfo>> perCollection = res.computeIfAbsent(r.getCollection(), Utils.NEW_HASHMAP_FUN);\n      List<ReplicaInfo> perShard = perCollection.computeIfAbsent(r.getShard(), Utils.NEW_ARRAYLIST_FUN);\n      perShard.add(r);\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Map<String, List<ReplicaInfo>>> res = new HashMap<>();\n    // TODO: probably needs special treatment for \"metrics:solr.core...\" tags\n    for (ReplicaInfo r : replicas) {\n      Map<String, List<ReplicaInfo>> perCollection = res.computeIfAbsent(r.getCollection(), s -> new HashMap<>());\n      List<ReplicaInfo> perShard = perCollection.computeIfAbsent(r.getShard(), s -> new ArrayList<>());\n      perShard.add(r);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Map<String, List<ReplicaInfo>>> res = new HashMap<>();\n    // TODO: probably needs special treatment for \"metrics:solr.core...\" tags\n    for (ReplicaInfo r : replicas) {\n      Map<String, List<ReplicaInfo>> perCollection = res.computeIfAbsent(r.getCollection(), Utils.NEW_HASHMAP_FUN);\n      List<ReplicaInfo> perShard = perCollection.computeIfAbsent(r.getShard(), Utils.NEW_ARRAYLIST_FUN);\n      perShard.add(r);\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Map<String, List<ReplicaInfo>>> res = new HashMap<>();\n    // TODO: probably needs special treatment for \"metrics:solr.core...\" tags\n    for (ReplicaInfo r : replicas) {\n      Map<String, List<ReplicaInfo>> perCollection = res.computeIfAbsent(r.getCollection(), Utils.NEW_HASHMAP_FUN);\n      List<ReplicaInfo> perShard = perCollection.computeIfAbsent(r.getShard(), Utils.NEW_ARRAYLIST_FUN);\n      perShard.add(r);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c5018985f5ddacff38d20cd4b39cf3c885fa234":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["0c5018985f5ddacff38d20cd4b39cf3c885fa234"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"0c5018985f5ddacff38d20cd4b39cf3c885fa234":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["0c5018985f5ddacff38d20cd4b39cf3c885fa234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}