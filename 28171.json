{"path":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#exists(int).mjava","sourceNew":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean exists(int doc) {\n    // this could be faster by estimating where in the list the doc is likely to appear,\n    // but we should get away from using exists() anyway.\n    int low = 0;\n    int high = docs.length-1;\n    // binary search\n    while (low <= high) {\n      int mid = (low+high) >>> 1;\n      int docb = docs[mid];\n\n      if (docb < doc) {\n        low = mid+1;\n      }\n      else if (docb > doc) {\n        high = mid-1;\n      }\n      else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}