{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","commits":[{"id":"84e6840c8664c06adc970e9491e04a67505396ad","date":1435200346,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction */\n  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(disi);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(disi);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f33f3feaa8138843f86ea31f1284b79c331f4a","date":1441788048,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  /** Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction */\n  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionScorer.class) {\n      addIterator(((ConjunctionScorer) disi).disi, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(disi);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(disi);\n      }\n    }\n  }\n\n","sourceOld":"  /** Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction */\n  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(disi);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(disi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  /** Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction */\n  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionScorer.class) {\n      addIterator(((ConjunctionScorer) disi).disi, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(disi);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(disi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4566afb2ee65953d186f4f93735fde23674641","date":1466575467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else if (disi.getClass() == BitSetConjunctionDISI.class) {\n      BitSetConjunctionDISI conjunction = (BitSetConjunctionDISI) disi;\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.bitSetIterators);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af167ac924ed00018fecc030b0a48b8b795c582e","date":1466596267,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else if (disi.getClass() == BitSetConjunctionDISI.class) {\n      BitSetConjunctionDISI conjunction = (BitSetConjunctionDISI) disi;\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.bitSetIterators);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addIterator(DocIdSetIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    TwoPhaseIterator twoPhase = TwoPhaseIterator.unwrap(disi);\n    if (twoPhase != null) {\n      addTwoPhaseIterator(twoPhase, allIterators, twoPhaseIterators);\n    } else if (disi.getClass() == ConjunctionDISI.class) { // Check for exactly this class for collapsing\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead1);\n      allIterators.add(conjunction.lead2);\n      Collections.addAll(allIterators, conjunction.others);\n    } else if (disi.getClass() == BitSetConjunctionDISI.class) {\n      BitSetConjunctionDISI conjunction = (BitSetConjunctionDISI) disi;\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.bitSetIterators);\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","sourceOld":"  private static void addIterator(DocIdSetIterator disi, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    // Check for exactly this class for collapsing. Subclasses can do their own optimizations.\n    if (disi.getClass() == ConjunctionDISI.class || disi.getClass() == TwoPhase.class) {\n      ConjunctionDISI conjunction = (ConjunctionDISI) disi;\n      // subconjuctions have already split themselves into two phase iterators and others, so we can take those\n      // iterators as they are and move them up to this conjunction\n      allIterators.add(conjunction.lead);\n      Collections.addAll(allIterators, conjunction.others);\n      if (conjunction.getClass() == TwoPhase.class) {\n        TwoPhase twoPhase = (TwoPhase) conjunction;\n        Collections.addAll(twoPhaseIterators, twoPhase.twoPhaseView.twoPhaseIterators);\n      }\n    } else {\n      allIterators.add(disi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["84e6840c8664c06adc970e9491e04a67505396ad"],"af167ac924ed00018fecc030b0a48b8b795c582e":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","2e4566afb2ee65953d186f4f93735fde23674641"],"84e6840c8664c06adc970e9491e04a67505396ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e4566afb2ee65953d186f4f93735fde23674641":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","af167ac924ed00018fecc030b0a48b8b795c582e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af167ac924ed00018fecc030b0a48b8b795c582e"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"af167ac924ed00018fecc030b0a48b8b795c582e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84e6840c8664c06adc970e9491e04a67505396ad":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84e6840c8664c06adc970e9491e04a67505396ad"],"2e4566afb2ee65953d186f4f93735fde23674641":["af167ac924ed00018fecc030b0a48b8b795c582e"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["af167ac924ed00018fecc030b0a48b8b795c582e","2e4566afb2ee65953d186f4f93735fde23674641"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}