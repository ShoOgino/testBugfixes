{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll  collection name\n   * @param shard shard name\n   * @param type  replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount+1);\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll  collection name\n   * @param shard shard name\n   * @param type  replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount+1);\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    lazyCopyReplicas(coll, shard);\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    lazyCopyReplicas(coll, shard);\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<Replica>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<Replica> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    Replica ri = new Replica(replicaname, this.node, coll, shard, replicaname,\n        Replica.State.ACTIVE, type != null ? type : Replica.Type.NRT, Collections.emptyMap());\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    lazyCopyReplicas(coll, shard);\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll           collection name\n   * @param shard          shard name\n   * @param type           replica type\n   * @param recursionCount the number of times we have recursed to add more replicas\n   * @param strictMode     whether suggester is operating in strict mode or not\n   */\n  Row addReplica(String coll, String shard, Replica.Type type, int recursionCount, boolean strictMode) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    lazyCopyReplicas(coll, shard);\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = null;\n    row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<Replica>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<Replica> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"SYNTHETIC.\" + new Random().nextInt(1000) + 1000;\n    Replica ri = new Replica(replicaname, this.node, coll, shard, replicaname,\n        Replica.State.ACTIVE, type != null ? type : Replica.Type.NRT, Collections.emptyMap());\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri, opCollector, strictMode);\n    }\n    for (OperationInfo op : furtherOps) {\n      if (op.isAdd) {\n        row = row.session.getNode(op.node).addReplica(op.coll, op.shard, op.type, recursionCount + 1, strictMode);\n      } else {\n        row.session.getNode(op.node).removeReplica(op.coll, op.shard, op.type, recursionCount + 1);\n      }\n    }\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["6428b274f6593f368c4f838379620e7f5d196d65"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"6428b274f6593f368c4f838379620e7f5d196d65":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["6428b274f6593f368c4f838379620e7f5d196d65"],"27639bb5e041490ce599065875dd2f6d8beef62a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}