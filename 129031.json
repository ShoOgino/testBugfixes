{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n\n","sourceOld":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","sourceOld":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n\n","bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n\n","sourceOld":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n\n","sourceOld":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    // Reducing is always done over equality, so always use an EqualTo comparator\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#ReducerStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ReduceOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n\n    ReduceOperation reduceOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof ReduceOperation) {\n        reduceOperation = (ReduceOperation) operation;\n      } else {\n        throw new IOException(\"The ReducerStream requires a ReduceOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The ReducerStream requires a ReduceOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue) byExpression.getParameter()).getValue(), FieldEqualitor.class),\n         reduceOperation);\n  }\n\n","sourceOld":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9","c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","0891a6931fc352fc7e61f2752ef9add758d3fb89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}