{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert directory.fileExists(fileName): \"file \" + fileName + \" does not exist\";\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(directory, false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7acb3c7b3ad0a84a18fc0a9d6585ada371859905","date":1468229576,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcbdc4d70424f69441091cee35f497a60c60bdb","date":1468245582,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#filesExist(SegmentInfos).mjava","sourceNew":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","sourceOld":"  // called only from assert\n  private boolean filesExist(SegmentInfos toSync) throws IOException {\n    \n    Collection<String> files = toSync.files(false);\n    for(final String fileName: files) {\n      assert slowFileExists(directory, fileName): \"file \" + fileName + \" does not exist; files=\" + Arrays.toString(directory.listAll());\n      // If this trips it means we are missing a call to\n      // .checkpoint somewhere, because by the time we\n      // are called, deleter should know about every\n      // file referenced by the current head\n      // segmentInfos:\n      assert deleter.exists(fileName): \"IndexFileDeleter doesn't know about file \" + fileName;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7acb3c7b3ad0a84a18fc0a9d6585ada371859905":["fba839b7548159227edcb740033d0f814b323d8d"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fba839b7548159227edcb740033d0f814b323d8d":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["fba839b7548159227edcb740033d0f814b323d8d","7acb3c7b3ad0a84a18fc0a9d6585ada371859905"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fba839b7548159227edcb740033d0f814b323d8d","2dcbdc4d70424f69441091cee35f497a60c60bdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dcbdc4d70424f69441091cee35f497a60c60bdb"]},"commit2Childs":{"7acb3c7b3ad0a84a18fc0a9d6585ada371859905":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["fba839b7548159227edcb740033d0f814b323d8d"],"fba839b7548159227edcb740033d0f814b323d8d":["7acb3c7b3ad0a84a18fc0a9d6585ada371859905","2dcbdc4d70424f69441091cee35f497a60c60bdb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}