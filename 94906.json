{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","commits":[{"id":"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b","date":1385313290,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"/dev/null","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws SolrServerException, IOException {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61","date":1385314200,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws SolrServerException, IOException {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"/dev/null","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    qclient.shutdown();\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n    qclient.shutdown();\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    qclient.shutdown();\n    \n    qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n    qclient.shutdown();\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrServer qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    qclient.shutdown();\n    \n    qclient = new HttpSolrServer(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n    qclient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n\n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\")) {\n\n      // it might take a moment for the proxy node to see us in their cloud state\n      waitForNon403or404or503(qclient);\n\n      // add a doc\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs);\n      qclient.add(doc);\n      qclient.commit();\n\n\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\")) {\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs + 1);\n      qclient.add(doc);\n      qclient.commit();\n\n      query = new SolrQuery(\"*:*\");\n      query.set(\"rows\", 0);\n      results = qclient.query(query);\n      assertEquals(docs, results.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n    HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\");\n    \n    // it might take a moment for the proxy node to see us in their cloud state\n    waitForNon403or404or503(qclient);\n    \n    // add a doc\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", docs);\n    qclient.add(doc);\n    qclient.commit();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    qclient.shutdown();\n    \n    qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\");\n    results = qclient.query(query);\n    assertEquals(docs - 1, results.getResults().getNumFound());\n    \n    doc = new SolrInputDocument();\n    doc.addField(\"id\", docs + 1);\n    qclient.add(doc);\n    qclient.commit();\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"rows\", 0);\n    results = qclient.query(query);\n    assertEquals(docs, results.getResults().getNumFound());\n    qclient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n\n    try (HttpSolrClient qclient = getHttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\")) {\n\n      // it might take a moment for the proxy node to see us in their cloud state\n      waitForNon403or404or503(qclient);\n\n      // add a doc\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs);\n      qclient.add(doc);\n      qclient.commit();\n\n\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient qclient = getHttpSolrClient(baseUrl + \"/onenodecollection\")) {\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs + 1);\n      qclient.add(doc);\n      qclient.commit();\n\n      query = new SolrQuery(\"*:*\");\n      query.set(\"rows\", 0);\n      results = qclient.query(query);\n      assertEquals(docs, results.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n\n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\")) {\n\n      // it might take a moment for the proxy node to see us in their cloud state\n      waitForNon403or404or503(qclient);\n\n      // add a doc\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs);\n      qclient.add(doc);\n      qclient.commit();\n\n\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\")) {\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs + 1);\n      qclient.add(doc);\n      qclient.commit();\n\n      query = new SolrQuery(\"*:*\");\n      query.set(\"rows\", 0);\n      results = qclient.query(query);\n      assertEquals(docs, results.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addAndQueryDocs(String,int).mjava","sourceNew":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n\n    try (HttpSolrClient qclient = getHttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\")) {\n\n      // it might take a moment for the proxy node to see us in their cloud state\n      waitForNon403or404or503(qclient);\n\n      // add a doc\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs);\n      qclient.add(doc);\n      qclient.commit();\n\n\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient qclient = getHttpSolrClient(baseUrl + \"/onenodecollection\")) {\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs + 1);\n      qclient.add(doc);\n      qclient.commit();\n\n      query = new SolrQuery(\"*:*\");\n      query.set(\"rows\", 0);\n      results = qclient.query(query);\n      assertEquals(docs, results.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  // 2 docs added every call\n  private void addAndQueryDocs(final String baseUrl, int docs)\n      throws Exception {\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n\n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\" + \"core\")) {\n\n      // it might take a moment for the proxy node to see us in their cloud state\n      waitForNon403or404or503(qclient);\n\n      // add a doc\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs);\n      qclient.add(doc);\n      qclient.commit();\n\n\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + \"/onenodecollection\")) {\n      QueryResponse results = qclient.query(query);\n      assertEquals(docs - 1, results.getResults().getNumFound());\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", docs + 1);\n      qclient.add(doc);\n      qclient.commit();\n\n      query = new SolrQuery(\"*:*\");\n      query.set(\"rows\", 0);\n      results = qclient.query(query);\n      assertEquals(docs, results.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61":["8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["ed07fa89dce08f76b5f5d17f2b6e8f92224e3b61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}