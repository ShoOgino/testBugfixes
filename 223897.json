{"path":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","commits":[{"id":"752049b8e30557f067592844bff40caaea288062","date":1490707105,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/RuleSorter#RuleSorter(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream().map(Clause::new).collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":"  public RuleSorter(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream().map(Clause::new).collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream().map(Clause::new).collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"752049b8e30557f067592844bff40caaea288062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["752049b8e30557f067592844bff40caaea288062"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["b59075a857a3d25d834f6f408491b40845b8ced0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"752049b8e30557f067592844bff40caaea288062":["b59075a857a3d25d834f6f408491b40845b8ced0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["752049b8e30557f067592844bff40caaea288062","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}