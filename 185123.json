{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#nextPolygon().mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#nextPolygon().mjava","pathOld":"/dev/null","sourceNew":"  /** returns next pseudorandom polygon */\n  public static XYPolygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radius = random().nextDouble() * 0.5 * Float.MAX_VALUE + 1.0;\n        try {\n          return createRegularPolygon(nextDouble(), nextDouble(), radius, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    XYRectangle box = nextBoxInternal();\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#nextPolygon().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static XYPolygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radius = random().nextDouble() * 0.5 * Float.MAX_VALUE + 1.0;\n        try {\n          return createRegularPolygon(nextDouble(), nextDouble(), radius, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    XYRectangle box = nextBoxInternal();\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static XYPolygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radius = random().nextDouble() * 0.5 * Float.MAX_VALUE + 1.0;\n        try {\n          return createRegularPolygon(nextDouble(), nextDouble(), radius, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    XYRectangle box = nextBoxInternal();\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}