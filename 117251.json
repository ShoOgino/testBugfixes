{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb4d0cfb021fa1b0c1e44571968b254f379ac6f","date":1564497726,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    } else if(value instanceof String) {\n      return new BigDecimal((String)value);\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      if(value instanceof List) {\n        if(((List)value).get(0) instanceof Number) {\n          return  value;\n        }\n      }\n\n      return ((Collection<?>) value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator#normalizeInputType(Object).mjava","sourceNew":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    } else if(value instanceof String) {\n      return new BigDecimal((String)value);\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      if(value instanceof List) {\n        if(((List)value).get(0) instanceof Number) {\n          return  value;\n        }\n      }\n\n      return ((Collection<?>) value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","sourceOld":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f","f8061ddd97f3352007d927dae445884a6f3d857b"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}