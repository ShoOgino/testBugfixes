{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","commits":[{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a118fcb91dbf1aea61227687b4241d7b136558d","date":1323554852,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","sourceNew":"    public void undeleteAll()  {\n      for (IndexReader r : subReaders) {\n        ((FakeDeleteAtomicIndexReader) r).undeleteAll();\n      }\n    }\n\n","sourceOld":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","sourceNew":"    public void undeleteAll()  {\n      for (IndexReader r : subReaders) {\n        ((FakeDeleteAtomicIndexReader) r).undeleteAll();\n      }\n    }\n\n","sourceOld":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","sourceNew":"    public void undeleteAll()  {\n      for (IndexReader r : subReaders) {\n        ((FakeDeleteAtomicIndexReader) r).undeleteAll();\n      }\n    }\n\n","sourceOld":"    public void undeleteAll()  {\n      for (IndexReader r : subReaders) {\n        ((FakeDeleteAtomicIndexReader) r).undeleteAll();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7a118fcb91dbf1aea61227687b4241d7b136558d"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7a118fcb91dbf1aea61227687b4241d7b136558d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7a118fcb91dbf1aea61227687b4241d7b136558d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}