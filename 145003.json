{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","commits":[{"id":"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13","date":1325610499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a576b7d20be184148e56fa5313311f124583bf8","date":1332209365,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","sourceNew":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.CompoundFileExtractor [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","sourceNew":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.CompoundFileExtractor [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.CompoundFileExtractor [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1a576b7d20be184148e56fa5313311f124583bf8"],"1a576b7d20be184148e56fa5313311f124583bf8":["98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13"],"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a576b7d20be184148e56fa5313311f124583bf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13":["1a576b7d20be184148e56fa5313311f124583bf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}