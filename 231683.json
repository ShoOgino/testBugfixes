{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        char[] chArray = termAtt.termBuffer();\n        int chLen = termAtt.termLength();\n        // TODO: iterate codepoints to support supp. characters\n        for (int i = 0; i < chLen; i++)\n        {\n          chArray[i] = (char) lowerCase(chArray[i]);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        char[] chArray = termAtt.termBuffer();\n        int chLen = termAtt.termLength();\n        // TODO: iterate codepoints to support supp. characters\n        for (int i = 0; i < chLen; i++)\n        {\n          chArray[i] = (char) lowerCase(chArray[i]);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d904121e1b8a2d91a857a0129c926ce927059a01","date":1274095684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        char[] chArray = termAtt.termBuffer();\n        int chLen = termAtt.termLength();\n        // TODO: iterate codepoints to support supp. characters\n        for (int i = 0; i < chLen; i++)\n        {\n          chArray[i] = (char) lowerCase(chArray[i]);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d904121e1b8a2d91a857a0129c926ce927059a01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d904121e1b8a2d91a857a0129c926ce927059a01":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["d904121e1b8a2d91a857a0129c926ce927059a01"],"d904121e1b8a2d91a857a0129c926ce927059a01":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}