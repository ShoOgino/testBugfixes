{"path":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    //  test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    //  test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    //  test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    //  test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\", \"B\" },       // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\", \"C\" },  // 3\n        new String[]{ \"B\" },            // 4\n        new String[]{ \"B\", \"C\" }        // 5\n        )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"C\"))), 3), Occur.SHOULD)\n        .build();\n\n    Scorer scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    scorer.setMinCompetitiveScore(4);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1 + 3, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1 + 3, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    scorer.setMinCompetitiveScore(10);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    //  test a filtered disjunction\n    query = new BooleanQuery.Builder()\n        .add(\n            new BooleanQuery.Builder()\n            .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n            .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n            .build(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.FILTER)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(5, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(2);\n\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    // Now test a filtered disjunction with a MUST_NOT\n    query = new BooleanQuery.Builder()\n        .add(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\"))), 2), Occur.SHOULD)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\"))), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"C\")), Occur.MUST_NOT)\n        .build();\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = searcher\n        .createNormalizedWeight(query, ScoreMode.TOP_SCORES)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n\n    scorer.setMinCompetitiveScore(3);\n\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(2 + 1, scorer.score(), 0);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["523cc6563c99a55527ef7993efc5413c6648852d","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}