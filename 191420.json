{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}