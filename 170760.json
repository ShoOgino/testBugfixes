{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(InvertedFields,InvertedFields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on InvertedFields are the same\n   */\n  public void assertFieldStatistics(InvertedFields leftFields, InvertedFields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(InvertedFields,InvertedFields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on InvertedFields are the same\n   */\n  public void assertFieldStatistics(InvertedFields leftFields, InvertedFields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.getUniqueFieldCount() != -1 && rightFields.getUniqueFieldCount() != -1) {\n      assertEquals(info, leftFields.getUniqueFieldCount(), rightFields.getUniqueFieldCount());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca5f6409bcf8211cae1732125479d212adb0acac","date":1345559953,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n    \n    if (leftFields.getUniqueTermCount() != -1 && rightFields.getUniqueTermCount() != -1) {\n      assertEquals(info, leftFields.getUniqueTermCount(), rightFields.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldStatisticsEquals(String,Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldStatistics(Fields,Fields).mjava","sourceNew":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatisticsEquals(String info, Fields leftFields, Fields rightFields) throws IOException {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that top-level statistics on Fields are the same \n   */\n  public void assertFieldStatistics(Fields leftFields, Fields rightFields) throws Exception {\n    if (leftFields.size() != -1 && rightFields.size() != -1) {\n      assertEquals(info, leftFields.size(), rightFields.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","ca5f6409bcf8211cae1732125479d212adb0acac"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ca5f6409bcf8211cae1732125479d212adb0acac":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["ca5f6409bcf8211cae1732125479d212adb0acac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["001b25b42373b22a52f399dbf072f1224632e8e6","5a238fc456663f685a9db1ed8d680e348bb45171","ca5f6409bcf8211cae1732125479d212adb0acac"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"ca5f6409bcf8211cae1732125479d212adb0acac":["001b25b42373b22a52f399dbf072f1224632e8e6","51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}