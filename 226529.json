{"path":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","commits":[{"id":"17dd3c5fb284bc74b1864feb92f12d8d4a9205f7","date":1481060823,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","pathOld":"/dev/null","sourceNew":"  private void initHostname() {\n    if (null != System.getProperty(PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP, null)) {\n      log.info(\"Resolving canonical hostname for local host prevented due to '{}' sysprop\",\n               PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n      hostname = null;\n      return;\n    }\n    \n    RTimer timer = new RTimer();\n    try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (Exception e) {\n      log.warn(\"Unable to resolve canonical hostname for local host, possible DNS misconfiguration. \" +\n               \"Set the '\"+PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP+\"' sysprop to true on startup to \" +\n               \"prevent future lookups if DNS can not be fixed.\", e);\n      hostname = null;\n      return;\n    }\n    timer.stop();\n    \n    if (15000D < timer.getTime()) {\n      String readableTime = String.format(Locale.ROOT, \"%.3f\", (timer.getTime() / 1000));\n      log.warn(\"Resolving canonical hostname for local host took {} seconds, possible DNS misconfiguration. \" +\n               \"Set the '{}' sysprop to true on startup to prevent future lookups if DNS can not be fixed.\",\n               readableTime, PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","pathOld":"/dev/null","sourceNew":"  private void initHostname() {\n    if (null != System.getProperty(PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP, null)) {\n      log.info(\"Resolving canonical hostname for local host prevented due to '{}' sysprop\",\n               PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n      hostname = null;\n      return;\n    }\n    \n    RTimer timer = new RTimer();\n    try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (Exception e) {\n      log.warn(\"Unable to resolve canonical hostname for local host, possible DNS misconfiguration. \" +\n               \"Set the '\"+PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP+\"' sysprop to true on startup to \" +\n               \"prevent future lookups if DNS can not be fixed.\", e);\n      hostname = null;\n      return;\n    }\n    timer.stop();\n    \n    if (15000D < timer.getTime()) {\n      String readableTime = String.format(Locale.ROOT, \"%.3f\", (timer.getTime() / 1000));\n      log.warn(\"Resolving canonical hostname for local host took {} seconds, possible DNS misconfiguration. \" +\n               \"Set the '{}' sysprop to true on startup to prevent future lookups if DNS can not be fixed.\",\n               readableTime, PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","pathOld":"/dev/null","sourceNew":"  private void initHostname() {\n    if (null != System.getProperty(PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP, null)) {\n      log.info(\"Resolving canonical hostname for local host prevented due to '{}' sysprop\",\n               PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n      hostname = null;\n      return;\n    }\n    \n    RTimer timer = new RTimer();\n    try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (Exception e) {\n      log.warn(\"Unable to resolve canonical hostname for local host, possible DNS misconfiguration. \" +\n               \"Set the '\"+PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP+\"' sysprop to true on startup to \" +\n               \"prevent future lookups if DNS can not be fixed.\", e);\n      hostname = null;\n      return;\n    }\n    timer.stop();\n    \n    if (15000D < timer.getTime()) {\n      String readableTime = String.format(Locale.ROOT, \"%.3f\", (timer.getTime() / 1000));\n      log.warn(\"Resolving canonical hostname for local host took {} seconds, possible DNS misconfiguration. \" +\n               \"Set the '{}' sysprop to true on startup to prevent future lookups if DNS can not be fixed.\",\n               readableTime, PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#initHostname().mjava","sourceNew":"  private void initHostname() {\n    if (null != System.getProperty(PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP, null)) {\n      log.info(\"Resolving canonical hostname for local host prevented due to '{}' sysprop\",\n               PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n      hostname = null;\n      return;\n    }\n    \n    RTimer timer = new RTimer();\n    try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (Exception e) {\n      log.warn(\"Unable to resolve canonical hostname for local host, possible DNS misconfiguration. SET THE '{}' {}\"\n          , PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP\n          , \" sysprop to true on startup to prevent future lookups if DNS can not be fixed.\", e);\n      hostname = null;\n      return;\n    }\n    timer.stop();\n    \n    if (15000D < timer.getTime()) {\n      String readableTime = String.format(Locale.ROOT, \"%.3f\", (timer.getTime() / 1000));\n      log.warn(\"Resolving canonical hostname for local host took {} seconds, possible DNS misconfiguration. Set the '{}' {}\"\n          , readableTime, PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP,\n          \" sysprop to true on startup to prevent future lookups if DNS can not be fixed.\");\n    }\n  }\n\n","sourceOld":"  private void initHostname() {\n    if (null != System.getProperty(PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP, null)) {\n      log.info(\"Resolving canonical hostname for local host prevented due to '{}' sysprop\",\n               PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n      hostname = null;\n      return;\n    }\n    \n    RTimer timer = new RTimer();\n    try {\n      InetAddress addr = InetAddress.getLocalHost();\n      hostname = addr.getCanonicalHostName();\n    } catch (Exception e) {\n      log.warn(\"Unable to resolve canonical hostname for local host, possible DNS misconfiguration. \" +\n               \"Set the '\"+PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP+\"' sysprop to true on startup to \" +\n               \"prevent future lookups if DNS can not be fixed.\", e);\n      hostname = null;\n      return;\n    }\n    timer.stop();\n    \n    if (15000D < timer.getTime()) {\n      String readableTime = String.format(Locale.ROOT, \"%.3f\", (timer.getTime() / 1000));\n      log.warn(\"Resolving canonical hostname for local host took {} seconds, possible DNS misconfiguration. \" +\n               \"Set the '{}' sysprop to true on startup to prevent future lookups if DNS can not be fixed.\",\n               readableTime, PREVENT_REVERSE_DNS_OF_LOCALHOST_SYSPROP);\n    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17dd3c5fb284bc74b1864feb92f12d8d4a9205f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17dd3c5fb284bc74b1864feb92f12d8d4a9205f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"17dd3c5fb284bc74b1864feb92f12d8d4a9205f7":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["575e66bd4b2349209027f6801184da7fc3cba13f","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17dd3c5fb284bc74b1864feb92f12d8d4a9205f7","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9856095f7afb5a607bf5e65077615ed91273508c"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}