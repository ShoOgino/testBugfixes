{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitable(ScopeVisitable).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitable(ScopeVisitable).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitable(ScopeVisitable).mjava","sourceNew":"    /**\n     * @param visitable -\n     *            the instance to register\n     * @throws RegistryException\n     * @see ScopeVisitable\n     */\n    public synchronized void registerScopeVisitable(\n            final ScopeVisitable visitable) throws RegistryException {\n        if (visitable == null)\n            throw new IllegalArgumentException(\"visitable must not be null\");\n\n        Scope scope = visitable.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitable has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitable -- \" + visitable.getClass());\n        if (scope.scope() == Scope.ScopeType.REQUEST\n                && this.requestVisitable == null)\n            this.requestVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable == null)\n            this.sessionVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable == null)\n            this.sessionVisitable = visitable;\n\n        if (!this.visitorBuffer.isEmpty()) {\n\n            List<ScopeVisitor> tempList = this.visitorBuffer;\n            this.visitorBuffer = new ArrayList<ScopeVisitor>(5);\n            for (ScopeVisitor visitor : tempList) {\n                registerScopeVisitor(visitor);\n            }\n            tempList.clear();\n\n        }\n\n    }\n\n","sourceOld":"    /**\n     * @param visitable -\n     *            the instance to register\n     * @throws RegistryException\n     * @see ScopeVisitable\n     */\n    public synchronized void registerScopeVisitable(\n            final ScopeVisitable visitable) throws RegistryException {\n        if (visitable == null)\n            throw new IllegalArgumentException(\"visitable must not be null\");\n\n        Scope scope = visitable.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitable has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitable -- \" + visitable.getClass());\n        if (scope.scope() == Scope.ScopeType.REQUEST\n                && this.requestVisitable == null)\n            this.requestVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable == null)\n            this.sessionVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable == null)\n            this.sessionVisitable = visitable;\n\n        if (!this.visitorBuffer.isEmpty()) {\n\n            List<ScopeVisitor> tempList = this.visitorBuffer;\n            this.visitorBuffer = new ArrayList<ScopeVisitor>(5);\n            for (ScopeVisitor visitor : tempList) {\n                registerScopeVisitor(visitor);\n            }\n            tempList.clear();\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitable(ScopeVisitable).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitable(ScopeVisitable).mjava","sourceNew":"    /**\n     * @param visitable -\n     *            the instance to register\n     * @throws RegistryException\n     * @see ScopeVisitable\n     */\n    public synchronized void registerScopeVisitable(\n            final ScopeVisitable visitable) throws RegistryException {\n        if (visitable == null)\n            throw new IllegalArgumentException(\"visitable must not be null\");\n\n        Scope scope = visitable.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitable has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitable -- \" + visitable.getClass());\n        if (scope.scope() == Scope.ScopeType.REQUEST\n                && this.requestVisitable == null)\n            this.requestVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable == null)\n            this.sessionVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable == null)\n            this.sessionVisitable = visitable;\n\n        if (!this.visitorBuffer.isEmpty()) {\n\n            List<ScopeVisitor> tempList = this.visitorBuffer;\n            this.visitorBuffer = new ArrayList<ScopeVisitor>(5);\n            for (ScopeVisitor visitor : tempList) {\n                registerScopeVisitor(visitor);\n            }\n            tempList.clear();\n\n        }\n\n    }\n\n","sourceOld":"    /**\n     * @param visitable -\n     *            the instance to register\n     * @throws RegistryException\n     * @see ScopeVisitable\n     */\n    public synchronized void registerScopeVisitable(\n            final ScopeVisitable visitable) throws RegistryException {\n        if (visitable == null)\n            throw new IllegalArgumentException(\"visitable must not be null\");\n\n        Scope scope = visitable.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitable has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitable -- \" + visitable.getClass());\n        if (scope.scope() == Scope.ScopeType.REQUEST\n                && this.requestVisitable == null)\n            this.requestVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable == null)\n            this.sessionVisitable = visitable;\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable == null)\n            this.sessionVisitable = visitable;\n\n        if (!this.visitorBuffer.isEmpty()) {\n\n            List<ScopeVisitor> tempList = this.visitorBuffer;\n            this.visitorBuffer = new ArrayList<ScopeVisitor>(5);\n            for (ScopeVisitor visitor : tempList) {\n                registerScopeVisitor(visitor);\n            }\n            tempList.clear();\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}