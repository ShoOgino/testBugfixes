{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","commits":[{"id":"d47a51687a906464022060653be52ed62dfa2c18","date":1391087530,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = _TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = _TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.1) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          \n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.1) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          \n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = _TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = _TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.1) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          \n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d0465e4644ff1b593f7a7f0c62cd49b2043d80","date":1393844953,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.02) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"TW size=\" + tw.getSize() + \" vs \" + ordLimit);\n          }\n\n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.1) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          \n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<>();\n        List<String> paths = new ArrayList<>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.02) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"TW size=\" + tw.getSize() + \" vs \" + ordLimit);\n          }\n\n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        Set<String> seen = new HashSet<String>();\n        List<String> paths = new ArrayList<String>();\n        while (true) {\n          Document doc = new Document();\n          int numPaths = TestUtil.nextInt(random(), 1, 5);\n          for(int i=0;i<numPaths;i++) {\n            String path;\n            if (!paths.isEmpty() && random().nextInt(5) != 4) {\n              // Use previous path\n              path = paths.get(random().nextInt(paths.size()));\n            } else {\n              // Create new path\n              path = null;\n              while (true) {\n                path = TestUtil.randomRealisticUnicodeString(random());\n                if (path.length() != 0 && !seen.contains(path)) {\n                  seen.add(path);\n                  paths.add(path);\n                  break;\n                }\n              }\n            }\n            doc.add(new FacetField(\"field\", path));\n          }\n          try {\n            w.addDocument(config.build(tw, doc));\n            if (mgr != null && random().nextDouble() < 0.02) {\n              w.commit();\n              tw.commit();\n              mgr.maybeRefresh();\n            }\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"TW size=\" + tw.getSize() + \" vs \" + ordLimit);\n          }\n\n          if (tw.getSize() >= ordLimit) {\n            break;\n          }\n        }\n      } finally {\n        stop.set(true);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d47a51687a906464022060653be52ed62dfa2c18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6d0465e4644ff1b593f7a7f0c62cd49b2043d80"],"b6d0465e4644ff1b593f7a7f0c62cd49b2043d80":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d47a51687a906464022060653be52ed62dfa2c18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d47a51687a906464022060653be52ed62dfa2c18":["6613659748fe4411a7dcf85266e55db1f95f7315"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6d0465e4644ff1b593f7a7f0c62cd49b2043d80":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b6d0465e4644ff1b593f7a7f0c62cd49b2043d80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d47a51687a906464022060653be52ed62dfa2c18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}