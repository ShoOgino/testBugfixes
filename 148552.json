{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","commits":[{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","pathOld":"/dev/null","sourceNew":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      String name = violation.getClause().isPerCollectiontag() ?\n          violation.getClause().tag.name :\n          violation.getClause().globalTag.name;\n      Variable.Type tagType = VariableBase.getTagType(name);\n      tagType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n    if (ctx.getSuggestions().size() < max) {\n      suggestOptimizations(ctx);\n    }\n    return ctx.getSuggestions();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58","date":1538573878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","sourceNew":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      String name = violation.getClause().isPerCollectiontag() ?\n          violation.getClause().tag.name :\n          violation.getClause().globalTag.name;\n      Variable.Type tagType = VariableBase.getTagType(name);\n      tagType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","sourceOld":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      String name = violation.getClause().isPerCollectiontag() ?\n          violation.getClause().tag.name :\n          violation.getClause().globalTag.name;\n      Variable.Type tagType = VariableBase.getTagType(name);\n      tagType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n    if (ctx.getSuggestions().size() < max) {\n      suggestOptimizations(ctx);\n    }\n    return ctx.getSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","sourceNew":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","sourceOld":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      String name = violation.getClause().isPerCollectiontag() ?\n          violation.getClause().tag.name :\n          violation.getClause().globalTag.name;\n      Variable.Type tagType = VariableBase.getTagType(name);\n      tagType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","sourceNew":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max, int timeoutInSecs) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.endTime = cloudManager.getTimeSource().getTimeNs() + TimeUnit.SECONDS.toNanos(timeoutInSecs);\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (!ctx.needMore()) return ctx.getSuggestions();\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","sourceOld":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["6428b274f6593f368c4f838379620e7f5d196d65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"6428b274f6593f368c4f838379620e7f5d196d65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58e890cd5653ae8550bc6088d739f4eaaf950aff"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6428b274f6593f368c4f838379620e7f5d196d65"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"6428b274f6593f368c4f838379620e7f5d196d65":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}