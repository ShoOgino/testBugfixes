{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56ba5d8fecfb0b8bfdca8c0b630372d998131a9","date":1400353720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n    System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n    System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"f56ba5d8fecfb0b8bfdca8c0b630372d998131a9":["6256acedd658c13275a01e4ba106a621956a22f6"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["f56ba5d8fecfb0b8bfdca8c0b630372d998131a9"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"f56ba5d8fecfb0b8bfdca8c0b630372d998131a9":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"6256acedd658c13275a01e4ba106a621956a22f6":["f56ba5d8fecfb0b8bfdca8c0b630372d998131a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}