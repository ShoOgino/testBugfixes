{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","commits":[{"id":"6bc1e76fdb8a9952244528f098da956d2f52acec","date":1348348531,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeQueryDistanceScore(SpatialArgs).mjava","sourceNew":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","sourceNew":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","sourceOld":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","sourceNew":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = vsf;\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","sourceOld":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = new FilteredQuery( new MatchAllDocsQuery(), vsf );\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeQueryDistanceScore(SpatialArgs).mjava","sourceNew":null,"sourceOld":"  //TODO this is basically old code that hasn't been verified well and should probably be removed\n  public Query makeQueryDistanceScore(SpatialArgs args) {\n    // For starters, just limit the bbox\n    Shape shape = args.getShape();\n    if (!(shape instanceof Rectangle || shape instanceof Circle)) {\n      throw new UnsupportedOperationException(\"Only Rectangles and Circles are currently supported, \" +\n          \"found [\" + shape.getClass() + \"]\");//TODO\n    }\n\n    Rectangle bbox = shape.getBoundingBox();\n\n    if (bbox.getCrossesDateLine()) {\n      throw new UnsupportedOperationException( \"Crossing dateline not yet supported\" );\n    }\n\n    ValueSource valueSource = null;\n\n    Query spatial = null;\n    SpatialOperation op = args.getOperation();\n\n    if( SpatialOperation.is( op,\n        SpatialOperation.BBoxWithin,\n        SpatialOperation.BBoxIntersects ) ) {\n        spatial = makeWithin(bbox);\n    }\n    else if( SpatialOperation.is( op,\n      SpatialOperation.Intersects,\n      SpatialOperation.IsWithin ) ) {\n      spatial = makeWithin(bbox);\n      if( args.getShape() instanceof Circle) {\n        Circle circle = (Circle)args.getShape();\n\n        // Make the ValueSource\n        valueSource = makeDistanceValueSource(shape.getCenter());\n\n        ValueSourceFilter vsf = new ValueSourceFilter(\n            new QueryWrapperFilter( spatial ), valueSource, 0, circle.getRadius() );\n\n        spatial = vsf;\n      }\n    }\n    else if( op == SpatialOperation.IsDisjointTo ) {\n      spatial =  makeDisjoint(bbox);\n    }\n\n    if( spatial == null ) {\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n\n    if( valueSource != null ) {\n      valueSource = new CachingDoubleValueSource(valueSource);\n    }\n    else {\n      valueSource = makeDistanceValueSource(shape.getCenter());\n    }\n    Query spatialRankingQuery = new FunctionQuery(valueSource);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(spatial,BooleanClause.Occur.MUST);\n    bq.add(spatialRankingQuery,BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["1db68e96dd908fcd79ef809095822736aa601d08"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5639d0d5bffb5076883b28d9b3329fbd52812137"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}