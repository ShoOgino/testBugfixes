{"path":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"974ef146a791a4fadf1226b30089cd7ad7d2983f","date":1347388725,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  If the added value is a collection, each value\n   * will be added individually.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      if ( v instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)v ) {\n          c.add( o );\n        }\n        setValue(c, b);\n      } else {\n        setValue(v, b);\n      }\n\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  If the added value is a collection, each value\n   * will be added individually.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      if ( v instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)v ) {\n          c.add( o );\n        }\n        setValue(c, b);\n      } else {\n        setValue(v, b);\n      }\n\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  If the added value is a collection, each value\n   * will be added individually.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      if ( v instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)v ) {\n          c.add( o );\n        }\n        setValue(c, b);\n      } else {\n        setValue(v, b);\n      }\n\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","sourceNew":"  /**\n   * Add values to a field.  If the added value is a collection, each value\n   * will be added individually.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v) {\n    if( value == null ) {\n      if ( v instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)v ) {\n          c.add( o );\n        }\n        setValue(c);\n      } else {\n        setValue(v);\n      }\n\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  If the added value is a collection, each value\n   * will be added individually.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      if ( v instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)v ) {\n          c.add( o );\n        }\n        setValue(c, b);\n      } else {\n        setValue(v, b);\n      }\n\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}