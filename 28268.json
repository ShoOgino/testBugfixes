{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd06ecad11382d5e22750492518d05942405fb07","date":1510136235,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":["464244264804e3f981bf1fb4b732516d8d62dbc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          if (TimeUnit.MILLISECONDS.convert(timeSource.getTime() - event.getEventTime(), TimeUnit.NANOSECONDS) <= TimeUnit.MILLISECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = actionContext.getCloudManager().getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerAction#process(TriggerEvent,ActionContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      try {\n        if (triggerFired.compareAndSet(false, true))  {\n          events.add(event);\n          long currentTimeNanos = actionContext.getCloudManager().getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(event.source + \" was fired before the configured waitFor period\");\n          }\n          getTriggerFiredLatch().countDown();\n        } else  {\n          fail(event.source + \" was fired more than once!\");\n        }\n      } catch (Throwable t) {\n        log.debug(\"--throwable\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f6b20dc453cee198956989b90aa24bef0232bcf"],"fd06ecad11382d5e22750492518d05942405fb07":["7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"3f504512a03d978990cbff30db0522b354e846db":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["560c18d71dad43d675158783c3840f8c80d6d39c","fd06ecad11382d5e22750492518d05942405fb07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fd06ecad11382d5e22750492518d05942405fb07":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["fd06ecad11382d5e22750492518d05942405fb07"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}