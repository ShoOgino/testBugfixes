{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","commits":[{"id":"3ff1a276d1c94e9393032df34ad607eda09ee3a6","date":1417803750,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      Collection<Object> contents = doc.getFieldValues(field);\n      for (Object content : contents) {\n        if (content instanceof String) {\n          docSize += Math.min(((String) content).length(), maxFieldValueChars);\n        }\n      }\n      docSize = Math.min(docSize, maxTotalChars);\n    }\n    return docSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0d8477266b2bba614d67a9eb74a562921fbb97a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d8477266b2bba614d67a9eb74a562921fbb97a0","date":1510613844,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      Collection<Object> contents = doc.getFieldValues(field);\n      for (Object content : contents) {\n        if (content instanceof String) {\n          docSize += Math.min(((String) content).length(), maxFieldValueChars);\n        }\n      }\n      docSize = Math.min(docSize, maxTotalChars);\n    }\n    return docSize;\n  }\n\n","bugFix":["3ff1a276d1c94e9393032df34ad607eda09ee3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bac376b231e863caf32616640dab691c011a72a3","date":1516206557,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessor#getExpectedSize(SolrInputDocument,String[]).mjava","sourceNew":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","sourceOld":"  /**\n   * Calculate expected string size.\n   *\n   * @param doc           solr input document\n   * @param fields        fields to select\n   * @return expected size of string value\n   */\n  private int getExpectedSize(SolrInputDocument doc, String[] fields) {\n    int docSize = 0;\n    for (String field : fields) {\n      if (doc.containsKey(field)) {\n        Collection<Object> contents = doc.getFieldValues(field);\n        if (contents != null) {\n          for (Object content : contents) {\n            if (content instanceof String) {\n              docSize += Math.min(((String) content).length(), maxFieldValueChars);\n            }\n          }\n\n          if (docSize > maxTotalChars) {\n            docSize = maxTotalChars;\n            break;\n          }\n        }\n      }\n    }\n    return docSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0d8477266b2bba614d67a9eb74a562921fbb97a0","bac376b231e863caf32616640dab691c011a72a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bac376b231e863caf32616640dab691c011a72a3":["0d8477266b2bba614d67a9eb74a562921fbb97a0"],"0d8477266b2bba614d67a9eb74a562921fbb97a0":["3ff1a276d1c94e9393032df34ad607eda09ee3a6"],"3ff1a276d1c94e9393032df34ad607eda09ee3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bac376b231e863caf32616640dab691c011a72a3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ff1a276d1c94e9393032df34ad607eda09ee3a6"],"0d8477266b2bba614d67a9eb74a562921fbb97a0":["b94236357aaa22b76c10629851fe4e376e0cea82","bac376b231e863caf32616640dab691c011a72a3"],"3ff1a276d1c94e9393032df34ad607eda09ee3a6":["0d8477266b2bba614d67a9eb74a562921fbb97a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}