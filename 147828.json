{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922de2eac65b7db5151374d097e91c26d79f543c","date":1307097573,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doMinSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doMinSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doMinSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,Outputs[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doMinSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doMinSuffix, Outputs<T> outputs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    fst = new FST<T>(inputType, outputs);\n    if (doMinSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922de2eac65b7db5151374d097e91c26d79f543c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["2e10cb22a8bdb44339e282925a29182bb2f3174d","922de2eac65b7db5151374d097e91c26d79f543c"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["922de2eac65b7db5151374d097e91c26d79f543c"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","922de2eac65b7db5151374d097e91c26d79f543c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"922de2eac65b7db5151374d097e91c26d79f543c":["c715a0f99152be7566591f323c6c5a25725a1bcb","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["922de2eac65b7db5151374d097e91c26d79f543c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}