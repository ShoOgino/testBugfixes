{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","commits":[{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"/dev/null","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n          }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"/dev/null","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // nocommit handle exce\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a178822e66424e8b9d52a1f0a3d8f2f8d641b99","date":1305619757,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // ignore and continue closing remaining consumers\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // nocommit handle exce\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"/dev/null","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // ignore and continue closing remaining consumers\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // ignore and continue closing remaining consumers\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f","date":1310126972,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // ignore and continue closing remaining consumers\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    for(PerDocConsumer consumer : perDocConsumers.values()) {\n      try {\n        consumer.close();  \n      } catch (IOException e) {\n        // ignore and continue closing remaining consumers\n      }\n    }\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumer = null;\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumers.clear();\n    docValues.clear();\n  }\n\n","bugFix":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#doAfterFlush().mjava","sourceNew":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumer = null;\n    docValues.clear();\n  }\n\n","sourceOld":"  /** In flush we reset the fieldHash to not maintain per-field state\n   *  across segments */\n  @Override\n  void doAfterFlush() {\n    fieldHash = new DocFieldProcessorPerField[2];\n    hashMask = 1;\n    totalFieldCount = 0;\n    perDocConsumer = null;\n    docValues.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","2e8d7ba2175f47e280231533f7d3016249cea88b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8a178822e66424e8b9d52a1f0a3d8f2f8d641b99":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","8a178822e66424e8b9d52a1f0a3d8f2f8d641b99"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f":["2e8d7ba2175f47e280231533f7d3016249cea88b"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["8a178822e66424e8b9d52a1f0a3d8f2f8d641b99"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2e8d7ba2175f47e280231533f7d3016249cea88b","a3776dccca01c11e7046323cfad46a3b4a471233"],"8a178822e66424e8b9d52a1f0a3d8f2f8d641b99":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f":["fa0f44f887719e97183771e977cfc4bfb485b766","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}