{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#build(int,int,UTF8Sequence,UTF8Sequence,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#build(int,int,UTF8Sequence,UTF8Sequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8Light#build(int,int,UTF8Sequence,UTF8Sequence,int).mjava","sourceNew":"  private void build(int start, int end, UTF8Sequence startUTF8, UTF8Sequence endUTF8, int upto) {\n\n    // Break into start, middle, end:\n    if (startUTF8.byteAt(upto) == endUTF8.byteAt(upto)) {\n      // Degen case: lead with the same byte:\n      if (upto == startUTF8.len-1 && upto == endUTF8.len-1) {\n        // Super degen: just single edge, one UTF8 byte:\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n        return;\n      } else {\n        assert startUTF8.len > upto+1;\n        assert endUTF8.len > upto+1;\n        int n = utf8.createState();\n\n        // Single value leading edge\n        utf8.addTransition(start, n, startUTF8.byteAt(upto));\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), n));  // type=single\n\n        // Recurse for the rest\n        build(n, end, startUTF8, endUTF8, 1+upto);\n      }\n    } else if (startUTF8.len == endUTF8.len) {\n      if (upto == startUTF8.len-1) {\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), endUTF8.byteAt(upto), end));        // type=startend\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n      } else {\n        start(start, end, startUTF8, upto, false);\n        if (endUTF8.byteAt(upto) - startUTF8.byteAt(upto) > 1) {\n          // There is a middle\n          all(start, end, startUTF8.byteAt(upto)+1, endUTF8.byteAt(upto)-1, startUTF8.len-upto-1);\n        }\n        end(start, end, endUTF8, upto, false);\n      }\n    } else {\n\n      // start\n      start(start, end, startUTF8, upto, true);\n\n      // possibly middle, spanning multiple num bytes\n      int byteCount = 1+startUTF8.len-upto;\n      final int limit = endUTF8.len-upto;\n      while (byteCount < limit) {\n        // wasteful: we only need first byte, and, we should\n        // statically encode this first byte:\n        tmpUTF8a.set(startCodes[byteCount-1]);\n        tmpUTF8b.set(endCodes[byteCount-1]);\n        all(start, end,\n            tmpUTF8a.byteAt(0),\n            tmpUTF8b.byteAt(0),\n            tmpUTF8a.len - 1);\n        byteCount++;\n      }\n\n      // end\n      end(start, end, endUTF8, upto, true);\n    }\n  }\n\n","sourceOld":"  private void build(int start, int end, UTF8Sequence startUTF8, UTF8Sequence endUTF8, int upto) {\n\n    // Break into start, middle, end:\n    if (startUTF8.byteAt(upto) == endUTF8.byteAt(upto)) {\n      // Degen case: lead with the same byte:\n      if (upto == startUTF8.len-1 && upto == endUTF8.len-1) {\n        // Super degen: just single edge, one UTF8 byte:\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n        return;\n      } else {\n        assert startUTF8.len > upto+1;\n        assert endUTF8.len > upto+1;\n        int n = utf8.createState();\n\n        // Single value leading edge\n        utf8.addTransition(start, n, startUTF8.byteAt(upto));\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), n));  // type=single\n\n        // Recurse for the rest\n        build(n, end, startUTF8, endUTF8, 1+upto);\n      }\n    } else if (startUTF8.len == endUTF8.len) {\n      if (upto == startUTF8.len-1) {\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), endUTF8.byteAt(upto), end));        // type=startend\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n      } else {\n        start(start, end, startUTF8, upto, false);\n        if (endUTF8.byteAt(upto) - startUTF8.byteAt(upto) > 1) {\n          // There is a middle\n          all(start, end, startUTF8.byteAt(upto)+1, endUTF8.byteAt(upto)-1, startUTF8.len-upto-1);\n        }\n        end(start, end, endUTF8, upto, false);\n      }\n    } else {\n\n      // start\n      start(start, end, startUTF8, upto, true);\n\n      // possibly middle, spanning multiple num bytes\n      int byteCount = 1+startUTF8.len-upto;\n      final int limit = endUTF8.len-upto;\n      while (byteCount < limit) {\n        // wasteful: we only need first byte, and, we should\n        // statically encode this first byte:\n        tmpUTF8a.set(startCodes[byteCount-1]);\n        tmpUTF8b.set(endCodes[byteCount-1]);\n        all(start, end,\n            tmpUTF8a.byteAt(0),\n            tmpUTF8b.byteAt(0),\n            tmpUTF8a.len - 1);\n        byteCount++;\n      }\n\n      // end\n      end(start, end, endUTF8, upto, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#build(int,int,UTF8Sequence,UTF8Sequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#build(State,State,UTF8Sequence,UTF8Sequence,int).mjava","sourceNew":"  private void build(int start, int end, UTF8Sequence startUTF8, UTF8Sequence endUTF8, int upto) {\n\n    // Break into start, middle, end:\n    if (startUTF8.byteAt(upto) == endUTF8.byteAt(upto)) {\n      // Degen case: lead with the same byte:\n      if (upto == startUTF8.len-1 && upto == endUTF8.len-1) {\n        // Super degen: just single edge, one UTF8 byte:\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n        return;\n      } else {\n        assert startUTF8.len > upto+1;\n        assert endUTF8.len > upto+1;\n        int n = utf8.createState();\n\n        // Single value leading edge\n        utf8.addTransition(start, n, startUTF8.byteAt(upto));\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), n));  // type=single\n\n        // Recurse for the rest\n        build(n, end, startUTF8, endUTF8, 1+upto);\n      }\n    } else if (startUTF8.len == endUTF8.len) {\n      if (upto == startUTF8.len-1) {\n        //start.addTransition(new Transition(startUTF8.byteAt(upto), endUTF8.byteAt(upto), end));        // type=startend\n        utf8.addTransition(start, end, startUTF8.byteAt(upto), endUTF8.byteAt(upto));\n      } else {\n        start(start, end, startUTF8, upto, false);\n        if (endUTF8.byteAt(upto) - startUTF8.byteAt(upto) > 1) {\n          // There is a middle\n          all(start, end, startUTF8.byteAt(upto)+1, endUTF8.byteAt(upto)-1, startUTF8.len-upto-1);\n        }\n        end(start, end, endUTF8, upto, false);\n      }\n    } else {\n\n      // start\n      start(start, end, startUTF8, upto, true);\n\n      // possibly middle, spanning multiple num bytes\n      int byteCount = 1+startUTF8.len-upto;\n      final int limit = endUTF8.len-upto;\n      while (byteCount < limit) {\n        // wasteful: we only need first byte, and, we should\n        // statically encode this first byte:\n        tmpUTF8a.set(startCodes[byteCount-1]);\n        tmpUTF8b.set(endCodes[byteCount-1]);\n        all(start, end,\n            tmpUTF8a.byteAt(0),\n            tmpUTF8b.byteAt(0),\n            tmpUTF8a.len - 1);\n        byteCount++;\n      }\n\n      // end\n      end(start, end, endUTF8, upto, true);\n    }\n  }\n\n","sourceOld":"  private void build(State start, State end, UTF8Sequence startUTF8, UTF8Sequence endUTF8, int upto) {\n\n    // Break into start, middle, end:\n    if (startUTF8.byteAt(upto) == endUTF8.byteAt(upto)) {\n      // Degen case: lead with the same byte:\n      if (upto == startUTF8.len-1 && upto == endUTF8.len-1) {\n        // Super degen: just single edge, one UTF8 byte:\n        start.addTransition(new Transition(startUTF8.byteAt(upto), endUTF8.byteAt(upto), end));\n        return;\n      } else {\n        assert startUTF8.len > upto+1;\n        assert endUTF8.len > upto+1;\n        State n = newUTF8State();\n\n        // Single value leading edge\n        start.addTransition(new Transition(startUTF8.byteAt(upto), n));  // type=single\n\n        // Recurse for the rest\n        build(n, end, startUTF8, endUTF8, 1+upto);\n      }\n    } else if (startUTF8.len == endUTF8.len) {\n      if (upto == startUTF8.len-1) {\n        start.addTransition(new Transition(startUTF8.byteAt(upto), endUTF8.byteAt(upto), end));        // type=startend\n      } else {\n        start(start, end, startUTF8, upto, false);\n        if (endUTF8.byteAt(upto) - startUTF8.byteAt(upto) > 1) {\n          // There is a middle\n          all(start, end, startUTF8.byteAt(upto)+1, endUTF8.byteAt(upto)-1, startUTF8.len-upto-1);\n        }\n        end(start, end, endUTF8, upto, false);\n      }\n    } else {\n\n      // start\n      start(start, end, startUTF8, upto, true);\n\n      // possibly middle, spanning multiple num bytes\n      int byteCount = 1+startUTF8.len-upto;\n      final int limit = endUTF8.len-upto;\n      while (byteCount < limit) {\n        // wasteful: we only need first byte, and, we should\n        // statically encode this first byte:\n        tmpUTF8a.set(startCodes[byteCount-1]);\n        tmpUTF8b.set(endCodes[byteCount-1]);\n        all(start, end,\n            tmpUTF8a.byteAt(0),\n            tmpUTF8b.byteAt(0),\n            tmpUTF8a.len - 1);\n        byteCount++;\n      }\n\n      // end\n      end(start, end, endUTF8, upto, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}