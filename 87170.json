{"path":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","commits":[{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(2, runClasses.getFailureCount());\n    Assert.assertEquals(2, runClasses.getRunCount());\n    \n    String m1 = runClasses.getFailures().get(0).getTrace();\n    String m2 = runClasses.getFailures().get(1).getTrace();\n    Assert.assertTrue(\n        (m1.contains(\"foobar1\") && m2.contains(\"foobar2\")) ||\n        (m1.contains(\"foobar2\") && m2.contains(\"foobar1\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c914a963a9bca87e4efbf2ff7d29f3f26e563b8e","date":1331284343,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<String>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(2, runClasses.getFailureCount());\n    Assert.assertEquals(2, runClasses.getRunCount());\n    \n    String m1 = runClasses.getFailures().get(0).getTrace();\n    String m2 = runClasses.getFailures().get(1).getTrace();\n    Assert.assertTrue(\n        (m1.contains(\"foobar1\") && m2.contains(\"foobar2\")) ||\n        (m1.contains(\"foobar2\") && m2.contains(\"foobar1\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<String>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<String>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    assertFailureCount(3, runClasses);\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d524d41bd211f811312cf6639e3792dae4df6cbb","date":1398850727,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    assertFailureCount(3, runClasses);\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    Assert.assertEquals(3, runClasses.getFailureCount());\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionWithinTestFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    assertFailureCount(3, runClasses);\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionWithinTestFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested2.class);\n    assertFailureCount(3, runClasses);\n    Assert.assertEquals(3, runClasses.getRunCount());\n    \n    ArrayList<String> foobars = new ArrayList<>();\n    for (Failure f : runClasses.getFailures()) {\n      Matcher m = Pattern.compile(\"foobar[0-9]+\").matcher(f.getTrace());\n      while (m.find()) {\n        foobars.add(m.group());\n      }\n    }\n\n    Collections.sort(foobars);\n    Assert.assertEquals(\"[foobar1, foobar2, foobar3]\", \n        Arrays.toString(foobars.toArray()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c914a963a9bca87e4efbf2ff7d29f3f26e563b8e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c914a963a9bca87e4efbf2ff7d29f3f26e563b8e"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c914a963a9bca87e4efbf2ff7d29f3f26e563b8e":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d524d41bd211f811312cf6639e3792dae4df6cbb","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"c914a963a9bca87e4efbf2ff7d29f3f26e563b8e":["38e3b736c7ca086d61b7dbb841c905ee115490da","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["c914a963a9bca87e4efbf2ff7d29f3f26e563b8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}