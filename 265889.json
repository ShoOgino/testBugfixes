{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrServer,Queries,Indexer).mjava","commits":[{"id":"71130cfca9e17db547b4f78cce4b0ad0af72f638","date":1362280541,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrServer,Queries,Indexer).mjava","pathOld":"/dev/null","sourceNew":"  private void checkResults(HttpSolrServer server, Queries queries, Indexer idxer) throws InterruptedException {\n    verbose(\"Checking if indexes have all the documents they should...\");\n    long totalDocsFound = 0;\n    for (Map.Entry<String, Long> ent : coreCounts.entrySet()) {\n      server.setBaseURL(url + ent.getKey());\n      try {\n        server.commit(true, true);\n      } catch (Exception e) {\n        fail(\"Exception when committing core \" + ent.getKey() + \" \" + e.getMessage());\n      }\n      long numFound = queries.getCount(server, ent.getKey());\n      totalDocsFound += numFound;\n      assertEquals(String.format(Locale.ROOT, \"Core %s bad!\", ent.getKey()), (long) ent.getValue(), numFound);\n    }\n\n    verbose(String.format(Locale.ROOT, \"\\n\\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d\",\n        Indexer.idUnique.get(), totalDocsFound, idxer.getAccumUpdates(), idxer.getAccumQtimes()));\n\n    cumulativeDocs += totalDocsFound;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e","date":1362676527,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrServer,Queries,Indexer).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrServer,Queries,Indexer).mjava","sourceNew":"  private void checkResults(HttpSolrServer server, Queries queries, Indexer idxer) throws InterruptedException {\n    log.info(\"Checking if indexes have all the documents they should...\");\n    long totalDocsFound = 0;\n    for (Map.Entry<String, Long> ent : coreCounts.entrySet()) {\n      server.setBaseURL(url + ent.getKey());\n      for (int idx = 0; idx < 3; ++idx) {\n        try {\n          server.commit(true, true);\n          break; // retry loop\n        } catch (Exception e) {\n          log.warn(\"Exception when committing core \" + ent.getKey() + \" \" + e.getMessage());\n          Thread.sleep(100L);\n        }\n      }\n      long numFound = queries.getCount(server, ent.getKey());\n      totalDocsFound += numFound;\n      assertEquals(String.format(Locale.ROOT, \"Core %s bad!\", ent.getKey()), (long) ent.getValue(), numFound);\n    }\n\n    log.info(String.format(Locale.ROOT, \"\\n\\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d\",\n        Indexer.idUnique.get(), totalDocsFound, idxer.getAccumUpdates(), idxer.getAccumQtimes()));\n\n    cumulativeDocs += totalDocsFound;\n  }\n\n","sourceOld":"  private void checkResults(HttpSolrServer server, Queries queries, Indexer idxer) throws InterruptedException {\n    verbose(\"Checking if indexes have all the documents they should...\");\n    long totalDocsFound = 0;\n    for (Map.Entry<String, Long> ent : coreCounts.entrySet()) {\n      server.setBaseURL(url + ent.getKey());\n      try {\n        server.commit(true, true);\n      } catch (Exception e) {\n        fail(\"Exception when committing core \" + ent.getKey() + \" \" + e.getMessage());\n      }\n      long numFound = queries.getCount(server, ent.getKey());\n      totalDocsFound += numFound;\n      assertEquals(String.format(Locale.ROOT, \"Core %s bad!\", ent.getKey()), (long) ent.getValue(), numFound);\n    }\n\n    verbose(String.format(Locale.ROOT, \"\\n\\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d\",\n        Indexer.idUnique.get(), totalDocsFound, idxer.getAccumUpdates(), idxer.getAccumQtimes()));\n\n    cumulativeDocs += totalDocsFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrClient,Queries,Indexer).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#checkResults(HttpSolrServer,Queries,Indexer).mjava","sourceNew":"  private void checkResults(HttpSolrClient client, Queries queries, Indexer idxer) throws InterruptedException {\n    log.info(\"Checking if indexes have all the documents they should...\");\n    long totalDocsFound = 0;\n    for (Map.Entry<String, Long> ent : coreCounts.entrySet()) {\n      client.setBaseURL(url + ent.getKey());\n      for (int idx = 0; idx < 3; ++idx) {\n        try {\n          client.commit(true, true);\n          break; // retry loop\n        } catch (Exception e) {\n          log.warn(\"Exception when committing core \" + ent.getKey() + \" \" + e.getMessage());\n          Thread.sleep(100L);\n        }\n      }\n      long numFound = queries.getCount(client, ent.getKey());\n      totalDocsFound += numFound;\n      assertEquals(String.format(Locale.ROOT, \"Core %s bad!\", ent.getKey()), (long) ent.getValue(), numFound);\n    }\n\n    log.info(String.format(Locale.ROOT, \"\\n\\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d\",\n        Indexer.idUnique.get(), totalDocsFound, idxer.getAccumUpdates(), idxer.getAccumQtimes()));\n\n    cumulativeDocs += totalDocsFound;\n  }\n\n","sourceOld":"  private void checkResults(HttpSolrServer server, Queries queries, Indexer idxer) throws InterruptedException {\n    log.info(\"Checking if indexes have all the documents they should...\");\n    long totalDocsFound = 0;\n    for (Map.Entry<String, Long> ent : coreCounts.entrySet()) {\n      server.setBaseURL(url + ent.getKey());\n      for (int idx = 0; idx < 3; ++idx) {\n        try {\n          server.commit(true, true);\n          break; // retry loop\n        } catch (Exception e) {\n          log.warn(\"Exception when committing core \" + ent.getKey() + \" \" + e.getMessage());\n          Thread.sleep(100L);\n        }\n      }\n      long numFound = queries.getCount(server, ent.getKey());\n      totalDocsFound += numFound;\n      assertEquals(String.format(Locale.ROOT, \"Core %s bad!\", ent.getKey()), (long) ent.getValue(), numFound);\n    }\n\n    log.info(String.format(Locale.ROOT, \"\\n\\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d\",\n        Indexer.idUnique.get(), totalDocsFound, idxer.getAccumUpdates(), idxer.getAccumQtimes()));\n\n    cumulativeDocs += totalDocsFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}