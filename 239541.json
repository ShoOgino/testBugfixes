{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","commits":[{"id":"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","date":1411397287,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          //TODO: not yet \n          // fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          //TODO: not yet \n          // fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n        if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n          // recurse into CFS\n          try (CompoundFileDirectory cfsDir = new CompoundFileDirectory(si.info.getId(), dir, file, newIOContext(random()), false)) {\n            for (String cfsFile : cfsDir.listAll()) {\n              checkHeader(cfsDir, cfsFile, namesToExtensions);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n        if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n          // recurse into CFS\n          try (CompoundFileDirectory cfsDir = new CompoundFileDirectory(si.info.getId(), dir, file, newIOContext(random()), false)) {\n            for (String cfsFile : cfsDir.listAll()) {\n              checkHeader(cfsDir, cfsFile, namesToExtensions);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          //TODO: not yet \n          // fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a824e51ae7d416179b0164bf6693668d68abc0","date":1413927602,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions, null);\n    \n    for (SegmentCommitInfo si : sis) {\n      assertNotNull(si.info.getId());\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions, si.info.getId());\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions, si.info.getId());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions, sis.getId());\n    \n    for (SegmentCommitInfo si : sis) {\n      assertNotNull(si.info.getId());\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions, si.info.getId());\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions, si.info.getId());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions, null);\n    \n    for (SegmentCommitInfo si : sis) {\n      assertNotNull(si.info.getId());\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions, si.info.getId());\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions, si.info.getId());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions, sis.getId());\n    \n    for (SegmentCommitInfo si : sis) {\n      assertNotNull(si.info.getId());\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions, si.info.getId());\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions, si.info.getId());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkHeader(dir, sis.getSegmentsFileName(), namesToExtensions);\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkHeader(dir, file, namesToExtensions);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkHeader(cfsDir, cfsFile, namesToExtensions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","989d940c4bf402188f4f0ae13736836885227383"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a6a824e51ae7d416179b0164bf6693668d68abc0"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a","a6a824e51ae7d416179b0164bf6693668d68abc0"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}