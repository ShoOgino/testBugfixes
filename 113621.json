{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8","1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(scoreDoc == hq.insertWithOverflow(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["fe941135bdfc28c81e20b4d21422f8726af34925"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["052fac7830290bd38a04cddee1a121ee07656b56"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"8a9e385641d717e641408d8fbbc62be8fc766357":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fe941135bdfc28c81e20b4d21422f8726af34925":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}