{"path":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","commits":[{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}