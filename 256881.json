{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading suggester index for: \" + suggester.getName());\n          suggester.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error(\"Exception in reloading suggester index for: \" + suggester.getName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSuggesterIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building suggester index for: \" \n                    + suggester.getName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading suggester index for: \" + suggester.getName());\n          suggester.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error(\"Exception in reloading suggester index for: \" + suggester.getName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSuggesterIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building suggester index for: \" \n                    + suggester.getName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      assert !(currentSearcher == null && isCoreReload): \n        \"SuggesterListener should not be added as firstSearcherListener in case of a core reload\";\n      boolean first = firstCall.getAndSet(false);\n      if (currentSearcher == null || (isCoreReload && first)) {\n        if (buildOnStartup) {\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSuggesterIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building suggester index for: \" \n                    + suggester.getName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading suggester index for: \" + suggester.getName());\n          suggester.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error(\"Exception in reloading suggester index for: \" + suggester.getName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSuggesterIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building suggester index for: \" \n                    + suggester.getName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      long thisCallCount = callCount.incrementAndGet();\n      if (isCoreReload && thisCallCount == 1) {\n        LOG.info(\"Skipping first newSearcher call for suggester \" + suggester + \" in core reload\");\n        return;\n      } else if (thisCallCount == 1 || (isCoreReload && thisCallCount == 2)) {\n        if (buildOnStartup) {\n          LOG.info(\"buildOnStartup: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        if (buildOnCommit)  {\n          LOG.info(\"buildOnCommit: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            LOG.info(\"buildOnOptimize: \" + suggester.getName());\n            buildSuggesterIndex(newSearcher);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      assert !(currentSearcher == null && isCoreReload): \n        \"SuggesterListener should not be added as firstSearcherListener in case of a core reload\";\n      boolean first = firstCall.getAndSet(false);\n      if (currentSearcher == null || (isCoreReload && first)) {\n        if (buildOnStartup) {\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSuggesterIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building suggester index for: \" \n                    + suggester.getName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      long thisCallCount = callCount.incrementAndGet();\n      if (isCoreReload && thisCallCount == 1) {\n        log.info(\"Skipping first newSearcher call for suggester \" + suggester + \" in core reload\");\n        return;\n      } else if (thisCallCount == 1 || (isCoreReload && thisCallCount == 2)) {\n        if (buildOnStartup) {\n          log.info(\"buildOnStartup: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        if (buildOnCommit)  {\n          log.info(\"buildOnCommit: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            log.info(\"buildOnOptimize: \" + suggester.getName());\n            buildSuggesterIndex(newSearcher);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      long thisCallCount = callCount.incrementAndGet();\n      if (isCoreReload && thisCallCount == 1) {\n        LOG.info(\"Skipping first newSearcher call for suggester \" + suggester + \" in core reload\");\n        return;\n      } else if (thisCallCount == 1 || (isCoreReload && thisCallCount == 2)) {\n        if (buildOnStartup) {\n          LOG.info(\"buildOnStartup: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        if (buildOnCommit)  {\n          LOG.info(\"buildOnCommit: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            LOG.info(\"buildOnOptimize: \" + suggester.getName());\n            buildSuggesterIndex(newSearcher);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.SuggesterListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      long thisCallCount = callCount.incrementAndGet();\n      if (isCoreReload && thisCallCount == 1) {\n        log.info(\"Skipping first newSearcher call for suggester {} in core reload\", suggester);\n        return;\n      } else if (thisCallCount == 1 || (isCoreReload && thisCallCount == 2)) {\n        if (buildOnStartup) {\n          if (log.isInfoEnabled()) {\n            log.info(\"buildOnStartup: {}\", suggester.getName());\n          }\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        if (buildOnCommit)  {\n          if (log.isInfoEnabled()) {\n            log.info(\"buildOnCommit: {}\", suggester.getName());\n          }\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            if (log.isInfoEnabled()) {\n              log.info(\"buildOnOptimize: {}\", suggester.getName());\n            }\n            buildSuggesterIndex(newSearcher);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      long thisCallCount = callCount.incrementAndGet();\n      if (isCoreReload && thisCallCount == 1) {\n        log.info(\"Skipping first newSearcher call for suggester \" + suggester + \" in core reload\");\n        return;\n      } else if (thisCallCount == 1 || (isCoreReload && thisCallCount == 2)) {\n        if (buildOnStartup) {\n          log.info(\"buildOnStartup: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        }\n      } else {\n        if (buildOnCommit)  {\n          log.info(\"buildOnCommit: \" + suggester.getName());\n          buildSuggesterIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            log.info(\"buildOnOptimize: \" + suggester.getName());\n            buildSuggesterIndex(newSearcher);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f2e96099703c24c0c63d27806ba7020626b649b"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["7f2e96099703c24c0c63d27806ba7020626b649b"]},"commit2Childs":{"7f2e96099703c24c0c63d27806ba7020626b649b":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}