{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * 2<sup>hashLog</sup> bytes of memory. Higher values of <code>hashLog</code>\n   * improve the compression ratio.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * 2<sup>hashLog</sup> bytes of memory. Higher values of <code>hashLog</code>\n   * improve the compression ratio.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","sourceNew":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * at most 16KB of memory.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#compress(byte[],int,int,DataOutput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compress <code>bytes[off:off+len]</code> into <code>out</code> using\n   * 2<sup>hashLog</sup> bytes of memory. Higher values of <code>hashLog</code>\n   * improve the compression ratio.\n   */\n  public static void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n\n    final int base = off;\n    final int end = off + len;\n\n    int anchor = off++;\n\n    if (len > LAST_LITERALS + MIN_MATCH) {\n\n      final int limit = end - LAST_LITERALS;\n      final int matchLimit = limit - MIN_MATCH;\n\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      final int hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      final PackedInts.Mutable hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n\n      main:\n      while (off < limit) {\n        // find a match\n        int ref;\n        while (true) {\n          if (off >= matchLimit) {\n            break main;\n          }\n          final int v = readInt(bytes, off);\n          final int h = hash(v, hashLog);\n          ref = base + (int) hashTable.get(h);\n          assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();\n          hashTable.set(h, off - base);\n          if (off - ref < MAX_DISTANCE && readInt(bytes, ref) == v) {\n            break;\n          }\n          ++off;\n        }\n\n        // compute match length\n        final int matchLen = MIN_MATCH + commonBytes(bytes, ref + 4, off + 4, limit);\n\n        encodeSequence(bytes, anchor, ref, off, matchLen, out);\n        off += matchLen;\n        anchor = off;\n      }\n    }\n\n    // last literals\n    final int literalLen = end - anchor;\n    assert literalLen >= LAST_LITERALS || literalLen == len;\n    encodeLastLiterals(bytes, anchor, end - anchor, out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["9ee663728a95682ffb5dee37517ac9e863cd0820","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}