{"path":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","commits":[{"id":"8e664487f12f836ec07e7c44c5ddc682388a15cf","date":1521303713,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\" with 6 decimal point precision\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // 7 decimal places maximizes our available precision to just over a centimeter; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurs when we encode.\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(7, CEILING);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(7, CEILING);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\" with 6 decimal point precision\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // 7 decimal places maximizes our available precision to just over a centimeter; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurs when we encode.\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(7, CEILING);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(7, CEILING);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4275db69613869d3fdbc26e04ea8b8c3c7be628","date":1523653551,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places maximizes our available precision to just over a centimeter; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 8;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\" with 6 decimal point precision\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // 7 decimal places maximizes our available precision to just over a centimeter; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurs when we encode.\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(7, CEILING);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(7, CEILING);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30624fc97c03dcee86ae05dc59c16f5febcf0b0a","date":1523717511,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.37cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places maximizes our available precision to just over a centimeter; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 8;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","bugFix":null,"bugIntro":["8a713a3d02622aed29179ff89d088eca0dc0bdca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a713a3d02622aed29179ff89d088eca0dc0bdca","date":1529587767,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.40cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.37cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","bugFix":["30624fc97c03dcee86ae05dc59c16f5febcf0b0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.40cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.37cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField#decodeDocValueToString(long).mjava","sourceNew":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.40cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","sourceOld":"  /**\n   * Decodes the docValues number into latitude and longitude components, formatting as \"lat,lon\".\n   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective\n   * of the available precision.\n   * @param value Non-null; stored location field data\n   * @return Non-null; \"lat, lon\"\n   */\n  public static String decodeDocValueToString(long value) {\n    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));\n    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));\n    // This # decimal places gets us close to our available precision to 1.37cm; we have a test for it.\n    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also\n    //   reverses the \"floor\" that occurred when we encoded.\n    final int DECIMAL_PLACES = 7;\n    final RoundingMode ROUND_MODE = CEILING;\n    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);\n    return latitudeDecoded.stripTrailingZeros().toPlainString() + \",\"\n        + longitudeDecoded.stripTrailingZeros().toPlainString();\n    // return ((float)latDouble) + \",\" + ((float)lonDouble);  crude but not quite as accurate\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["30624fc97c03dcee86ae05dc59c16f5febcf0b0a","8a713a3d02622aed29179ff89d088eca0dc0bdca"],"c4275db69613869d3fdbc26e04ea8b8c3c7be628":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"30624fc97c03dcee86ae05dc59c16f5febcf0b0a":["c4275db69613869d3fdbc26e04ea8b8c3c7be628"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8e664487f12f836ec07e7c44c5ddc682388a15cf"],"8a713a3d02622aed29179ff89d088eca0dc0bdca":["30624fc97c03dcee86ae05dc59c16f5febcf0b0a"],"8e664487f12f836ec07e7c44c5ddc682388a15cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a713a3d02622aed29179ff89d088eca0dc0bdca"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["30624fc97c03dcee86ae05dc59c16f5febcf0b0a","8a713a3d02622aed29179ff89d088eca0dc0bdca"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c4275db69613869d3fdbc26e04ea8b8c3c7be628":["30624fc97c03dcee86ae05dc59c16f5febcf0b0a"],"30624fc97c03dcee86ae05dc59c16f5febcf0b0a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8a713a3d02622aed29179ff89d088eca0dc0bdca","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203e3fcf513c02ee2c07015f2ce277e26dc60907","8e664487f12f836ec07e7c44c5ddc682388a15cf"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["c4275db69613869d3fdbc26e04ea8b8c3c7be628"],"8a713a3d02622aed29179ff89d088eca0dc0bdca":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8e664487f12f836ec07e7c44c5ddc682388a15cf":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}