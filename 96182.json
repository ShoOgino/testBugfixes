{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      shutdownHttpClient  = true;\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      shutdownHttpClient  = true;\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      shutdownHttpClient  = true;\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      shutdownHttpClient  = true;\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}