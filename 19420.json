{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","pathOld":"/dev/null","sourceNew":"  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","sourceOld":"  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","sourceNew":"  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery#from(Node).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","sourceOld":"  public static List<MetricsQuery> from(Node node) throws JsonQueryException {\n    List<MetricsQuery> metricsQueries = new ArrayList<>();\n\n    NamedList config = DOMUtil.childNodesToNamedList(node);\n    List<NamedList> requests = config.getAll(\"request\");\n\n    for (NamedList request : requests) {\n      NamedList query = (NamedList) request.get(\"query\");\n      NamedList queryParameters = (NamedList) query.get(\"params\");\n      String path = (String) query.get(\"path\");\n      String core = (String) query.get(\"core\");\n      String collection = (String) query.get(\"collection\");\n      List<String> jsonQueries = (ArrayList<String>) request.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (queryParameters != null) {\n        for (Map.Entry<String, String> entrySet : (Set<Map.Entry<String, String>>) queryParameters.asShallowMap().entrySet()) {\n          params.add(entrySet.getKey(), entrySet.getValue());\n        }\n      }\n\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      List<JsonQuery> compiledQueries = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          compiledQueries.add(compiledJsonQuery);\n        }\n      }\n\n      metricsQueries.add(new MetricsQuery(\n          path,\n          params,\n          core,\n          collection,\n          compiledQueries));\n    }\n\n    return metricsQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}