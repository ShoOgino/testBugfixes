{"path":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) &&\n        cacheExpiresTimeout != null && ! cacheExpiresTimeout.hasTimedOut()) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) &&\n        cacheExpiresTimeout != null && ! cacheExpiresTimeout.hasTimedOut()) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:{}\", filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws IOException If there is a low-level I/O error.\n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) &&\n        cacheExpiresTimeout != null && ! cacheExpiresTimeout.hasTimedOut()) {\n      if(log.isDebugEnabled()) {\n        log.debug(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig.getResourceLoader(), filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.error(getClass().getName(), \"getTransformer\", tce);\n      throw new IOException(\"newTransformer fails ( \" + lastFilename + \")\", tce);\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"575e66bd4b2349209027f6801184da7fc3cba13f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"56572ec06f1407c066d6b7399413178b33176cd8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"c26f00b574427b55127e869b935845554afde1fa":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}