{"path":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","date":1346337224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed()) {\n      if (type.storeTermVectors()) {\n        throw new IllegalArgumentException(\"cannot store term vectors \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (type.storeTermVectorPositions()) {\n        throw new IllegalArgumentException(\"cannot store term vector positions \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (type.storeTermVectorOffsets()) {\n        throw new IllegalArgumentException(\"cannot store term vector offsets \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n      if (type.storeTermVectorPayloads()) {\n        throw new IllegalArgumentException(\"cannot store term vector payloads \"\n                                           + \"for a field that is not indexed (field=\\\"\" + name + \"\\\")\");\n      }\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    if (!type.indexed() && (type.storeTermVectors())) {\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n          + \"for a field that is not indexed\");\n    }\n    \n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == null) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == null) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && !type.indexed()) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NO) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == null) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NO) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value cannot be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,FieldType).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or value\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, String value, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.type = type;\n    this.name = name;\n    this.fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","52c7e49be259508735752fba88085255014a6ecf"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3394716f52b34ab259ad5247e7595d9f9db6e935","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"52c7e49be259508735752fba88085255014a6ecf":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05a14b2611ead08655a2b2bdc61632eb31316e57","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","05a14b2611ead08655a2b2bdc61632eb31316e57","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}