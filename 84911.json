{"path":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","commits":[{"id":"f35b388d9df4d2190412cd1cbcc0c391a94bb158","date":1309218318,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/FunctionQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/FunctionQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!FunctionQuery.class.isInstance(o)) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!FunctionQuery.class.isInstance(o)) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (FunctionQuery.class != o.getClass()) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!FunctionQuery.class.isInstance(o)) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!FunctionQuery.class.isInstance(o)) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!FunctionQuery.class.isInstance(o)) return false;\n    FunctionQuery other = (FunctionQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.func.equals(other.func);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["f35b388d9df4d2190412cd1cbcc0c391a94bb158"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f35b388d9df4d2190412cd1cbcc0c391a94bb158"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f35b388d9df4d2190412cd1cbcc0c391a94bb158","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}