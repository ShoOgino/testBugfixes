{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","commits":[{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a4e3a7c47e11ff0c156c646c37d20af7249370d2","a4e3a7c47e11ff0c156c646c37d20af7249370d2","4d3e8520fd031bab31fd0e4d480e55958bc45efe","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}