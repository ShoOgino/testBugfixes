{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    updateOverseerLeader();\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","sourceOld":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    updateOverseerLeader();\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","sourceOld":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    updateOverseerLeader();\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n    liveNodes.add(nodeId);\n    updateOverseerLeader();\n  }\n\n","sourceOld":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    liveNodes.add(nodeId);\n    createEphemeralLiveNode(nodeId);\n    updateOverseerLeader();\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    liveNodes.add(nodeId);\n    updateOverseerLeader();\n  }\n\n","sourceOld":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.putIfAbsent(nodeId, new ArrayList<>());\n    liveNodes.add(nodeId);\n    updateOverseerLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddNode(String).mjava","sourceNew":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    liveNodes.add(nodeId);\n    updateOverseerLeader();\n  }\n\n","sourceOld":"  /**\n   * Add a new node to the cluster.\n   * @param nodeId unique node id\n   */\n  public void simAddNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    if (liveNodes.contains(nodeId)) {\n      throw new Exception(\"Node \" + nodeId + \" already exists\");\n    }\n    createEphemeralLiveNode(nodeId);\n    nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    liveNodes.add(nodeId);\n    updateOverseerLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}