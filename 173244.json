{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","sourceNew":"\tpublic QueryScorer(WeightedTerm []weightedTerms\t)\n\t{\n\t\ttermsToFind = new HashMap();\n\t\tfor (int i = 0; i < weightedTerms.length; i++)\n\t\t{\n\t\t\ttermsToFind.put(weightedTerms[i].term,weightedTerms[i]);\n\t\t\tmaxTermWeight=Math.max(maxTermWeight,weightedTerms[i].getWeight());\n\t\t}\n\t}\n\n","sourceOld":"\tpublic QueryScorer(WeightedTerm []weightedTerms\t)\n\t{\n\t\ttermsToFind = new HashMap();\n\t\tfor (int i = 0; i < weightedTerms.length; i++)\n\t\t{\n\t\t\ttermsToFind.put(weightedTerms[i].term,weightedTerms[i]);\n\t\t\tmaxTermWeight=Math.max(maxTermWeight,weightedTerms[i].getWeight());\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c5dc894a74bc648869deeeb60a9bd50a7f77c77","date":1126037990,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","sourceNew":"\tpublic QueryScorer(WeightedTerm []weightedTerms\t)\n\t{\n\t\ttermsToFind = new HashMap();\n\t\tfor (int i = 0; i < weightedTerms.length; i++)\n\t\t{\n\t\t\tWeightedTerm existingTerm=(WeightedTerm) termsToFind.get(weightedTerms[i].term);\n\t\t\tif( (existingTerm==null) ||(existingTerm.weight<weightedTerms[i].weight) )\n\t\t\t{\n\t\t\t\t//if a term is defined more than once, always use the highest scoring weight\n\t\t\t\ttermsToFind.put(weightedTerms[i].term,weightedTerms[i]);\n\t\t\t\tmaxTermWeight=Math.max(maxTermWeight,weightedTerms[i].getWeight());\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic QueryScorer(WeightedTerm []weightedTerms\t)\n\t{\n\t\ttermsToFind = new HashMap();\n\t\tfor (int i = 0; i < weightedTerms.length; i++)\n\t\t{\n\t\t\ttermsToFind.put(weightedTerms[i].term,weightedTerms[i]);\n\t\t\tmaxTermWeight=Math.max(maxTermWeight,weightedTerms[i].getWeight());\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","sourceNew":"  public QueryScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"\tpublic QueryScorer(WeightedTerm []weightedTerms\t)\n\t{\n\t\ttermsToFind = new HashMap();\n\t\tfor (int i = 0; i < weightedTerms.length; i++)\n\t\t{\n\t\t\tWeightedTerm existingTerm=(WeightedTerm) termsToFind.get(weightedTerms[i].term);\n\t\t\tif( (existingTerm==null) ||(existingTerm.weight<weightedTerms[i].weight) )\n\t\t\t{\n\t\t\t\t//if a term is defined more than once, always use the highest scoring weight\n\t\t\t\ttermsToFind.put(weightedTerms[i].term,weightedTerms[i]);\n\t\t\t\tmaxTermWeight=Math.max(maxTermWeight,weightedTerms[i].getWeight());\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","sourceNew":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"  public QueryScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["5c5dc894a74bc648869deeeb60a9bd50a7f77c77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c5dc894a74bc648869deeeb60a9bd50a7f77c77":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["943c3f9cf96b8df37f4273d66a66182e2a669467"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["5c5dc894a74bc648869deeeb60a9bd50a7f77c77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"5c5dc894a74bc648869deeeb60a9bd50a7f77c77":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}