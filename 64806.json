{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(NumericDocValues,NumericDocValues).mjava","commits":[{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(NumericDocValues,NumericDocValues).mjava","pathOld":"/dev/null","sourceNew":"  public void assertDocValues(NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.size(), rightDocValues.size());\n    for(int docID=0;docID<leftDocValues.size();docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(int,NumericDocValues,NumericDocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(NumericDocValues,NumericDocValues).mjava","sourceNew":"  public void assertDocValues(int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","sourceOld":"  public void assertDocValues(NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.size(), rightDocValues.size());\n    for(int docID=0;docID<leftDocValues.size();docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad7de846867bd14c63f9dd19df082f72c5ea9c54","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}