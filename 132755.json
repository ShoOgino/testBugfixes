{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","sourceOld":"  private CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["e7da9d8536c11576df10e348efa79d2739170936"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}