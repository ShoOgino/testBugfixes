{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","commits":[{"id":"493580e5de476ed58276704923abef78ca0c07a0","date":1494185061,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9534d22697fd987010265f4f9939621199e9c099","date":1502041899,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"566112f6115904d848cbf09462ebd8bf1304257b","date":1502103699,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","date":1502218425,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200.0, 400.0, 600.0, 200.0, 400.0, 800.0, 1200.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquare\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9534d22697fd987010265f4f9939621199e9c099":["493580e5de476ed58276704923abef78ca0c07a0"],"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863":["566112f6115904d848cbf09462ebd8bf1304257b"],"493580e5de476ed58276704923abef78ca0c07a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","493580e5de476ed58276704923abef78ca0c07a0"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","566112f6115904d848cbf09462ebd8bf1304257b"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["566112f6115904d848cbf09462ebd8bf1304257b","f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"566112f6115904d848cbf09462ebd8bf1304257b":["493580e5de476ed58276704923abef78ca0c07a0","9534d22697fd987010265f4f9939621199e9c099"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"]},"commit2Childs":{"9534d22697fd987010265f4f9939621199e9c099":["566112f6115904d848cbf09462ebd8bf1304257b"],"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863":["58884af1f68e9d61c217c753fbd6266d86a63b14","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"493580e5de476ed58276704923abef78ca0c07a0":["9534d22697fd987010265f4f9939621199e9c099","e9017cf144952056066919f1ebc7897ff9bd71b1","566112f6115904d848cbf09462ebd8bf1304257b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"566112f6115904d848cbf09462ebd8bf1304257b":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","58884af1f68e9d61c217c753fbd6266d86a63b14"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["493580e5de476ed58276704923abef78ca0c07a0","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}