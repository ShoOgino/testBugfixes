{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @param template\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @param template\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @param template\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @param template\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @param template\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    if (template == null) {\n      return null;\n    }\n    Resolved r = getResolved(template);\n    if (r.startIndexes != null) {\n      StringBuilder sb = new StringBuilder(template);\n      for (int i = r.startIndexes.size() - 1; i >= 0; i--) {\n        String replacement = resolve(r.variables.get(i)).toString();\n        sb.replace(r.startIndexes.get(i), r.endOffsets.get(i), replacement);\n      }\n      return sb.toString();\n    } else {\n      return template;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    if (template == null) {\n      return null;\n    }\n    Resolved r = getResolved(template);\n    if (r.startIndexes != null) {\n      StringBuilder sb = new StringBuilder(template);\n      for (int i = r.startIndexes.size() - 1; i >= 0; i--) {\n        String replacement = resolve(r.variables.get(i)).toString();\n        sb.replace(r.startIndexes.get(i), r.endOffsets.get(i), replacement);\n      }\n      return sb.toString();\n    } else {\n      return template;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   *\n   * @return the string with the placeholders replaced with their values\n   */\n  public abstract String replaceTokens(String template);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89ae495191648c27a6ed94d2ace7e34b763a535c","date":1476855250,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun);\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    if (template == null) {\n      return null;\n    }\n    Resolved r = getResolved(template);\n    if (r.startIndexes != null) {\n      StringBuilder sb = new StringBuilder(template);\n      for (int i = r.startIndexes.size() - 1; i >= 0; i--) {\n        String replacement = resolve(r.variables.get(i)).toString();\n        sb.replace(r.startIndexes.get(i), r.endOffsets.get(i), replacement);\n      }\n      return sb.toString();\n    } else {\n      return template;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun);\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    if (template == null) {\n      return null;\n    }\n    Resolved r = getResolved(template);\n    if (r.startIndexes != null) {\n      StringBuilder sb = new StringBuilder(template);\n      for (int i = r.startIndexes.size() - 1; i >= 0; i--) {\n        String replacement = resolve(r.variables.get(i)).toString();\n        sb.replace(r.startIndexes.get(i), r.endOffsets.get(i), replacement);\n      }\n      return sb.toString();\n    } else {\n      return template;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed1b270b5ea6e1859f4b77233891fbb991898dba","date":1497429460,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun, TemplateUpdateProcessorFactory.DOLLAR_BRACES_PLACEHOLDER_PATTERN);\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun, TemplateUpdateProcessorFactory.DOLLAR_BRACES_PLACEHOLDER_PATTERN);\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun, TemplateUpdateProcessorFactory.DOLLAR_BRACES_PLACEHOLDER_PATTERN);\n  }\n\n","sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#replaceTokens(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a String with place holders, replace them with the value tokens.\n   * \n   * @return the string with the placeholders replaced with their values\n   */\n  public String replaceTokens(String template) {\n    return TemplateUpdateProcessorFactory.replaceTokens(template, cache, fun, TemplateUpdateProcessorFactory.DOLLAR_BRACES_PLACEHOLDER_PATTERN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7c7b0ae5716b6c2044195a818e9ae58205175659"],"28288370235ed02234a64753cdbf0c6ec096304a":["89ae495191648c27a6ed94d2ace7e34b763a535c","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c7b0ae5716b6c2044195a818e9ae58205175659","89ae495191648c27a6ed94d2ace7e34b763a535c"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["89ae495191648c27a6ed94d2ace7e34b763a535c"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["28288370235ed02234a64753cdbf0c6ec096304a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89ae495191648c27a6ed94d2ace7e34b763a535c":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["89ae495191648c27a6ed94d2ace7e34b763a535c","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89ae495191648c27a6ed94d2ace7e34b763a535c"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"28288370235ed02234a64753cdbf0c6ec096304a":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"89ae495191648c27a6ed94d2ace7e34b763a535c":["28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ed1b270b5ea6e1859f4b77233891fbb991898dba","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}