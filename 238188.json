{"path":"src/test-deprecated/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":null,"sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}