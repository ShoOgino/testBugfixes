{"path":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","commits":[{"id":"b5a3548d95924aea5ee6d88499a7d166498a8e49","date":1328909332,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f918f6e4bff7afea488f1928f7a7ec05338d479f","date":1331745861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random);\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random);\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random.nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random.nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random.nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random.nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random);\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random);\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random.nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random.nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random.nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random.nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}