{"path":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","commits":[{"id":"2506f4a214732b20f56ab2fa8b975dc5d85c4d45","date":1302809898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x800);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x800);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x800);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x800);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e119dc35ef7f462c87e7e33c5d70508eb8487fb0","date":1312207099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x7ff);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x800);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedLengthUnicodeString(Random,char[],int,int).mjava","sourceNew":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x7ff);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills provided char[] with valid random unicode code\n   * unit sequence.\n   */\n  public static void randomFixedLengthUnicodeString(Random random, char[] chars, int offset, int length) {\n    int i = offset;\n    final int end = offset + length;\n    while(i < end) {\n      final int t = random.nextInt(5);\n      if (0 == t && i < length - 1) {\n        // Make a surrogate pair\n        // High surrogate\n        chars[i++] = (char) nextInt(random, 0xd800, 0xdbff);\n        // Low surrogate\n        chars[i++] = (char) nextInt(random, 0xdc00, 0xdfff);\n      } else if (t <= 1) {\n        chars[i++] = (char) random.nextInt(0x80);\n      } else if (2 == t) {\n        chars[i++] = (char) nextInt(random, 0x80, 0x7ff);\n      } else if (3 == t) {\n        chars[i++] = (char) nextInt(random, 0x800, 0xd7ff);\n      } else if (4 == t) {\n        chars[i++] = (char) nextInt(random, 0xe000, 0xffff);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e119dc35ef7f462c87e7e33c5d70508eb8487fb0"],"1eb46686a27187e42311e77666a2c7026f461ebc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"2506f4a214732b20f56ab2fa8b975dc5d85c4d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e119dc35ef7f462c87e7e33c5d70508eb8487fb0":["2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"2506f4a214732b20f56ab2fa8b975dc5d85c4d45":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","e119dc35ef7f462c87e7e33c5d70508eb8487fb0"],"e119dc35ef7f462c87e7e33c5d70508eb8487fb0":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}