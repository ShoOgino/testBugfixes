{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8","date":1365482412,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae7b4adfa274da5f5fdc865e127928b25e5e929","date":1417607786,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"769c5b216710912f65b3a2d7bebdecb0cfd1aedb","date":1425445769,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4","date":1425860185,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n    done = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ebe869a45c162aebb0f477914767f6d0562cca5","date":1430403651,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3","date":1514163780,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(\"solr-default-tika-config.xml\")) {\n          tikaConfig = new TikaConfig(is);\n        }\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        tikaConfig = new TikaConfig(classLoader);\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    // See similar code in ExtractingRequestHandler.inform\n    try {\n      String tikaConfigLoc = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigLoc == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(\"solr-default-tika-config.xml\")) {\n          tikaConfig = new TikaConfig(is);\n        }\n      } else {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute()) {\n          tikaConfig = new TikaConfig(configFile);\n        } else { // in conf/\n          try (InputStream is = context.getSolrCore().getResourceLoader().openResource(tikaConfigLoc)) {\n            tikaConfig = new TikaConfig(is);\n          }\n        }\n      }\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    try {\n      String tikaConfigFile = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigFile == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(\"solr-default-tika-config.xml\")) {\n          tikaConfig = new TikaConfig(is);\n        }\n      } else {\n        File configFile = new File(tikaConfigFile);\n        if (!configFile.isAbsolute()) {\n          configFile = new File(context.getSolrCore().getResourceLoader().getConfigDir(), tikaConfigFile);\n        }\n        tikaConfig = new TikaConfig(configFile);\n      }\n    } catch (Exception e) {\n      wrapAndThrow (SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#firstInit(Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    // See similar code in ExtractingRequestHandler.inform\n    try {\n      String tikaConfigLoc = context.getResolvedEntityAttribute(\"tikaConfig\");\n      if (tikaConfigLoc == null) {\n        ClassLoader classLoader = context.getSolrCore().getResourceLoader().getClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(\"solr-default-tika-config.xml\")) {\n          tikaConfig = new TikaConfig(is);\n        }\n      } else {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute()) {\n          tikaConfig = new TikaConfig(configFile);\n        } else { // in conf/\n          try (InputStream is = context.getSolrCore().getResourceLoader().openResource(tikaConfigLoc)) {\n            tikaConfig = new TikaConfig(is);\n          }\n        }\n      }\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e,\"Unable to load Tika Config\");\n    }\n\n    String extractEmbeddedString = context.getResolvedEntityAttribute(\"extractEmbedded\");\n    if (\"true\".equals(extractEmbeddedString)) {\n      extractEmbedded = true;\n    }\n    format = context.getResolvedEntityAttribute(\"format\");\n    if(format == null)\n      format = \"text\";\n    if (!\"html\".equals(format) && !\"xml\".equals(format) && !\"text\".equals(format)&& !\"none\".equals(format) )\n      throw new DataImportHandlerException(SEVERE, \"'format' can be one of text|html|xml|none\");\n\n    htmlMapper = context.getResolvedEntityAttribute(\"htmlMapper\");\n    if (htmlMapper == null)\n      htmlMapper = \"default\";\n    if (!\"default\".equals(htmlMapper) && !\"identity\".equals(htmlMapper))\n      throw new DataImportHandlerException(SEVERE, \"'htmlMapper', if present, must be 'default' or 'identity'\");\n\n    parser = context.getResolvedEntityAttribute(\"parser\");\n    if(parser == null) {\n      parser = AUTO_PARSER;\n    }\n\n    spatialMetadataField = context.getResolvedEntityAttribute(\"spatialMetadataField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8"],"769c5b216710912f65b3a2d7bebdecb0cfd1aedb":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4ae7b4adfa274da5f5fdc865e127928b25e5e929","4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3"],"7ebe869a45c162aebb0f477914767f6d0562cca5":["4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4":["769c5b216710912f65b3a2d7bebdecb0cfd1aedb"],"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3":["7ebe869a45c162aebb0f477914767f6d0562cca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["769c5b216710912f65b3a2d7bebdecb0cfd1aedb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"769c5b216710912f65b3a2d7bebdecb0cfd1aedb":["4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"c26f00b574427b55127e869b935845554afde1fa":["4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"7ebe869a45c162aebb0f477914767f6d0562cca5":["b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ebe869a45c162aebb0f477914767f6d0562cca5"],"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}