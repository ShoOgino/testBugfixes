{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","commits":[{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey, boolean offline) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"timing\", \"true\");\n    params.set(\"offline\", String.valueOf(offline));\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      NamedList<Object> rsp = baseServer.request(request);\n      log.info(\"Shard split response: \" + Utils.toJSONString(rsp));\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey, boolean offline) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"timing\", \"true\");\n    params.set(\"offline\", String.valueOf(offline));\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      NamedList<Object> rsp = baseServer.request(request);\n      if (log.isInfoEnabled()) {\n        log.info(\"Shard split response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey, boolean offline) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"timing\", \"true\");\n    params.set(\"offline\", String.valueOf(offline));\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      NamedList<Object> rsp = baseServer.request(request);\n      log.info(\"Shard split response: \" + Utils.toJSONString(rsp));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String,boolean).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey, boolean offline) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"timing\", \"true\");\n    params.set(\"offline\", String.valueOf(offline));\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      NamedList<Object> rsp = baseServer.request(request);\n      if (log.isInfoEnabled()) {\n        log.info(\"Shard split response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey, boolean offline) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"timing\", \"true\");\n    params.set(\"offline\", String.valueOf(offline));\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      NamedList<Object> rsp = baseServer.request(request);\n      if (log.isInfoEnabled()) {\n        log.info(\"Shard split response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}