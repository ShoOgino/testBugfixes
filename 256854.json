{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","commits":[{"id":"467b33453dfbb7b9a5e2388723dc92cc4d7f830a","date":1499159523,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n\n    cluster.waitForAllNodes(30);\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n\n    cluster.waitForAllNodes(30);\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n\n    cluster.waitForAllNodes(30);\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n\n    cluster.waitForAllNodes(30);\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":["467b33453dfbb7b9a5e2388723dc92cc4d7f830a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testIntegration().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      if (runner == sourceNode) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n      }\n    }\n    \n    Thread.sleep(1000);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = solrClient.getZkStateReader().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor.getNodeName());\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(docCollection.toString(), 2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","467b33453dfbb7b9a5e2388723dc92cc4d7f830a"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","467b33453dfbb7b9a5e2388723dc92cc4d7f830a","560c18d71dad43d675158783c3840f8c80d6d39c"],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}