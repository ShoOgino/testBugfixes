{"path":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      StandardTermsIndexWriter indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new SimpleStandardTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      StandardTermsIndexWriter indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new SimpleStandardTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa","date":1284906916,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      StandardTermsIndexWriter indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new SimpleStandardTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PulsingReverseTermsCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      final int freqCutoff = 1;\n      PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n      // Terms dict index\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state) {\n            // We sort in reverse unicode order, so, we must\n            // disable the suffix-stripping opto that\n            // FixedGapTermsIndexWriter does by default!\n            @Override\n            protected int indexedTermPrefixLength(BytesRef priorTerm, BytesRef indexedTerm) {\n              return indexedTerm.length;\n            }\n          };\n        success = true;\n      } finally {\n        if (!success) {\n          pulsingWriter.close();\n        }\n      }\n\n      // Terms dict\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, reverseUnicodeComparator);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            pulsingWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}