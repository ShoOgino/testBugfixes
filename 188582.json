{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,ParsedParams).mjava","commits":[{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,ParsedParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {\n    String groupField = parsed.params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = parsed.docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,ParsedParams).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {\n    String groupField = parsed.params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = parsed.docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}