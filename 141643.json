{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}