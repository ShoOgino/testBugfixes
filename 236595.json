{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","commits":[{"id":"dd96a930cc08d72beee719cc11ce465b9d9861c3","date":1535640296,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output();\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output();\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["dd96a930cc08d72beee719cc11ce465b9d9861c3"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["dd96a930cc08d72beee719cc11ce465b9d9861c3","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd96a930cc08d72beee719cc11ce465b9d9861c3"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}