{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      UnifiedHighlighter p1 = new UnifiedHighlighter(is, indexAnalyzer) {\n        @Override\n        protected PassageFormatter getFormatter(String field) {\n          assertEquals(\"body\", field);\n          return f1;\n        }\n      };\n      p1.setMaxLength(Integer.MAX_VALUE - 1);\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      UnifiedHighlighter p2 = new UnifiedHighlighter(is, indexAnalyzer) {\n        @Override\n        protected PassageFormatter getFormatter(String field) {\n          assertEquals(\"body\", field);\n          return f2;\n        }\n      };\n      p2.setMaxLength(Integer.MAX_VALUE - 1);\n\n      BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n      queryBuilder.add(query, BooleanClause.Occur.MUST);\n      queryBuilder.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      BooleanQuery bq = queryBuilder.build();\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, td, n);\n      p2.highlight(\"body\", bq, td, n + 1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      UnifiedHighlighter p1 = new UnifiedHighlighter(is, indexAnalyzer) {\n        @Override\n        protected PassageFormatter getFormatter(String field) {\n          assertEquals(\"body\", field);\n          return f1;\n        }\n      };\n      p1.setMaxLength(Integer.MAX_VALUE - 1);\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      UnifiedHighlighter p2 = new UnifiedHighlighter(is, indexAnalyzer) {\n        @Override\n        protected PassageFormatter getFormatter(String field) {\n          assertEquals(\"body\", field);\n          return f2;\n        }\n      };\n      p2.setMaxLength(Integer.MAX_VALUE - 1);\n\n      BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n      queryBuilder.add(query, BooleanClause.Occur.MUST);\n      queryBuilder.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      BooleanQuery bq = queryBuilder.build();\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, td, n);\n      p2.highlight(\"body\", bq, td, n + 1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}