{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"/dev/null","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new Policy.ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(),new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new Policy.ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new Policy.ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(),new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new Policy.ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","1f6b20dc453cee198956989b90aa24bef0232bcf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}