{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","sourceNew":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = Line2D.create(l);\n    PointValues.Relation r = l2d.relateTriangle(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0),\n        quantizeLon(-5), quantizeLat(0));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, r);\n  }\n\n","sourceOld":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = Line2D.create(l);\n    PointValues.Relation r = l2d.relateTriangle(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0),\n        quantizeLon(-5), quantizeLat(0));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","sourceNew":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = LatLonGeometry.create(l);\n    PointValues.Relation r = l2d.relateTriangle(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0),\n        quantizeLon(-5), quantizeLat(0));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, r);\n  }\n\n","sourceOld":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = Line2D.create(l);\n    PointValues.Relation r = l2d.relateTriangle(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0),\n        quantizeLon(-5), quantizeLat(0));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLineSharedLine().mjava","sourceNew":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = LatLonGeometry.create(l);\n    boolean intersectsLine = l2d.intersectsLine(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0));\n    assertTrue(intersectsLine);\n  }\n\n","sourceOld":"  public void testLineSharedLine() {\n    Line l = new Line(new double[] {0, 0, 0, 0}, new double[] {-2, -1, 0, 1});\n    Component2D l2d = LatLonGeometry.create(l);\n    PointValues.Relation r = l2d.relateTriangle(\n        quantizeLon(-5), quantizeLat(0),\n        quantizeLon(5), quantizeLat(0),\n        quantizeLon(-5), quantizeLat(0));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["a923e28c9d079048c6993884ec89c44f0380b923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a923e28c9d079048c6993884ec89c44f0380b923"],"a923e28c9d079048c6993884ec89c44f0380b923":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}