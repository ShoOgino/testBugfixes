{"path":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","commits":[{"id":"8d701c455e4783533e275f01bf3e813737b7e593","date":1296229063,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c464a33a41a74ada47869a7372815aafb469df1a","c464a33a41a74ada47869a7372815aafb469df1a","c464a33a41a74ada47869a7372815aafb469df1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["8d701c455e4783533e275f01bf3e813737b7e593"],"c26f00b574427b55127e869b935845554afde1fa":["8d701c455e4783533e275f01bf3e813737b7e593","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d701c455e4783533e275f01bf3e813737b7e593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d701c455e4783533e275f01bf3e813737b7e593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8d701c455e4783533e275f01bf3e813737b7e593"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d701c455e4783533e275f01bf3e813737b7e593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","8d701c455e4783533e275f01bf3e813737b7e593","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8d701c455e4783533e275f01bf3e813737b7e593":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}