{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}