{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","commits":[{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal().mjava","sourceNew":"  private final void commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","sourceOld":"  private final void commitInternal() throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","sourceOld":"  private final void commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ddaef9c801f985de924507f0cceea9786b55ac1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","sourceOld":"  private final void commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","sourceOld":"  private final void commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","sourceOld":"  private final void commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n      }\n\n      finishCommit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddaef9c801f985de924507f0cceea9786b55ac1f","date":1481326890,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    boolean[] doMaybeMerge = new boolean[1];\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(doMaybeMerge);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","bugFix":["f492fe129985750df09c8dac738aecc503158bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    boolean[] doMaybeMerge = new boolean[1];\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(doMaybeMerge);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      long seqNo;\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(mergePolicy);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n\n      return seqNo;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    boolean[] doMaybeMerge = new boolean[1];\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(doMaybeMerge);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    boolean[] doMaybeMerge = new boolean[1];\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(doMaybeMerge);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    boolean[] doMaybeMerge = new boolean[1];\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal(doMaybeMerge);\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commitInternal(MergePolicy).mjava","sourceNew":"  private long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","sourceOld":"  private final long commitInternal(MergePolicy mergePolicy) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"commit: start\");\n    }\n\n    long seqNo;\n\n    synchronized(commitLock) {\n      ensureOpen(false);\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"commit: enter lock\");\n      }\n\n      if (pendingCommit == null) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: now prepare\");\n        }\n        seqNo = prepareCommitInternal();\n      } else {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"commit: already prepared\");\n        }\n        seqNo = pendingSeqNo;\n      }\n\n      finishCommit();\n    }\n\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(mergePolicy, MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    \n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee59f646cf24586a449cad77391a60a3ac8d8959":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["ddaef9c801f985de924507f0cceea9786b55ac1f"],"6483e4260c08168709c02238ae083a51519a28dd":["ee59f646cf24586a449cad77391a60a3ac8d8959","f492fe129985750df09c8dac738aecc503158bb3"],"ddaef9c801f985de924507f0cceea9786b55ac1f":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["ee59f646cf24586a449cad77391a60a3ac8d8959","6483e4260c08168709c02238ae083a51519a28dd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["ddaef9c801f985de924507f0cceea9786b55ac1f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["ddaef9c801f985de924507f0cceea9786b55ac1f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ee59f646cf24586a449cad77391a60a3ac8d8959","191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["28288370235ed02234a64753cdbf0c6ec096304a"],"f492fe129985750df09c8dac738aecc503158bb3":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ddaef9c801f985de924507f0cceea9786b55ac1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"ee59f646cf24586a449cad77391a60a3ac8d8959":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"ddaef9c801f985de924507f0cceea9786b55ac1f":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","9856095f7afb5a607bf5e65077615ed91273508c"],"191128ac5b85671b1671e2c857437694283b6ebf":["ddaef9c801f985de924507f0cceea9786b55ac1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"f492fe129985750df09c8dac738aecc503158bb3":["6483e4260c08168709c02238ae083a51519a28dd"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}