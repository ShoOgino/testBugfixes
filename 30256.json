{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","commits":[{"id":"b5a22a4684195ce7ed7609f2286ef9d07570efec","date":1428329897,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","pathOld":"/dev/null","sourceNew":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, init, \"comes\");\n    q.setAccept(init, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f39ae26126a88ee050e14ab738bb6c6d0dad877","date":1478516006,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","sourceNew":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes foo\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, s2, \"comes\");\n    q.addTransition(s2, s1, \"here\");\n    q.setAccept(s1, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, init, \"comes\");\n    q.setAccept(init, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","sourceNew":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes foo\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, s2, \"comes\");\n    q.addTransition(s2, s1, \"here\");\n    q.setAccept(s1, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, init, \"comes\");\n    q.setAccept(init, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testWithCycles1().mjava","sourceNew":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes foo\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, s2, \"comes\");\n    q.addTransition(s2, s1, \"here\");\n    q.setAccept(s1, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits.value);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** See if we can create a TAQ with cycles */\n  public void testWithCycles1() throws Exception {\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"here comes here comes\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"comes foo\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    q.addTransition(init, s1, \"here\");\n    q.addTransition(s1, s2, \"comes\");\n    q.addTransition(s2, s1, \"here\");\n    q.setAccept(s1, true);\n    q.finish();\n\n    assertEquals(1, s.search(q, 1).totalHits);\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["b5a22a4684195ce7ed7609f2286ef9d07570efec"],"b5a22a4684195ce7ed7609f2286ef9d07570efec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["b5a22a4684195ce7ed7609f2286ef9d07570efec","6f39ae26126a88ee050e14ab738bb6c6d0dad877"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["6f39ae26126a88ee050e14ab738bb6c6d0dad877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["199dfa410f1fdbfd3294106b04096cce5ed34b21","83788ad129a5154d5c6562c4e8ce3db48793aada"],"b5a22a4684195ce7ed7609f2286ef9d07570efec":["6f39ae26126a88ee050e14ab738bb6c6d0dad877","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5a22a4684195ce7ed7609f2286ef9d07570efec"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}