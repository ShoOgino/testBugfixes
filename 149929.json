{"path":"lucene/misc/src/java/org/apache/lucene/store/HardlinkCopyDirectoryWrapper#copyFrom(Directory,String,String,IOContext).mjava","commits":[{"id":"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5","date":1464252091,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/HardlinkCopyDirectoryWrapper#copyFrom(Directory,String,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void copyFrom(Directory from, String srcFile, String destFile, IOContext context) throws IOException {\n    final Directory fromUnwrapped = FilterDirectory.unwrap(from);\n    final Directory toUnwrapped = FilterDirectory.unwrap(this);\n    // try to unwrap to FSDirectory - we might be able to just create hard-links of these files and save copying\n    // the entire file.\n    Exception suppressedException = null;\n    boolean tryCopy = true;\n    if (fromUnwrapped instanceof FSDirectory\n        && toUnwrapped instanceof FSDirectory) {\n      final Path fromPath = ((FSDirectory) fromUnwrapped).getDirectory();\n      final Path toPath = ((FSDirectory) toUnwrapped).getDirectory();\n\n      if (Files.isReadable(fromPath.resolve(srcFile)) && Files.isWritable(toPath)) {\n        // only try hardlinks if we have permission to access the files\n        // if not super.copyFrom() will give us the right exceptions\n        suppressedException = AccessController.doPrivileged((PrivilegedAction<Exception>) () -> {\n          try {\n            Files.createLink(toPath.resolve(destFile), fromPath.resolve(srcFile));\n          } catch (FileNotFoundException | NoSuchFileException | FileAlreadyExistsException ex) {\n            return ex; // in these cases we bubble up since it's a true error condition.\n          } catch (IOException\n              | UnsupportedOperationException // if the FS doesn't support hard-links\n              | SecurityException ex // we don't have permission to use hard-links just fall back to byte copy\n          ) {\n            // hard-links are not supported or the files are on different filesystems\n            // we could go deeper and check if their filesstores are the same and opt\n            // out earlier but for now we just fall back to normal file-copy\n            return ex;\n          }\n          return null;\n        });\n        tryCopy = suppressedException != null;\n      }\n    }\n    if (tryCopy) {\n      try {\n        super.copyFrom(from, srcFile, destFile, context);\n      } catch (Exception ex) {\n        if (suppressedException != null) {\n          ex.addSuppressed(suppressedException);\n        }\n        throw ex;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/HardlinkCopyDirectoryWrapper#copyFrom(Directory,String,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void copyFrom(Directory from, String srcFile, String destFile, IOContext context) throws IOException {\n    final Directory fromUnwrapped = FilterDirectory.unwrap(from);\n    final Directory toUnwrapped = FilterDirectory.unwrap(this);\n    // try to unwrap to FSDirectory - we might be able to just create hard-links of these files and save copying\n    // the entire file.\n    Exception suppressedException = null;\n    boolean tryCopy = true;\n    if (fromUnwrapped instanceof FSDirectory\n        && toUnwrapped instanceof FSDirectory) {\n      final Path fromPath = ((FSDirectory) fromUnwrapped).getDirectory();\n      final Path toPath = ((FSDirectory) toUnwrapped).getDirectory();\n\n      if (Files.isReadable(fromPath.resolve(srcFile)) && Files.isWritable(toPath)) {\n        // only try hardlinks if we have permission to access the files\n        // if not super.copyFrom() will give us the right exceptions\n        suppressedException = AccessController.doPrivileged((PrivilegedAction<Exception>) () -> {\n          try {\n            Files.createLink(toPath.resolve(destFile), fromPath.resolve(srcFile));\n          } catch (FileNotFoundException | NoSuchFileException | FileAlreadyExistsException ex) {\n            return ex; // in these cases we bubble up since it's a true error condition.\n          } catch (IOException\n              | UnsupportedOperationException // if the FS doesn't support hard-links\n              | SecurityException ex // we don't have permission to use hard-links just fall back to byte copy\n          ) {\n            // hard-links are not supported or the files are on different filesystems\n            // we could go deeper and check if their filesstores are the same and opt\n            // out earlier but for now we just fall back to normal file-copy\n            return ex;\n          }\n          return null;\n        });\n        tryCopy = suppressedException != null;\n      }\n    }\n    if (tryCopy) {\n      try {\n        super.copyFrom(from, srcFile, destFile, context);\n      } catch (Exception ex) {\n        if (suppressedException != null) {\n          ex.addSuppressed(suppressedException);\n        }\n        throw ex;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/store/HardlinkCopyDirectoryWrapper#copyFrom(Directory,String,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void copyFrom(Directory from, String srcFile, String destFile, IOContext context) throws IOException {\n    final Directory fromUnwrapped = FilterDirectory.unwrap(from);\n    final Directory toUnwrapped = FilterDirectory.unwrap(this);\n    // try to unwrap to FSDirectory - we might be able to just create hard-links of these files and save copying\n    // the entire file.\n    Exception suppressedException = null;\n    boolean tryCopy = true;\n    if (fromUnwrapped instanceof FSDirectory\n        && toUnwrapped instanceof FSDirectory) {\n      final Path fromPath = ((FSDirectory) fromUnwrapped).getDirectory();\n      final Path toPath = ((FSDirectory) toUnwrapped).getDirectory();\n\n      if (Files.isReadable(fromPath.resolve(srcFile)) && Files.isWritable(toPath)) {\n        // only try hardlinks if we have permission to access the files\n        // if not super.copyFrom() will give us the right exceptions\n        suppressedException = AccessController.doPrivileged((PrivilegedAction<Exception>) () -> {\n          try {\n            Files.createLink(toPath.resolve(destFile), fromPath.resolve(srcFile));\n          } catch (FileNotFoundException | NoSuchFileException | FileAlreadyExistsException ex) {\n            return ex; // in these cases we bubble up since it's a true error condition.\n          } catch (IOException\n              | UnsupportedOperationException // if the FS doesn't support hard-links\n              | SecurityException ex // we don't have permission to use hard-links just fall back to byte copy\n          ) {\n            // hard-links are not supported or the files are on different filesystems\n            // we could go deeper and check if their filesstores are the same and opt\n            // out earlier but for now we just fall back to normal file-copy\n            return ex;\n          }\n          return null;\n        });\n        tryCopy = suppressedException != null;\n      }\n    }\n    if (tryCopy) {\n      try {\n        super.copyFrom(from, srcFile, destFile, context);\n      } catch (Exception ex) {\n        if (suppressedException != null) {\n          ex.addSuppressed(suppressedException);\n        }\n        throw ex;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5"]},"commit2Childs":{"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}