{"path":"lucene/analysis/nori/src/tools/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","commits":[{"id":"c149f6975379ebb860e93139126a8aabf8e2b66d","date":1562857174,"type":0,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/tools/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","pathOld":"/dev/null","sourceNew":"  public void testPut() throws Exception {\n    TokenInfoDictionary dict = newDictionary(\"명사,1,1,2,NNG,*,*,*,*,*,*,*\",\n        // \"large\" id\n        \"일반,5000,5000,3,NNG,*,*,*,*,*,*,*\");\n    IntsRef wordIdRef = new IntsRefBuilder().get();\n\n    dict.lookupWordIds(0, wordIdRef);\n    int wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(1, dict.getLeftId(wordId));\n    assertEquals(1, dict.getRightId(wordId));\n    assertEquals(2, dict.getWordCost(wordId));\n\n    dict.lookupWordIds(1, wordIdRef);\n    wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(5000, dict.getLeftId(wordId));\n    assertEquals(5000, dict.getRightId(wordId));\n    assertEquals(3, dict.getWordCost(wordId));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3010cab237afb0b81c042f263115756e3cc6d67","date":1564503244,"type":5,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","pathOld":"lucene/analysis/nori/src/tools/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","sourceNew":"  public void testPut() throws Exception {\n    TokenInfoDictionary dict = newDictionary(\"명사,1,1,2,NNG,*,*,*,*,*,*,*\",\n        // \"large\" id\n        \"일반,5000,5000,3,NNG,*,*,*,*,*,*,*\");\n    IntsRef wordIdRef = new IntsRefBuilder().get();\n\n    dict.lookupWordIds(0, wordIdRef);\n    int wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(1, dict.getLeftId(wordId));\n    assertEquals(1, dict.getRightId(wordId));\n    assertEquals(2, dict.getWordCost(wordId));\n\n    dict.lookupWordIds(1, wordIdRef);\n    wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(5000, dict.getLeftId(wordId));\n    assertEquals(5000, dict.getRightId(wordId));\n    assertEquals(3, dict.getWordCost(wordId));\n  }\n\n","sourceOld":"  public void testPut() throws Exception {\n    TokenInfoDictionary dict = newDictionary(\"명사,1,1,2,NNG,*,*,*,*,*,*,*\",\n        // \"large\" id\n        \"일반,5000,5000,3,NNG,*,*,*,*,*,*,*\");\n    IntsRef wordIdRef = new IntsRefBuilder().get();\n\n    dict.lookupWordIds(0, wordIdRef);\n    int wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(1, dict.getLeftId(wordId));\n    assertEquals(1, dict.getRightId(wordId));\n    assertEquals(2, dict.getWordCost(wordId));\n\n    dict.lookupWordIds(1, wordIdRef);\n    wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(5000, dict.getLeftId(wordId));\n    assertEquals(5000, dict.getRightId(wordId));\n    assertEquals(3, dict.getWordCost(wordId));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":5,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","pathOld":"lucene/analysis/nori/src/tools/test/org/apache/lucene/analysis/ko/dict/TokenInfoDictionaryTest#testPut().mjava","sourceNew":"  public void testPut() throws Exception {\n    TokenInfoDictionary dict = newDictionary(\"명사,1,1,2,NNG,*,*,*,*,*,*,*\",\n        // \"large\" id\n        \"일반,5000,5000,3,NNG,*,*,*,*,*,*,*\");\n    IntsRef wordIdRef = new IntsRefBuilder().get();\n\n    dict.lookupWordIds(0, wordIdRef);\n    int wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(1, dict.getLeftId(wordId));\n    assertEquals(1, dict.getRightId(wordId));\n    assertEquals(2, dict.getWordCost(wordId));\n\n    dict.lookupWordIds(1, wordIdRef);\n    wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(5000, dict.getLeftId(wordId));\n    assertEquals(5000, dict.getRightId(wordId));\n    assertEquals(3, dict.getWordCost(wordId));\n  }\n\n","sourceOld":"  public void testPut() throws Exception {\n    TokenInfoDictionary dict = newDictionary(\"명사,1,1,2,NNG,*,*,*,*,*,*,*\",\n        // \"large\" id\n        \"일반,5000,5000,3,NNG,*,*,*,*,*,*,*\");\n    IntsRef wordIdRef = new IntsRefBuilder().get();\n\n    dict.lookupWordIds(0, wordIdRef);\n    int wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(1, dict.getLeftId(wordId));\n    assertEquals(1, dict.getRightId(wordId));\n    assertEquals(2, dict.getWordCost(wordId));\n\n    dict.lookupWordIds(1, wordIdRef);\n    wordId = wordIdRef.ints[wordIdRef.offset];\n    assertEquals(5000, dict.getLeftId(wordId));\n    assertEquals(5000, dict.getRightId(wordId));\n    assertEquals(3, dict.getWordCost(wordId));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3010cab237afb0b81c042f263115756e3cc6d67":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c149f6975379ebb860e93139126a8aabf8e2b66d","e3010cab237afb0b81c042f263115756e3cc6d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3010cab237afb0b81c042f263115756e3cc6d67"]},"commit2Childs":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["e3010cab237afb0b81c042f263115756e3cc6d67","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"e3010cab237afb0b81c042f263115756e3cc6d67":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}