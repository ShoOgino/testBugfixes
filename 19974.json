{"path":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new NamedListCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new NamedListCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new NamedListCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new JavaBinCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new NamedListCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new JavaBinCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    NamedList nl = new NamedList();\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n\n    // Set up a simple document\n    NamedList r = new NamedList();\n\n\n    nl.add(\"responseHeader\", r);\n\n    r.add(\"status\",0);\n    r.add(\"QTime\",63);\n    NamedList p = new NamedList();\n    r.add(\"params\",p);\n    p.add(\"rows\",10);\n    p.add(\"start\",0);\n    p.add(\"indent\",\"on\");\n    p.add(\"q\",\"ipod\");\n\n\n    SolrDocumentList list =     new SolrDocumentList();\n    nl.add(\"response\", list );\n    list.setMaxScore(1.0f);\n    list.setStart(10);\n    list.setNumFound(12);\n\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 );\n    list.add(doc);\n\n    doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 101 );\n    list.add(doc);\n\n    nl.add(\"zzz\",doc);\n\n    new JavaBinCodec(null).marshal(nl,baos);\n    byte[] arr = baos.toByteArray();\n    nl = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n\n\n    assertEquals(3, nl.size());\n    assertEquals( \"ipod\",((NamedList)((NamedList)nl.getVal(0)).get(\"params\")).get(\"q\") );\n    list = (SolrDocumentList) nl.getVal(1);\n    assertEquals(12,list.getNumFound() );\n    assertEquals(10,list.getStart() );\n    assertEquals(101, ((List)list.get(1).getFieldValue(\"f\")).get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"ad94625fb8d088209f46650c8097196fec67f00c":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"2307281f021c98102266052f57b7938614dbb30d":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["2307281f021c98102266052f57b7938614dbb30d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}