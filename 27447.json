{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#flushAllBuffersSequentially().mjava","commits":[{"id":"8dd9100a9fc8733b099048622863a3f8f8af7d6a","date":1552574615,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#flushAllBuffersSequentially().mjava","pathOld":"/dev/null","sourceNew":"  private void flushAllBuffersSequentially() throws IOException {\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW.add/updateDocument: now flushing the largest writer at docCount=\" + docCount);\n    }\n    int activeThreadStateCount = w.docWriter.perThreadPool.getActiveThreadStateCount();\n    int numFlushes = Math.min(1, r.nextInt(activeThreadStateCount+1));\n    for (int i = 0; i < numFlushes; i++) {\n      if (w.flushNextBuffer() == false) {\n        break; // stop once we didn't flush anything\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#flushAllBuffersSequentially().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#flushAllBuffersSequentially().mjava","sourceNew":"  private void flushAllBuffersSequentially() throws IOException {\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW.add/updateDocument: now flushing the largest writer at docCount=\" + docCount);\n    }\n    int threadPoolSize = w.docWriter.perThreadPool.size();\n    int numFlushes = Math.min(1, r.nextInt(threadPoolSize+1));\n    for (int i = 0; i < numFlushes; i++) {\n      if (w.flushNextBuffer() == false) {\n        break; // stop once we didn't flush anything\n      }\n    }\n  }\n\n","sourceOld":"  private void flushAllBuffersSequentially() throws IOException {\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW.add/updateDocument: now flushing the largest writer at docCount=\" + docCount);\n    }\n    int activeThreadStateCount = w.docWriter.perThreadPool.getActiveThreadStateCount();\n    int numFlushes = Math.min(1, r.nextInt(activeThreadStateCount+1));\n    for (int i = 0; i < numFlushes; i++) {\n      if (w.flushNextBuffer() == false) {\n        break; // stop once we didn't flush anything\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["8dd9100a9fc8733b099048622863a3f8f8af7d6a"],"8dd9100a9fc8733b099048622863a3f8f8af7d6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8dd9100a9fc8733b099048622863a3f8f8af7d6a":["264935965977b4a9e2f3920420647072c9c49176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dd9100a9fc8733b099048622863a3f8f8af7d6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}