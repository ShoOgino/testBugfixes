{"path":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f","date":1178835005,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( 500, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( 500, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( 500, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","a60a2c6210199f762377b068370764ed7a438b98","a60a2c6210199f762377b068370764ed7a438b98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( 500, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( 500, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( 500, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":["f180d0a9bb8516854d228e8cf9daa42572290f90","f180d0a9bb8516854d228e8cf9daa42572290f90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(SolrConfig,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758a0ba5e213f4d1fc89087ae6e4678f7879e450","date":1224361193,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLength\", Integer.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","f180d0a9bb8516854d228e8cf9daa42572290f90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a60a2c6210199f762377b068370764ed7a438b98","date":1225926368,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLength\", Integer.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLength\", Integer.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f180d0a9bb8516854d228e8cf9daa42572290f90","date":1239503041,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLength\", Integer.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":["758a0ba5e213f4d1fc89087ae6e4678f7879e450","c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a60a2c6210199f762377b068370764ed7a438b98":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"f180d0a9bb8516854d228e8cf9daa42572290f90":["a60a2c6210199f762377b068370764ed7a438b98"],"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"ad94625fb8d088209f46650c8097196fec67f00c":["f180d0a9bb8516854d228e8cf9daa42572290f90"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a60a2c6210199f762377b068370764ed7a438b98":["f180d0a9bb8516854d228e8cf9daa42572290f90"],"f180d0a9bb8516854d228e8cf9daa42572290f90":["ad94625fb8d088209f46650c8097196fec67f00c"],"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["a60a2c6210199f762377b068370764ed7a438b98"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}