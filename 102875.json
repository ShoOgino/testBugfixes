{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(3);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups!\", expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0e7ddedf744427dad36befd57a11188002f735f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(3);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups!\", expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(3);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups!\", expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7ddedf744427dad36befd57a11188002f735f9","date":1481407395,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      //TODO: remove me since this is excessive in the normal case, this is in for SOLR-9843\n      if (expected != fieldCommandGroups.size()) {\n        log.error(\"(1) About to fail assert, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(3);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups!\", expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      //TODO: remove me since this is excessive in the normal case, this is in for SOLR-9843\n      if (expected != fieldCommandGroups.size()) {\n        log.error(\"(1) About to fail assert, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(3);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups!\", expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2b464eff6241d222eb99fab9a53115a1808840e","date":1483064079,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      //TODO: remove me since this is excessive in the normal case, this is in for SOLR-9843\n      if (expected != fieldCommandGroups.size()) {\n        log.error(\"(1) About to fail assert, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      //TODO: remove me since this is excessive in the normal case, this is in for SOLR-9843\n      if (expected != fieldCommandGroups.size()) {\n        log.error(\"(1) About to fail assert, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n      \n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      if (!prop.getName().startsWith(\"intGSF\")) { // TODO: can be 3 or 4\n        assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91","0e7ddedf744427dad36befd57a11188002f735f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf","date":1555648681,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n      \n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      if (!prop.getName().startsWith(\"intGSF\")) { // TODO: can be 3 or 4\n        assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n      \n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      if (!prop.getName().startsWith(\"intGSF\")) { // TODO: can be 3 or 4\n        assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n      \n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      if (!prop.getName().startsWith(\"intGSF\")) { // TODO: can be 3 or 4\n        assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","date":1557431147,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\", \"DocValuesNotINdexedTest.testGroupingDocAbsent\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDocAbsent().mjava","sourceNew":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupingDocAbsent() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(4);\n    docs.add(makeGSDoc(2, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(1, fieldsToTestGroupSortFirst, null));\n    docs.add(makeGSDoc(3, fieldsToTestGroupSortFirst, null));\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 4);\n    docs.add(doc);\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION, \"id\", 4, \"*:*\", \"DocValuesNotINdexedTest.testGroupingDocAbsent\");\n    // when grouping on any of these DV-only (not indexed) fields we expect exactly 4 groups except for Boolean.\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName());\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n      GroupCommand fieldCommand = commands.get(0);\n      int expected = 4;\n      if (prop.getName().startsWith(\"bool\")) expected = 3; //true, false and null\n\n      List<Group> fieldCommandGroups = fieldCommand.getValues();\n      assertEquals(\"Did not find the expected number of groups for field \" + prop.getName(), expected, fieldCommandGroups.size());\n    }\n  }\n\n","bugFix":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["e2b464eff6241d222eb99fab9a53115a1808840e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["c344401c324a00bc10cacfb90598738235a4decb"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9856095f7afb5a607bf5e65077615ed91273508c","e2b464eff6241d222eb99fab9a53115a1808840e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0e7ddedf744427dad36befd57a11188002f735f9":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"e2b464eff6241d222eb99fab9a53115a1808840e":["0e7ddedf744427dad36befd57a11188002f735f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","0e7ddedf744427dad36befd57a11188002f735f9"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c344401c324a00bc10cacfb90598738235a4decb":["b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["3821108e77348b1cdb6baf5422727f926ba7af61"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"c72f6f0907682b825869d7878ba72d8259dabc91":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf":["c344401c324a00bc10cacfb90598738235a4decb"],"0e7ddedf744427dad36befd57a11188002f735f9":["e2b464eff6241d222eb99fab9a53115a1808840e","9856095f7afb5a607bf5e65077615ed91273508c"],"e2b464eff6241d222eb99fab9a53115a1808840e":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"9856095f7afb5a607bf5e65077615ed91273508c":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["0e7ddedf744427dad36befd57a11188002f735f9"],"c344401c324a00bc10cacfb90598738235a4decb":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}