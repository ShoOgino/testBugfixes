{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTrue(filter.next(new Token()) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f39329fbba4150062ff9e03dd6f927ce79c12737","date":1263157798,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"f39329fbba4150062ff9e03dd6f927ce79c12737":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["f39329fbba4150062ff9e03dd6f927ce79c12737"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["f39329fbba4150062ff9e03dd6f927ce79c12737"],"f39329fbba4150062ff9e03dd6f927ce79c12737":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}