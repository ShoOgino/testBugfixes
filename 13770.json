{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  @Deprecated\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  @Deprecated\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMaxMergeDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Returns the largest segment (measured by document\n   * count) that may be merged with other segments.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.getMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * @see #setMaxMergeDocs\n   * @deprecated use {@link LogMergePolicy#getMaxMergeDocs()} directly.\n   */\n  @Deprecated\n  public int getMaxMergeDocs() {\n    return getLogMergePolicy().getMaxMergeDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fe956d65251358d755c56f14fe8380644790e47","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}