{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"/dev/null","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b9214e93abd5c360b7dc32483691d5555a9c7e","date":1394289706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    Directory tempDir = getDirectory();\n    \n    try {\n      new Dictionary(tempDir, \"dictionary\", affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n    tempDir.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    Directory tempDir = getDirectory();\n    \n    ParseException expected = expectThrows(ParseException.class, () -> {\n      new Dictionary(tempDir, \"dictionary\", affixStream, dictStream);\n    });\n    assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n    assertEquals(24, expected.getErrorOffset());\n    \n    affixStream.close();\n    dictStream.close();\n    tempDir.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    Directory tempDir = getDirectory();\n    \n    try {\n      new Dictionary(tempDir, \"dictionary\", affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().startsWith(\"The affix file contains a rule with less than four elements\"));\n      assertEquals(24, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n    tempDir.close();\n  }\n\n","bugFix":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","b6b9214e93abd5c360b7dc32483691d5555a9c7e","1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}