{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"field=a\", null, \"a\");\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"field=a\", null, \"a\");\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"field=a\", null, \"a\");\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"field=a\", null, \"a\");\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"field=a\", null, \"a\");\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}