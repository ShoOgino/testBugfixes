{"path":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","commits":[{"id":"e5974da97d735dd78f13f46406caf64c9448e4f4","date":1343143368,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"/dev/null","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      try {\n        final URL url = profilesEnum.nextElement();\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final String[] prts = line.trim().split(\"#\");\n            if (0 != prts.length) {\n              final String c = prts[0].trim();\n              if (!(0 == c.length() || c.startsWith(\"#\"))) {\n                lines.add(c);\n              }\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI classes.\", ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1","date":1343144986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final String[] prts = line.trim().split(\"#\");\n            if (0 != prts.length) {\n              final String c = prts[0].trim();\n              if (!(0 == c.length() || c.startsWith(\"#\"))) {\n                lines.add(c);\n              }\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      try {\n        final URL url = profilesEnum.nextElement();\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final String[] prts = line.trim().split(\"#\");\n            if (0 != prts.length) {\n              final String c = prts[0].trim();\n              if (!(0 == c.length() || c.startsWith(\"#\"))) {\n                lines.add(c);\n              }\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI classes.\", ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2132dcc9e5649f84442e8d0f9d45a3877df556e2","date":1343166771,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final String[] prts = line.trim().split(\"#\");\n            if (0 != prts.length) {\n              final String c = prts[0].trim();\n              if (!(0 == c.length() || c.startsWith(\"#\"))) {\n                lines.add(c);\n              }\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"/dev/null","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"/dev/null","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"/dev/null","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<String>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, IOUtils.CHARSET_UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        boolean success = false;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(in);\n          } else {\n            IOUtils.closeWhileHandlingException(in);\n          }\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        IOException priorE = null;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n        } catch (IOException ioe) {\n          priorE = ioe;\n        } finally {\n          IOUtils.closeWhileHandlingException(priorE, in);\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32694fa3bbb984d3054955e48d946708e16110ff","date":1585155816,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#loadNextProfile().mjava","sourceNew":null,"sourceOld":"  private boolean loadNextProfile() {\n    ArrayList<String> lines = null;\n    while (profilesEnum.hasMoreElements()) {\n      if (lines != null) {\n        lines.clear();\n      } else {\n        lines = new ArrayList<>();\n      }\n      final URL url = profilesEnum.nextElement();\n      try {\n        final InputStream in = url.openStream();\n        boolean success = false;\n        try {\n          final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            final int pos = line.indexOf('#');\n            if (pos >= 0) {\n              line = line.substring(0, pos);\n            }\n            line = line.trim();\n            if (line.length() > 0) {\n              lines.add(line);\n            }\n          }\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(in);\n          } else {\n            IOUtils.closeWhileHandlingException(in);\n          }\n        }\n      } catch (IOException ioe) {\n        throw new ServiceConfigurationError(\"Error loading SPI class list from URL: \" + url, ioe);\n      }\n      if (!lines.isEmpty()) {\n        this.linesIterator = lines.iterator();\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["7d89d7e4e5101347833eea558851bf4209218619"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2132dcc9e5649f84442e8d0f9d45a3877df556e2"],"2132dcc9e5649f84442e8d0f9d45a3877df556e2":["08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"32694fa3bbb984d3054955e48d946708e16110ff":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["e5974da97d735dd78f13f46406caf64c9448e4f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32694fa3bbb984d3054955e48d946708e16110ff"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["32694fa3bbb984d3054955e48d946708e16110ff"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2132dcc9e5649f84442e8d0f9d45a3877df556e2":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["2132dcc9e5649f84442e8d0f9d45a3877df556e2"],"32694fa3bbb984d3054955e48d946708e16110ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5974da97d735dd78f13f46406caf64c9448e4f4","5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}