{"path":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newShortRange(String,FieldCache.ShortParser,Short,Short,boolean,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newShortRange(String,FieldCache.ShortParser,Short,Short,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getShorts(IndexReader,String,FieldCache.ShortParser)}. This works with all\n   * short fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Short> newShortRange(String field, FieldCache.ShortParser parser, Short lowerVal, Short upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Short>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final short inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          short i = lowerVal.shortValue();\n          if (!includeLower && i == Short.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (short) (includeLower ? i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Short.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          short i = upperVal.shortValue();\n          if (!includeUpper && i == Short.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (short) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Short.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newShortRange(String,FieldCache.ShortParser,Short,Short,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newShortRange(String,FieldCache.ShortParser,Short,Short,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getShorts(IndexReader,String,FieldCache.ShortParser)}. This works with all\n   * short fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Short> newShortRange(String field, FieldCache.ShortParser parser, Short lowerVal, Short upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Short>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final short inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          short i = lowerVal.shortValue();\n          if (!includeLower && i == Short.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (short) (includeLower ? i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Short.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          short i = upperVal.shortValue();\n          if (!includeUpper && i == Short.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (short) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Short.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getShorts(IndexReader,String,FieldCache.ShortParser)}. This works with all\n   * short fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Short> newShortRange(String field, FieldCache.ShortParser parser, Short lowerVal, Short upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Short>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final short inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          short i = lowerVal.shortValue();\n          if (!includeLower && i == Short.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (short) (includeLower ? i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Short.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          short i = upperVal.shortValue();\n          if (!includeUpper && i == Short.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (short) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Short.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}