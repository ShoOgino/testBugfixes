{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","commits":[{"id":"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","date":1474482359,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n      waitForNoShardInconsistency();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n      waitForNoShardInconsistency();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"/dev/null","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n      waitForNoShardInconsistency();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n      waitForNoShardInconsistency();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n      waitForNoShardInconsistency();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#forceNodeFailures(List[CloudJettyRunner]).mjava","sourceNew":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      replicaToShutDown.jetty.stop();\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","sourceOld":"  private void forceNodeFailures(List<CloudJettyRunner> replicasToShutDown) throws Exception {\n    for (CloudJettyRunner replicaToShutDown : replicasToShutDown) {\n      chaosMonkey.killJetty(replicaToShutDown);\n    }\n\n    int totalDown = 0;\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n\n    if (replicasToShutDown != null) {\n      jetties.removeAll(replicasToShutDown);\n      totalDown += replicasToShutDown.size();\n    }\n\n    jetties.removeAll(nodesDown);\n    totalDown += nodesDown.size();\n\n    assertEquals(getShardCount() - totalDown, jetties.size());\n\n    nodesDown.addAll(replicasToShutDown);\n  }\n\n","bugFix":["fcc7eba0b32cbc7cc5b8fd388032bb833fa07786"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786"],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}