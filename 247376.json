{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#collectEligibleReplicas(Slice,ClusterState,boolean,Predicate[Replica]).mjava","commits":[{"id":"e73ed7d4570aa6de9e2054e7d2c5701733790f81","date":1496424870,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#collectEligibleReplicas(Slice,ClusterState,boolean,Predicate[Replica]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Replica> collectEligibleReplicas(Slice slice, ClusterState clusterState, boolean onlyNrtReplicas, Predicate<Replica> isShardLeader) {\n    final Collection<Replica> allSliceReplicas = slice.getReplicasMap().values();\n    final List<Replica> eligibleSliceReplicas = new ArrayList<>(allSliceReplicas.size());\n    for (Replica replica : allSliceReplicas) {\n      if (!clusterState.liveNodesContain(replica.getNodeName())\n          || replica.getState() != Replica.State.ACTIVE\n          || (onlyNrtReplicas && replica.getType() == Replica.Type.PULL)) {\n        continue;\n      }\n\n      if (onlyNrtReplicas && replica.getType() == Replica.Type.TLOG) {\n        if (!isShardLeader.test(replica)) {\n          continue;\n        }\n      }\n      eligibleSliceReplicas.add(replica);\n    }\n    return eligibleSliceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#collectEligibleReplicas(Slice,ClusterState,boolean,Predicate[Replica]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Replica> collectEligibleReplicas(Slice slice, ClusterState clusterState, boolean onlyNrtReplicas, Predicate<Replica> isShardLeader) {\n    final Collection<Replica> allSliceReplicas = slice.getReplicasMap().values();\n    final List<Replica> eligibleSliceReplicas = new ArrayList<>(allSliceReplicas.size());\n    for (Replica replica : allSliceReplicas) {\n      if (!clusterState.liveNodesContain(replica.getNodeName())\n          || replica.getState() != Replica.State.ACTIVE\n          || (onlyNrtReplicas && replica.getType() == Replica.Type.PULL)) {\n        continue;\n      }\n\n      if (onlyNrtReplicas && replica.getType() == Replica.Type.TLOG) {\n        if (!isShardLeader.test(replica)) {\n          continue;\n        }\n      }\n      eligibleSliceReplicas.add(replica);\n    }\n    return eligibleSliceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#collectEligibleReplicas(Slice,ClusterState,boolean,Predicate[Replica]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Replica> collectEligibleReplicas(Slice slice, ClusterState clusterState, boolean onlyNrtReplicas, Predicate<Replica> isShardLeader) {\n    final Collection<Replica> allSliceReplicas = slice.getReplicasMap().values();\n    final List<Replica> eligibleSliceReplicas = new ArrayList<>(allSliceReplicas.size());\n    for (Replica replica : allSliceReplicas) {\n      if (!clusterState.liveNodesContain(replica.getNodeName())\n          || replica.getState() != Replica.State.ACTIVE\n          || (onlyNrtReplicas && replica.getType() == Replica.Type.PULL)) {\n        continue;\n      }\n\n      if (onlyNrtReplicas && replica.getType() == Replica.Type.TLOG) {\n        if (!isShardLeader.test(replica)) {\n          continue;\n        }\n      }\n      eligibleSliceReplicas.add(replica);\n    }\n    return eligibleSliceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc28b46d62a8b91c8e90f9345612c4050eab98d4","date":1581344825,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#collectEligibleReplicas(Slice,ClusterState,boolean,Predicate[Replica]).mjava","sourceNew":null,"sourceOld":"  private static List<Replica> collectEligibleReplicas(Slice slice, ClusterState clusterState, boolean onlyNrtReplicas, Predicate<Replica> isShardLeader) {\n    final Collection<Replica> allSliceReplicas = slice.getReplicasMap().values();\n    final List<Replica> eligibleSliceReplicas = new ArrayList<>(allSliceReplicas.size());\n    for (Replica replica : allSliceReplicas) {\n      if (!clusterState.liveNodesContain(replica.getNodeName())\n          || replica.getState() != Replica.State.ACTIVE\n          || (onlyNrtReplicas && replica.getType() == Replica.Type.PULL)) {\n        continue;\n      }\n\n      if (onlyNrtReplicas && replica.getType() == Replica.Type.TLOG) {\n        if (!isShardLeader.test(replica)) {\n          continue;\n        }\n      }\n      eligibleSliceReplicas.add(replica);\n    }\n    return eligibleSliceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e73ed7d4570aa6de9e2054e7d2c5701733790f81"],"e73ed7d4570aa6de9e2054e7d2c5701733790f81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e73ed7d4570aa6de9e2054e7d2c5701733790f81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e73ed7d4570aa6de9e2054e7d2c5701733790f81":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","e73ed7d4570aa6de9e2054e7d2c5701733790f81","28288370235ed02234a64753cdbf0c6ec096304a"],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}