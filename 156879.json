{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm, text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm, text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm.get(), text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm, text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","bugFix":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm.get(), text);\n      try {\n        fstCompiler.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm.get(), text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.FSTFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm.get(), text);\n      try {\n        fstCompiler.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      if (text.length == 0) {\n        // We already added empty string in ctor\n        assert termsFilePointer == startTermsFilePointer;\n        return;\n      }\n      final int lengthSave = text.length;\n      text.length = indexedTermPrefixLength(lastTerm.get(), text);\n      try {\n        fstBuilder.add(Util.toIntsRef(text, scratchIntsRef), termsFilePointer);\n      } finally {\n        text.length = lengthSave;\n      }\n      lastTerm.copyBytes(text);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}