{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n    assert cachedRootArcs != null;\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch != END_LABEL && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n \n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      //System.out.println(\"  bs \" + arc.numArcs);\n      arc.bytesPerArc = in.readInt();\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n    assert cachedRootArcs != null;\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch != END_LABEL && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n \n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      //System.out.println(\"  bs \" + arc.numArcs);\n      arc.bytesPerArc = in.readInt();\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n    assert cachedRootArcs != null;\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch != END_LABEL && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n \n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      //System.out.println(\"  bs \" + arc.numArcs);\n      arc.bytesPerArc = in.readInt();\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    assert cachedRootArcs != null;\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          // NOTE: nextArc is a node (not an address!) in this case:\n          arc.nextArc = follow.target;\n          arc.node = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    in.pos = getNodeAddress(follow.target);\n\n    arc.node = follow.target;\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.skip(arc.posArcsStart, arc.bytesPerArc*mid + 1);\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstRealTargetArc(follow.target, arc, in);\n\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n    assert cachedRootArcs != null;\n    // Short-circuit if this arc is in the root arc cache:\n    if (follow.target == startNode && labelToMatch != END_LABEL && labelToMatch < cachedRootArcs.length) {\n      final Arc<T> result = cachedRootArcs[labelToMatch];\n      if (result == null) {\n        return result;\n      } else {\n        arc.copyFrom(result);\n        return arc;\n      }\n    }\n \n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        if (follow.target <= 0) {\n          arc.flags = BIT_LAST_ARC;\n        } else {\n          arc.flags = 0;\n          arc.nextArc = follow.target;\n        }\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    // System.out.println(\"fta label=\" + (char) labelToMatch);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      //System.out.println(\"  bs \" + arc.numArcs);\n      arc.bytesPerArc = in.readInt();\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        //System.out.println(\"    cycle\");\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          //System.out.println(\"    found!\");\n          return readNextRealArc(arc, in);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      //System.out.println(\"  non-bs cycle\");\n      // TODO: we should fix this code to not have to create\n      // object for the output of every arc we scan... only\n      // for the matching arc, if found\n      if (arc.label == labelToMatch) {\n        //System.out.println(\"    found!\");\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fd9cc9d77712aba3662f24632df7539ab75e3667"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}