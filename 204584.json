{"path":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}