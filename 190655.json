{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","commits":[{"id":"f60f33a488eaf8a55781c331299c44c2dc19dc32","date":1440094205,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"/dev/null","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    DocIdSetIterator advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    DocIdSetIterator nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    DocIdSetIterator advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    DocIdSetIterator nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n    \n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()));\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()));\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, random().nextBoolean());\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createWeight(s.rewrite(parentJoinQuery), RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()), 1);\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()));\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildInitialAdvanceParentButNoKids().mjava","sourceNew":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createWeight(s.rewrite(parentJoinQuery), RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()), 1);\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildInitialAdvanceParentButNoKids() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // degenerate case: first doc has no children\n    w.addDocument(makeResume(\"first\", \"nokids\"));\n    w.addDocuments(Arrays.asList(makeJob(\"job\", 42), makeResume(\"second\", \"haskid\")));\n\n    // single segment\n    w.forceMerge(1);\n\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r, false);\n    w.close();\n\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new TermQuery(new Term(\"docType\", \"resume\"));\n\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentFilter);\n\n    Weight weight = s.createNormalizedWeight(parentJoinQuery, RandomPicks.randomFrom(random(), org.apache.lucene.search.ScoreMode.values()));\n    Scorer advancingScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n    Scorer nextDocScorer = weight.scorer(s.getIndexReader().leaves().get(0));\n\n    final int firstKid = nextDocScorer.iterator().nextDoc();\n    assertTrue(\"firstKid not found\", DocIdSetIterator.NO_MORE_DOCS != firstKid);\n    assertEquals(firstKid, advancingScorer.iterator().advance(0));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"f60f33a488eaf8a55781c331299c44c2dc19dc32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["0e7bc21595222ae4f75509300fbb7726691f387f"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["f60f33a488eaf8a55781c331299c44c2dc19dc32"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["0e7bc21595222ae4f75509300fbb7726691f387f","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"f60f33a488eaf8a55781c331299c44c2dc19dc32":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f60f33a488eaf8a55781c331299c44c2dc19dc32"],"0e7bc21595222ae4f75509300fbb7726691f387f":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}