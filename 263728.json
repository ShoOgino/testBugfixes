{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(qb.build(), 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(qb.build(), 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    q.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(q, 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.count(qb.build())); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(qb.build(), 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testMultiExactWithRepeats().mjava","sourceNew":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.count(qb.build())); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testMultiExactWithRepeats() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"a b c d e f g h i k\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"d\")}, 0);\n    qb.add(new Term[] {new Term(\"body\", \"a\"), new Term(\"body\", \"f\")}, 2);\n    assertEquals(1, searcher.search(qb.build(), 1).totalHits); // should match on \"a b\"\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","470eaac3a77cf637b62126a5408b178d7be93eb1"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d0ef034a4f10871667ae75181537775ddcf8ade4","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}