{"path":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","commits":[{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermEnum()\n  {\n    IndexWriter writer = null;\n\n    try {\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n      // add 100 documents with term : aaa\n      // add 100 documents with terms: aaa bbb\n      // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer, \"aaa\");\n        addDoc(writer, \"aaa bbb\");\n      }\n\n      writer.close();\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    try {\n      // verify document frequency of terms in an unoptimized index\n      verifyDocFreq();\n\n      // merge segments by optimizing the index\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n\n      // verify document frequency of terms in an optimized index\n      verifyDocFreq();\n    }\n    catch (IOException e2) {\n      e2.printStackTrace();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n    // add 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum()\n  {\n    IndexWriter writer = null;\n\n    try {\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n      // add 100 documents with term : aaa\n      // add 100 documents with terms: aaa bbb\n      // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer, \"aaa\");\n        addDoc(writer, \"aaa bbb\");\n      }\n\n      writer.close();\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    try {\n      // verify document frequency of terms in an unoptimized index\n      verifyDocFreq();\n\n      // merge segments by optimizing the index\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n\n      // verify document frequency of terms in an optimized index\n      verifyDocFreq();\n    }\n    catch (IOException e2) {\n      e2.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n    // add 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException\n  {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testTermEnum().mjava","sourceNew":"  public void testTermEnum() throws IOException {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","sourceOld":"  public void testTermEnum() throws IOException {\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // ADD 100 documents with term : aaa\n    // add 100 documents with terms: aaa bbb\n    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer, \"aaa\");\n      addDoc(writer, \"aaa bbb\");\n    }\n\n    writer.close();\n\n    // verify document frequency of terms in an unoptimized index\n    verifyDocFreq();\n\n    // merge segments by optimizing the index\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    // verify document frequency of terms in an optimized index\n    verifyDocFreq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eafd816608011f66422f3052c37962973582d12a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["eafd816608011f66422f3052c37962973582d12a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"eafd816608011f66422f3052c37962973582d12a":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eafd816608011f66422f3052c37962973582d12a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}