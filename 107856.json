{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    createNewCollection(\"collection3\");\n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    createNewCollection(\"collection3\");\n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    createNewCollection(\"collection3\");\n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    createNewCollection(\"collection3\");\n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    createNewCollection(\"collection3\");\n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws MalformedURLException,\n      SolrServerException, IOException, Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\")); \n    \n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrServer().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrServer().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrServer().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrServer().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrServer().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrServer().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrServer().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrServer().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    solrj.setDefaultCollection(\"collection2\");\n    solrj.add(getDoc(id, \"10000004\"));\n    solrj.setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    solrj.setDefaultCollection(\"collection3\");\n    solrj.add(getDoc(id, \"10000005\"));\n    solrj.setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    solrj.setDefaultCollection(\"collection1\");\n    long collection1Docs = solrj.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = solrj.query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrServer().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrServer().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrServer().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrServer().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Request> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrServer().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrServer().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrServer().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrServer().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrClient().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrClient().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrClient().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrClient().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrServer().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrServer().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrServer().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrServer().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrServer().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrServer().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrServer().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testMultipleCollections().mjava","sourceNew":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrClient().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrClient().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrClient().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrClient().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","sourceOld":"  private void testMultipleCollections() throws Exception {\n    log.info(\"### STARTING testMultipleCollections\");\n    // create another 2 collections and search across them\n    createNewCollection(\"collection2\");\n    createNewCollection(\"collection3\");\n    \n    while (pending != null && pending.size() > 0) {\n      \n      Future<Object> future = completionService.take();\n      if (future == null) return;\n      pending.remove(future);\n    }\n    \n    indexDoc(\"collection2\", getDoc(id, \"10000000\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000001\")); \n    indexDoc(\"collection2\", getDoc(id, \"10000003\"));\n    getCommonCloudSolrClient().setDefaultCollection(\"collection2\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000004\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    indexDoc(\"collection3\", getDoc(id, \"20000000\"));\n    indexDoc(\"collection3\", getDoc(id, \"20000001\")); \n    getCommonCloudSolrClient().setDefaultCollection(\"collection3\");\n    getCommonCloudSolrClient().add(getDoc(id, \"10000005\"));\n    getCommonCloudSolrClient().setDefaultCollection(null);\n    \n    otherCollectionClients.get(\"collection2\").get(0).commit();\n    otherCollectionClients.get(\"collection3\").get(0).commit();\n    \n    getCommonCloudSolrClient().setDefaultCollection(\"collection1\");\n    long collection1Docs = getCommonCloudSolrClient().query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    long collection2Docs = otherCollectionClients.get(\"collection2\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found2: \"+ collection2Docs);\n    long collection3Docs = otherCollectionClients.get(\"collection3\").get(0)\n        .query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    System.out.println(\"found3: \"+ collection3Docs);\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection2,collection3\");\n    long found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"collection1,collection2,collection3\");\n    found = clients.get(0).query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    // try to search multiple with cloud client\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs + collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection2,collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection2Docs + collection3Docs, found);\n    \n    query.set(\"collection\", \"collection3\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection3Docs, found);\n    \n    query.remove(\"collection\");\n    found = getCommonCloudSolrClient().query(query).getResults().getNumFound();\n    assertEquals(collection1Docs, found);\n    \n    assertEquals(collection3Docs, collection2Docs - 1);\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bafca15d8e408346a67f4282ad1143b88023893b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c215736a9e29403edd2132d9f0829a287b428df4"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["c215736a9e29403edd2132d9f0829a287b428df4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bafca15d8e408346a67f4282ad1143b88023893b":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c215736a9e29403edd2132d9f0829a287b428df4":["c5a558d54519c651068ddb202f03befefb1514a7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c5a558d54519c651068ddb202f03befefb1514a7":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["bafca15d8e408346a67f4282ad1143b88023893b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bafca15d8e408346a67f4282ad1143b88023893b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7","f2126b84bd093fa3d921582a109a0ee578c28126"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c5a558d54519c651068ddb202f03befefb1514a7":["c215736a9e29403edd2132d9f0829a287b428df4"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d9405f486872f1e416304dfe389741f4ee2f8a4d","fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}