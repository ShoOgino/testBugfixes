{"path":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  Principal principal = new BasicAuthUserPrincipal(username, pwd);\n                  request = wrapWithPrincipal(request, principal);\n                  numAuthenticated.inc();\n                  filterChain.doFilter(request, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  Principal principal = new BasicAuthUserPrincipal(username, pwd);\n                  request = wrapWithPrincipal(request, principal, username);\n                  numAuthenticated.inc();\n                  filterChain.doFilter(request, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  Principal principal = new BasicAuthUserPrincipal(username, pwd);\n                  request = wrapWithPrincipal(request, principal);\n                  numAuthenticated.inc();\n                  filterChain.doFilter(request, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}