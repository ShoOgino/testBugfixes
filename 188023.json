{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","sourceNew":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","sourceOld":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","sourceNew":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase(locale)));\n  }\n\n","sourceOld":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","sourceNew":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase(locale)));\n  }\n\n","sourceOld":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","sourceNew":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase(locale)));\n  }\n\n","sourceOld":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#remove(String).mjava","sourceNew":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase(locale)));\n  }\n\n","sourceOld":"  /**\n   * Removes the value indexed by key. Also removes all nodes that are rendered\n   * unnecessary by the removal of this data.\n   * \n   *@param key\n   *          A <code>string</code> that indexes the object to be removed from\n   *          the Trie.\n   */\n  public void remove(String key) {\n    deleteNode(getNode(key.trim().toLowerCase()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec57145e34263e28da6b82568e35471f7d67df69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}