{"path":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","commits":[{"id":"b451a0c4c12c9a8575a49bafc27463190c8b8833","date":1149619984,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n    \n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field, a PolyField, or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field, or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n     SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b82ee93a0b7e1703398375f2e9acc80c452b97c4","date":1261679725,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field, a PolyField, or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["ad94625fb8d088209f46650c8097196fec67f00c"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}