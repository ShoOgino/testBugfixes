{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#getRandomString(Random).mjava","commits":[{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#getRandomString(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#getRandomString().mjava","sourceNew":"  static String getRandomString(Random random) {\n    final String term;\n    if (random.nextBoolean()) {\n      term = _TestUtil.randomRealisticUnicodeString(random);\n    } else {\n      // we want to mix in limited-alphabet symbols so\n      // we get more sharing of the nodes given how few\n      // terms we are testing...\n      term = simpleRandomString(random);\n    }\n    return term;\n  }\n\n","sourceOld":"  static String getRandomString() {\n    final String term;\n    if (random.nextBoolean()) {\n      term = _TestUtil.randomRealisticUnicodeString(random);\n    } else {\n      // we want to mix in limited-alphabet symbols so\n      // we get more sharing of the nodes given how few\n      // terms we are testing...\n      term = simpleRandomString(random);\n    }\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#getRandomString(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#getRandomString(Random).mjava","sourceNew":"  static String getRandomString(Random random) {\n    final String term;\n    if (random.nextBoolean()) {\n      term = _TestUtil.randomRealisticUnicodeString(random);\n    } else {\n      // we want to mix in limited-alphabet symbols so\n      // we get more sharing of the nodes given how few\n      // terms we are testing...\n      term = simpleRandomString(random);\n    }\n    return term;\n  }\n\n","sourceOld":"  static String getRandomString(Random random) {\n    final String term;\n    if (random.nextBoolean()) {\n      term = _TestUtil.randomRealisticUnicodeString(random);\n    } else {\n      // we want to mix in limited-alphabet symbols so\n      // we get more sharing of the nodes given how few\n      // terms we are testing...\n      term = simpleRandomString(random);\n    }\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}