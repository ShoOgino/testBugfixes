{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(int).mjava","commits":[{"id":"0957acf04dd58e07d48286537fe0e924f34e070a","date":1359597575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a value from this buffer. \n   *  <p>\n   *  <b>NOTE</b>: This class is not really designed for random access!\n   *  You will likely get better performance by using packed ints in another way! */\n  public long get(int index) {\n    assert index < size(); // TODO: do a better check, and throw IndexOutOfBoundsException?\n                           // This class is currently only used by the indexer.\n    int block = index >> BLOCK_BITS;\n    int element = index & BLOCK_MASK;\n    if (block == valuesOff) {\n      return pending[element];\n    } else if (values[block] == null) {\n      return minValues[block];\n    } else {\n      return minValues[block] + values[block].get(element);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a value from this buffer. \n   *  <p>\n   *  <b>NOTE</b>: This class is not really designed for random access!\n   *  You will likely get better performance by using packed ints in another way! */\n  public long get(int index) {\n    assert index < size(); // TODO: do a better check, and throw IndexOutOfBoundsException?\n                           // This class is currently only used by the indexer.\n    int block = index >> BLOCK_BITS;\n    int element = index & BLOCK_MASK;\n    if (block == valuesOff) {\n      return pending[element];\n    } else if (values[block] == null) {\n      return minValues[block];\n    } else {\n      return minValues[block] + values[block].get(element);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(int).mjava","sourceNew":"  /** Get a value from this buffer. \n   *  <p>\n   *  <b>NOTE</b>: This class is not really designed for random access!\n   *  You will likely get better performance by using packed ints in another way! */\n  public long get(long index) {\n    assert index < size() : \"index=\" + index + \",size=\" + size(); // TODO: do a better check, and throw IndexOutOfBoundsException?\n                           // This class is currently only used by the indexer.\n    int block = (int) (index >> BLOCK_BITS);\n    int element = (int) (index & BLOCK_MASK);\n    if (block == valuesOff) {\n      return pending[element];\n    } else if (values[block] == null) {\n      return minValues[block];\n    } else {\n      return minValues[block] + values[block].get(element);\n    }\n  }\n\n","sourceOld":"  /** Get a value from this buffer. \n   *  <p>\n   *  <b>NOTE</b>: This class is not really designed for random access!\n   *  You will likely get better performance by using packed ints in another way! */\n  public long get(int index) {\n    assert index < size(); // TODO: do a better check, and throw IndexOutOfBoundsException?\n                           // This class is currently only used by the indexer.\n    int block = index >> BLOCK_BITS;\n    int element = index & BLOCK_MASK;\n    if (block == valuesOff) {\n      return pending[element];\n    } else if (values[block] == null) {\n      return minValues[block];\n    } else {\n      return minValues[block] + values[block].get(element);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#get(int).mjava","sourceNew":null,"sourceOld":"  /** Get a value from this buffer. \n   *  <p>\n   *  <b>NOTE</b>: This class is not really designed for random access!\n   *  You will likely get better performance by using packed ints in another way! */\n  public long get(int index) {\n    assert index < size(); // TODO: do a better check, and throw IndexOutOfBoundsException?\n                           // This class is currently only used by the indexer.\n    int block = index >> BLOCK_BITS;\n    int element = index & BLOCK_MASK;\n    if (block == valuesOff) {\n      return pending[element];\n    } else if (values[block] == null) {\n      return minValues[block];\n    } else {\n      return minValues[block] + values[block].get(element);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0957acf04dd58e07d48286537fe0e924f34e070a"],"0957acf04dd58e07d48286537fe0e924f34e070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0957acf04dd58e07d48286537fe0e924f34e070a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0957acf04dd58e07d48286537fe0e924f34e070a"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}