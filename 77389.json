{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}