{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            return sparseValues.advanceExact(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          startOffset = ordIndex.get(docID);\n          endOffset = ordIndex.get(docID+1L);\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          int ord = (int) ordinals.get(docID);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord+1];\n          return endOffset > startOffset;\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"cc018b79379c67835b40b1259cd3dc931df60944":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","cc018b79379c67835b40b1259cd3dc931df60944"],"85b9829d27224bda451a373a47f081afb1c664b8":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}