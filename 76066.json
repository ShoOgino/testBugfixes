{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#createMiniSolrCloudCluster().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPhrasesIdentificationComponent#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-phrases-identification.xml\");\n    collectionProperties.put(\"schema\", \"schema-phrases-identification.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    // index some docs...\n    CLOUD_CLIENT.add\n      (sdoc(\"id\", \"42\",\n            \"title\",\"Tale of the Brown Fox: was he lazy?\",\n            \"body\", \"No. The quick brown fox was a very brown fox who liked to get into trouble.\"));\n    CLOUD_CLIENT.add\n      (sdoc(\"id\", \"43\",\n            \"title\",\"A fable in two acts\",\n            \"body\", \"The brOwn fOx jumped. The lazy dog did not\"));\n    CLOUD_CLIENT.add\n      (sdoc(\"id\", \"44\",\n            \"title\",\"Why the LazY dog was lazy\",\n            \"body\", \"News flash: Lazy Dog was not actually lazy, it just seemd so compared to Fox\"));\n    CLOUD_CLIENT.add\n      (sdoc(\"id\", \"45\",\n            \"title\",\"Why Are We Lazy?\",\n            \"body\", \"Because we are. that's why\"));\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}