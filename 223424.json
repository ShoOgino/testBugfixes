{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}