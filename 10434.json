{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","sourceNew":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    int count = 0;\n    while (o2 < limit && b[o1++] == b[o2++]) {\n      ++count;\n    }\n    return count;\n  }\n\n","sourceOld":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    int count = 0;\n    while (o2 < limit && b[o1++] == b[o2++]) {\n      ++count;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","sourceNew":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    int count = 0;\n    while (o2 < limit && b[o1++] == b[o2++]) {\n      ++count;\n    }\n    return count;\n  }\n\n","sourceOld":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    int count = 0;\n    while (o2 < limit && b[o1++] == b[o2++]) {\n      ++count;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","sourceNew":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    // never -1 because lengths always differ\n    return FutureArrays.mismatch(b, o1, limit, b, o2, limit);\n  }\n\n","sourceOld":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    int count = 0;\n    while (o2 < limit && b[o1++] == b[o2++]) {\n      ++count;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","sourceNew":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    // never -1 because lengths always differ\n    return Arrays.mismatch(b, o1, limit, b, o2, limit);\n  }\n\n","sourceOld":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    // never -1 because lengths always differ\n    return FutureArrays.mismatch(b, o1, limit, b, o2, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4#commonBytes(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#commonBytes(byte[],int,int,int).mjava","sourceNew":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    // never -1 because lengths always differ\n    return Arrays.mismatch(b, o1, limit, b, o2, limit);\n  }\n\n","sourceOld":"  private static int commonBytes(byte[] b, int o1, int o2, int limit) {\n    assert o1 < o2;\n    // never -1 because lengths always differ\n    return Arrays.mismatch(b, o1, limit, b, o2, limit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"9407318969e8504257b4c5764c65755a043e5404":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["9407318969e8504257b4c5764c65755a043e5404"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["456d7e7092cb043c740b4674301660ee8abc26fe","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}