{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      if (liveDocs != null) {\n        liveDocs = inLiveDocs;\n      }\n      \n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(liveDocs, reuse, flags), withFreqs, old2new);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      if (liveDocs != null) {\n        liveDocs = inLiveDocs;\n      }\n      \n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(liveDocs, reuse, flags), withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      if (liveDocs != null) {\n        liveDocs = inLiveDocs;\n      }\n      \n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(liveDocs, reuse, flags), withFreqs, old2new);\n    }\n\n","bugFix":null,"bugIntro":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b064dbb1533155122c805e1d26c3fc1df1a599e0","date":1363340948,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(newToOld(liveDocs), reuse, flags), withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      if (liveDocs != null) {\n        liveDocs = inLiveDocs;\n      }\n      \n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(liveDocs, reuse, flags), withFreqs, docMap);\n    }\n\n","bugFix":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","cb767289784b682dea51f9e6d7222add811edb77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a260e1fefced66a58d52044266f9fa20d81ae74b","date":1363613778,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      final DocsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final DocsEnum inDocs = in.docs(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      // if we're asked to reuse the given DocsEnum and it is Sorting, return\n      // the wrapped one, since some Codecs expect it.\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        reuse = ((SortingDocsEnum) reuse).getWrapped();\n      }\n      boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(in.docs(newToOld(liveDocs), reuse, flags), withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      final DocsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final DocsEnum inDocs = in.docs(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      final DocsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final DocsEnum inDocs = in.docs(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      final DocsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final DocsEnum inDocs = in.docs(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, final int flags) throws IOException {\n      final DocsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final DocsEnum inDocs = in.docs(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & DocsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cb767289784b682dea51f9e6d7222add811edb77"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cb767289784b682dea51f9e6d7222add811edb77":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}