{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","commits":[{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      return PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingJson,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingJson,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_JSON: \" + Utils.toJSONString(Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true)));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      return PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingJson,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingJson,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_JSON: \" + Utils.toJSONString(Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ClusterDataProvider,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cdp.getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cdp,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ClusterDataProvider,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cdp.getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cdp,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1735d662b62f98976dc6cccfe9d327c5e7b22dff","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}