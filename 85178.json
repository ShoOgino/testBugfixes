{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new Payload((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new Payload((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new Payload((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new Payload((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new BytesRef((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new Payload((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new Payload((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9308f62fa74f41b5550acff64ae6a38aba6d97e","date":1341665282,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new BytesRef((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new BytesRef((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new BytesRef((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef((token + \":Entity:\"+ pos ).getBytes()));\n          } else {\n            payloadAtt.setPayload(new BytesRef((token + \":Noise:\" + pos ).getBytes()));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans.PayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.PayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        String token = termAtt.toString();\n\n        if (!nopayload.contains(token)) {\n          if (entities.contains(token)) {\n            payloadAtt.setPayload(new BytesRef(token + \":Entity:\"+ pos ));\n          } else {\n            payloadAtt.setPayload(new BytesRef(token + \":Noise:\" + pos ));\n          }\n        }\n        pos += posIncrAtt.getPositionIncrement();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76fa9933adb0556e752e8af9734c4d0ae14622ff","b9308f62fa74f41b5550acff64ae6a38aba6d97e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"46d8ada1fff8d18cb197c38c7983225162599948":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b9308f62fa74f41b5550acff64ae6a38aba6d97e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}