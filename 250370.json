{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseAbort().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void xxxtestCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void xxxtestCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}