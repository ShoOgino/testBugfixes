{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testAttributeClone().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testAttributeClone().mjava","sourceNew":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","sourceOld":"  public void testAttributeClone() throws Exception {\n    LegacyNumericTermAttributeImpl att = new LegacyNumericTermAttributeImpl();\n    att.init(lvalue, 64, 8, 0); // set some value, to make getBytesRef() work\n    LegacyNumericTermAttributeImpl copy = assertCloneIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    LegacyNumericTermAttributeImpl copy2 = assertCopyIsEqual(att);\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n    \n    // LUCENE-7027 test\n    att.init(lvalue, 64, 8, 64); // Exhausted TokenStream -> should return empty BytesRef\n    assertEquals(new BytesRef(), att.getBytesRef());\n    copy = assertCloneIsEqual(att);\n    assertEquals(new BytesRef(), copy.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy.getBytesRef());\n    copy2 = assertCopyIsEqual(att);\n    assertEquals(new BytesRef(), copy2.getBytesRef());\n    assertNotSame(att.getBytesRef(), copy2.getBytesRef());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}