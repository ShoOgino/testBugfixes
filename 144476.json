{"path":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","commits":[{"id":"e0eacdfc94f700086189bb44f7f73ed9cfd85c75","date":1095252623,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value.\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Field field = (Field)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value.\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value.\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Field field = (Field)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"661128e262718a7dc418602b138db3abe96c9efc","date":1151001452,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value.\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70c362dc47e16ef90835bd9d78415bdceefbd7e","date":1254561360,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (int i=0; i < fields.size(); i++) {\n      Fieldable field = (Fieldable)fields.get(i);\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.getBinaryValue();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.binaryValue();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":null,"sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final byte[] getBinaryValue(String name) {\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        return field.getBinaryValue();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"661128e262718a7dc418602b138db3abe96c9efc":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["661128e262718a7dc418602b138db3abe96c9efc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f44f07aa147c21735d6c43bafa4fde560d0362e1"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"661128e262718a7dc418602b138db3abe96c9efc":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["661128e262718a7dc418602b138db3abe96c9efc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}