{"path":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":null,"sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1da2c39cf47fc10dc839d8c37890a2b009081e76","date":1299662336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.STRING, \n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["090a0320e4de4a3674376aef96b9701f47564f86","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["1da2c39cf47fc10dc839d8c37890a2b009081e76","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da2c39cf47fc10dc839d8c37890a2b009081e76","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"1da2c39cf47fc10dc839d8c37890a2b009081e76":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"1da2c39cf47fc10dc839d8c37890a2b009081e76":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}