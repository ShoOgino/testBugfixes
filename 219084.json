{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc83d085f83b38c31736c494913c0c75265ce02","date":1341762281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(' ').append(NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec)).append('s');\n    } else if (repetitions>1) {\n      sb.append(\" * \").append(repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \").append(rate).append('/').append(perMin ? \"min\" : \"sec\");\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ffe681f212e5073c69955b4ad22946794c84940":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5dc83d085f83b38c31736c494913c0c75265ce02":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5dc83d085f83b38c31736c494913c0c75265ce02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5dc83d085f83b38c31736c494913c0c75265ce02","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5dc83d085f83b38c31736c494913c0c75265ce02":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2ffe681f212e5073c69955b4ad22946794c84940","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}