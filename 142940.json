{"path":"src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","commits":[{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"/dev/null","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"718ab708b1705aae7831111fcddfc834665eee61":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["718ab708b1705aae7831111fcddfc834665eee61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"718ab708b1705aae7831111fcddfc834665eee61":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["718ab708b1705aae7831111fcddfc834665eee61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}