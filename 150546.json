{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(TopGroupsCollector,int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(TopGroupsCollector,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(SecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(TopGroupsCollector c, int withinGroupOffset) {\n    if (c.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      TopGroupsCollector<BytesRef> collector = (TopGroupsCollector<BytesRef>) c;\n      return collector.getTopGroups(withinGroupOffset);\n    } else if (c.getGroupSelector().getClass().isAssignableFrom(ValueSourceGroupSelector.class)) {\n      TopGroupsCollector<MutableValue> collector = (TopGroupsCollector<MutableValue>) c;\n      TopGroups<MutableValue> mvalTopGroups = collector.getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(SecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(TopGroupsCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(TopGroupsCollector c, int withinGroupOffset) {\n    if (c.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      TopGroupsCollector<BytesRef> collector = (TopGroupsCollector<BytesRef>) c;\n      return collector.getTopGroups(withinGroupOffset);\n    } else if (c.getGroupSelector().getClass().isAssignableFrom(ValueSourceGroupSelector.class)) {\n      TopGroupsCollector<MutableValue> collector = (TopGroupsCollector<MutableValue>) c;\n      TopGroups<MutableValue> mvalTopGroups = collector.getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value.get() : null;\n        groups.add(new GroupDocs<>(Float.NaN, mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      // NOTE: currenlty using diamond operator on MergedIterator (without explicit Term class) causes\n      // errors on Eclipse Compiler (ecj) used for javadoc lint\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]), Float.NaN);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}