{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":["83bbb041887bbef07b8a98d08a0e1713ce137039","b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory(random);\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":null,"sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a05409176bd65129d67a785ee70e881e238a9aef":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"85a883878c0af761245ab048babc63d099f835f3":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a05409176bd65129d67a785ee70e881e238a9aef"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}