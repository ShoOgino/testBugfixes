{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#compose(int,Character.UnicodeBlock,ScriptData,char[],int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#compose(int,Character.UnicodeBlock,ScriptData,char[],int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#compose(int,Character.UnicodeBlock,ScriptData,char[],int,int).mjava","sourceNew":"  /**\n   * Compose into standard form any compositions in the decompositions table.\n   */\n  private int compose(int ch0, Character.UnicodeBlock block0, ScriptData sd, \n      char text[], int pos, int len) {\n    if (pos + 1 >= len) /* need at least 2 chars! */\n      return len;\n    \n    final int ch1 = text[pos + 1] - sd.base;\n    final Character.UnicodeBlock block1 = Character.UnicodeBlock.of(text[pos + 1]);\n    if (block1 != block0) /* needs to be the same writing system */\n      return len;\n    \n    int ch2 = -1;\n\n    if (pos + 2 < len) {\n      ch2 = text[pos + 2] - sd.base;\n      Character.UnicodeBlock block2 = Character.UnicodeBlock.of(text[pos + 2]);\n      if (text[pos + 2] == '\\u200D') // ZWJ\n        ch2 = 0xFF;\n      else if (block2 != block1)  // still allow a 2-char match\n        ch2 = -1;\n    }\n\n    for (int i = 0; i < decompositions.length; i++)\n      if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {\n        if (decompositions[i][1] == ch1 && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {\n          text[pos] = (char) (sd.base + decompositions[i][3]);\n          len = delete(text, pos + 1, len);\n          if (decompositions[i][2] >= 0)\n            len = delete(text, pos + 1, len);\n          return len;\n        }\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compose into standard form any compositions in the decompositions table.\n   */\n  private int compose(int ch0, Character.UnicodeBlock block0, ScriptData sd, \n      char text[], int pos, int len) {\n    if (pos + 1 >= len) /* need at least 2 chars! */\n      return len;\n    \n    final int ch1 = text[pos + 1] - sd.base;\n    final Character.UnicodeBlock block1 = Character.UnicodeBlock.of(text[pos + 1]);\n    if (block1 != block0) /* needs to be the same writing system */\n      return len;\n    \n    int ch2 = -1;\n\n    if (pos + 2 < len) {\n      ch2 = text[pos + 2] - sd.base;\n      Character.UnicodeBlock block2 = Character.UnicodeBlock.of(text[pos + 2]);\n      if (text[pos + 2] == '\\u200D') // ZWJ\n        ch2 = 0xFF;\n      else if (block2 != block1)  // still allow a 2-char match\n        ch2 = -1;\n    }\n\n    for (int i = 0; i < decompositions.length; i++)\n      if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {\n        if (decompositions[i][1] == ch1 && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {\n          text[pos] = (char) (sd.base + decompositions[i][3]);\n          len = delete(text, pos + 1, len);\n          if (decompositions[i][2] >= 0)\n            len = delete(text, pos + 1, len);\n          return len;\n        }\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#compose(int,Character.UnicodeBlock,ScriptData,char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#compose(int,Character.UnicodeBlock,ScriptData,char[],int,int).mjava","sourceNew":"  /**\n   * Compose into standard form any compositions in the decompositions table.\n   */\n  private int compose(int ch0, Character.UnicodeBlock block0, ScriptData sd, \n      char text[], int pos, int len) {\n    if (pos + 1 >= len) /* need at least 2 chars! */\n      return len;\n    \n    final int ch1 = text[pos + 1] - sd.base;\n    final Character.UnicodeBlock block1 = Character.UnicodeBlock.of(text[pos + 1]);\n    if (block1 != block0) /* needs to be the same writing system */\n      return len;\n    \n    int ch2 = -1;\n\n    if (pos + 2 < len) {\n      ch2 = text[pos + 2] - sd.base;\n      Character.UnicodeBlock block2 = Character.UnicodeBlock.of(text[pos + 2]);\n      if (text[pos + 2] == '\\u200D') // ZWJ\n        ch2 = 0xFF;\n      else if (block2 != block1)  // still allow a 2-char match\n        ch2 = -1;\n    }\n\n    for (int i = 0; i < decompositions.length; i++)\n      if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {\n        if (decompositions[i][1] == ch1 && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {\n          text[pos] = (char) (sd.base + decompositions[i][3]);\n          len = delete(text, pos + 1, len);\n          if (decompositions[i][2] >= 0)\n            len = delete(text, pos + 1, len);\n          return len;\n        }\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compose into standard form any compositions in the decompositions table.\n   */\n  private int compose(int ch0, Character.UnicodeBlock block0, ScriptData sd, \n      char text[], int pos, int len) {\n    if (pos + 1 >= len) /* need at least 2 chars! */\n      return len;\n    \n    final int ch1 = text[pos + 1] - sd.base;\n    final Character.UnicodeBlock block1 = Character.UnicodeBlock.of(text[pos + 1]);\n    if (block1 != block0) /* needs to be the same writing system */\n      return len;\n    \n    int ch2 = -1;\n\n    if (pos + 2 < len) {\n      ch2 = text[pos + 2] - sd.base;\n      Character.UnicodeBlock block2 = Character.UnicodeBlock.of(text[pos + 2]);\n      if (text[pos + 2] == '\\u200D') // ZWJ\n        ch2 = 0xFF;\n      else if (block2 != block1)  // still allow a 2-char match\n        ch2 = -1;\n    }\n\n    for (int i = 0; i < decompositions.length; i++)\n      if (decompositions[i][0] == ch0 && (decompositions[i][4] & sd.flag) != 0) {\n        if (decompositions[i][1] == ch1 && (decompositions[i][2] < 0 || decompositions[i][2] == ch2)) {\n          text[pos] = (char) (sd.base + decompositions[i][3]);\n          len = delete(text, pos + 1, len);\n          if (decompositions[i][2] >= 0)\n            len = delete(text, pos + 1, len);\n          return len;\n        }\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}