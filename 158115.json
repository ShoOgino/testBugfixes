{"path":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List).mjava","commits":[{"id":"b8b3b526542a07c380e03ce642edd7ca82ac961f","date":1226443334,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List).mjava","pathOld":"/dev/null","sourceNew":"    public void onInit(List commits) throws IOException {\n      for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n        IndexCommit commit = (IndexCommit) iterator.next();\n        String userData=commit.getUserData();\n        if (userData != null) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String lastVal = userData.substring(userData.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List).mjava","sourceNew":"    public void onInit(List commits) throws IOException {\n      for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n        IndexCommit commit = (IndexCommit) iterator.next();\n        Map userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = (String) userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","sourceOld":"    public void onInit(List commits) throws IOException {\n      for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n        IndexCommit commit = (IndexCommit) iterator.next();\n        String userData=commit.getUserData();\n        if (userData != null) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String lastVal = userData.substring(userData.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List).mjava","sourceNew":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","sourceOld":"    public void onInit(List commits) throws IOException {\n      for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n        IndexCommit commit = (IndexCommit) iterator.next();\n        Map userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = (String) userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["b8b3b526542a07c380e03ce642edd7ca82ac961f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"b8b3b526542a07c380e03ce642edd7ca82ac961f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8b3b526542a07c380e03ce642edd7ca82ac961f"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8b3b526542a07c380e03ce642edd7ca82ac961f":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}