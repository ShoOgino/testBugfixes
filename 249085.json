{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d80deb55af16974d9c57440bb1cd937b3366138","date":1398794840,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && DefaultIndexingChain.class.getName().equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && DefaultIndexingChain.class.getName().equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && \"org.apache.lucene.index.DocFieldProcessor\".equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(DefaultIndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && DefaultIndexingChain.class.getName().equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(DefaultIndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName()) && DefaultIndexingChain.class.getName().equals(trace[i].getClassName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(IndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(DefaultIndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyInWriteSegment#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(IndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        if (callStackContains(DefaultIndexingChain.class, \"flush\")) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": NOW FAIL: onlyOnce=\" + onlyOnce);\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["2916966cc9815e973c01452a0d76c98c5e0d0926","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["2916966cc9815e973c01452a0d76c98c5e0d0926"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["9eae2a56dc810a17cf807d831f720dec931a03de","6d80deb55af16974d9c57440bb1cd937b3366138"],"9eae2a56dc810a17cf807d831f720dec931a03de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["6d80deb55af16974d9c57440bb1cd937b3366138"],"6d80deb55af16974d9c57440bb1cd937b3366138":["9eae2a56dc810a17cf807d831f720dec931a03de"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["6d80deb55af16974d9c57440bb1cd937b3366138","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"9eae2a56dc810a17cf807d831f720dec931a03de":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","6d80deb55af16974d9c57440bb1cd937b3366138"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eae2a56dc810a17cf807d831f720dec931a03de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"6d80deb55af16974d9c57440bb1cd937b3366138":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}