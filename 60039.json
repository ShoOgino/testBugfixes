{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.shutdown();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.shutdown();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    try {\n      assertEquals(1, facets.getSpecificValue(\"dim\"));\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":["51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8b2bc4b8b503cc0b5743b19445798c62069e4d","date":1477390943,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    Facets facets = getAllFacets(FacetsConfig.DEFAULT_INDEX_FIELD_NAME, searcher, taxoReader, config);\n    \n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    Facets facets = getAllFacets(FacetsConfig.DEFAULT_INDEX_FIELD_NAME, searcher, taxoReader, config);\n    \n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRequireDimCount().mjava","sourceNew":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    Facets facets = getAllFacets(FacetsConfig.DEFAULT_INDEX_FIELD_NAME, searcher, taxoReader, config);\n    \n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testRequireDimCount() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setRequireDimCount(\"dim\", true);\n\n    config.setMultiValued(\"dim2\", true);\n    config.setRequireDimCount(\"dim2\", true);\n\n    config.setMultiValued(\"dim3\", true);\n    config.setHierarchical(\"dim3\", true);\n    config.setRequireDimCount(\"dim3\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"a\"));\n    doc.add(new FacetField(\"dim2\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"b\"));\n    doc.add(new FacetField(\"dim3\", \"a\", \"c\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getTopChildren(10, \"dim\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim2\").value);\n    assertEquals(1, facets.getTopChildren(10, \"dim3\").value);\n    expectThrows(IllegalArgumentException.class, () -> {\n      facets.getSpecificValue(\"dim\");\n    });\n    assertEquals(1, facets.getSpecificValue(\"dim2\"));\n    assertEquals(1, facets.getSpecificValue(\"dim3\"));\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["05fe562aa248790944d43cdd478f512572835ba0","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["05fe562aa248790944d43cdd478f512572835ba0","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"05fe562aa248790944d43cdd478f512572835ba0":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}