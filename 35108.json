{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/StrDocValuesFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"6cce7e17930f156b7456ee7fc32f691979f641e2","date":1349444322,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/StrDocValuesFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues.Source source = getSource(readerContext.reader(), DocValues.Type.BYTES_VAR_SORTED);\n    final Bits liveDocs = readerContext.reader().getLiveDocs();\n    switch (source.getType()) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n        return new DVStrValues(this, source, liveDocs);\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        final DocValues.SortedSource sortedSource = source.asSortedSource();\n        if (sortedSource.hasPackedDocToOrd()) {\n          final PackedInts.Reader docToOrd = sortedSource.getDocToOrd();\n          return new DVStrValues(this, source, liveDocs) {\n\n            @Override\n            public int ordVal(int doc) {\n              return (int) docToOrd.get(doc);\n            }\n\n            @Override\n            public int numOrd() {\n              return sortedSource.getValueCount();\n            }\n\n          };\n        }\n        return new DVStrValues(this, source, liveDocs) {\n\n          @Override\n          public int ordVal(int doc) {\n            return sortedSource.ord(doc);\n          }\n\n          @Override\n          public int numOrd() {\n            return sortedSource.getValueCount();\n          }\n\n        };\n      default:\n        throw new IllegalStateException(getClass().getSimpleName() + \" only works with binary types, not \" + source.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/StrDocValuesFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues.Source source = getSource(readerContext.reader(), DocValues.Type.BYTES_VAR_SORTED);\n    final Bits liveDocs = readerContext.reader().getLiveDocs();\n    switch (source.getType()) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n        return new DVStrValues(this, source, liveDocs);\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        final DocValues.SortedSource sortedSource = source.asSortedSource();\n        if (sortedSource.hasPackedDocToOrd()) {\n          final PackedInts.Reader docToOrd = sortedSource.getDocToOrd();\n          return new DVStrValues(this, source, liveDocs) {\n\n            @Override\n            public int ordVal(int doc) {\n              return (int) docToOrd.get(doc);\n            }\n\n            @Override\n            public int numOrd() {\n              return sortedSource.getValueCount();\n            }\n\n          };\n        }\n        return new DVStrValues(this, source, liveDocs) {\n\n          @Override\n          public int ordVal(int doc) {\n            return sortedSource.ord(doc);\n          }\n\n          @Override\n          public int numOrd() {\n            return sortedSource.getValueCount();\n          }\n\n        };\n      default:\n        throw new IllegalStateException(getClass().getSimpleName() + \" only works with binary types, not \" + source.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/StrDocValuesFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues.Source source = getSource(readerContext.reader(), DocValues.Type.BYTES_VAR_SORTED);\n    final Bits liveDocs = readerContext.reader().getLiveDocs();\n    switch (source.getType()) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n        return new DVStrValues(this, source, liveDocs);\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        final DocValues.SortedSource sortedSource = source.asSortedSource();\n        if (sortedSource.hasPackedDocToOrd()) {\n          final PackedInts.Reader docToOrd = sortedSource.getDocToOrd();\n          return new DVStrValues(this, source, liveDocs) {\n\n            @Override\n            public int ordVal(int doc) {\n              return (int) docToOrd.get(doc);\n            }\n\n            @Override\n            public int numOrd() {\n              return sortedSource.getValueCount();\n            }\n\n          };\n        }\n        return new DVStrValues(this, source, liveDocs) {\n\n          @Override\n          public int ordVal(int doc) {\n            return sortedSource.ord(doc);\n          }\n\n          @Override\n          public int numOrd() {\n            return sortedSource.getValueCount();\n          }\n\n        };\n      default:\n        throw new IllegalStateException(getClass().getSimpleName() + \" only works with binary types, not \" + source.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6cce7e17930f156b7456ee7fc32f691979f641e2","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}