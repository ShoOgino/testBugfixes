{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","commits":[{"id":"04aef18a25f8e0d1832199f0cc7607773de5a229","date":1473142144,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","pathOld":"/dev/null","sourceNew":"  private void compareObjects(List unmarshaledObj, List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","pathOld":"/dev/null","sourceNew":"  private void compareObjects(List unmarshaledObj, List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","pathOld":"/dev/null","sourceNew":"  private void compareObjects(List unmarshaledObj, List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","pathOld":"/dev/null","sourceNew":"  private void compareObjects(List unmarshaledObj, List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#compareObjects(List,List).mjava","sourceNew":"  private void compareObjects(@SuppressWarnings({\"rawtypes\"})List unmarshaledObj,\n                              @SuppressWarnings({\"rawtypes\"})List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","sourceOld":"  private void compareObjects(List unmarshaledObj, List matchObj) {\n    assertEquals(unmarshaledObj.size(), matchObj.size());\n    for (int i = 0; i < unmarshaledObj.size(); i++) {\n\n      if (unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n        byte[] b1 = (byte[]) unmarshaledObj.get(i);\n        byte[] b2 = (byte[]) matchObj.get(i);\n        assertTrue(Arrays.equals(b1, b2));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument) {\n        assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList) {\n        assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n        assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n      } else if (unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n        assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n      } else {\n        assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aef18a25f8e0d1832199f0cc7607773de5a229"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9ba1b632c041956c93c41aa1143d16a567014891","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04aef18a25f8e0d1832199f0cc7607773de5a229","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}