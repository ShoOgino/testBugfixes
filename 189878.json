{"path":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.shutdown();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.shutdown();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.shutdown();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.shutdown();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7982784a23275051fb55a8c0415448ccd0b20c7","date":1454870124,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMergeScheduler(new MyMergeScheduler())\n      .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setMergePolicy(newLogMergePolicy());\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, IOUtils.UTF_8)));\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n\n    try {\n      assertTrue(mergeThreadCreated);\n      assertTrue(mergeCalled);\n      assertTrue(excCalled);\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST FAILED; IW infoStream output:\");\n      System.out.println(baos.toString(IOUtils.UTF_8));\n      throw ae;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMergeScheduler(new MyMergeScheduler())\n      .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setMergePolicy(newLogMergePolicy());\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, IOUtils.UTF_8)));\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n\n    try {\n      assertTrue(mergeThreadCreated);\n      assertTrue(mergeCalled);\n      assertTrue(excCalled);\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST FAILED; IW infoStream output:\");\n      System.out.println(baos.toString(IOUtils.UTF_8));\n      throw ae;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergeScheduler(new MyMergeScheduler())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0382f86ec362a4c7cf9f0040b757088888ce5d1f","date":1455805674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMergeScheduler(new MyMergeScheduler())\n      .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setMergePolicy(newLogMergePolicy());\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    infoStream = new PrintStreamInfoStream(new PrintStream(baos, true, IOUtils.UTF_8));\n    iwc.setInfoStream(infoStream);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n\n    try {\n      assertTrue(mergeThreadCreated);\n      assertTrue(mergeCalled);\n      assertTrue(excCalled);\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST FAILED; IW infoStream output:\");\n      System.out.println(baos.toString(IOUtils.UTF_8));\n      throw ae;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMergeScheduler(new MyMergeScheduler())\n      .setMaxBufferedDocs(2).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setMergePolicy(newLogMergePolicy());\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, IOUtils.UTF_8)));\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    LogMergePolicy logMP = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    logMP.setMergeFactor(10);\n    for(int i=0;i<20;i++) {\n      writer.addDocument(doc);\n    }\n\n    try {\n      ((MyMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    } catch (IllegalStateException ise) {\n      // OK\n    }\n    writer.rollback();\n\n    try {\n      assertTrue(mergeThreadCreated);\n      assertTrue(mergeCalled);\n      assertTrue(excCalled);\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST FAILED; IW infoStream output:\");\n      System.out.println(baos.toString(IOUtils.UTF_8));\n      throw ae;\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16","f7982784a23275051fb55a8c0415448ccd0b20c7"],"0382f86ec362a4c7cf9f0040b757088888ce5d1f":["f7982784a23275051fb55a8c0415448ccd0b20c7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f7982784a23275051fb55a8c0415448ccd0b20c7":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0382f86ec362a4c7cf9f0040b757088888ce5d1f"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["dd75f58072bba84066e89d61bd7028de1bd5b632","f7982784a23275051fb55a8c0415448ccd0b20c7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0382f86ec362a4c7cf9f0040b757088888ce5d1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7982784a23275051fb55a8c0415448ccd0b20c7":["dd75f58072bba84066e89d61bd7028de1bd5b632","0382f86ec362a4c7cf9f0040b757088888ce5d1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","dd75f58072bba84066e89d61bd7028de1bd5b632","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}