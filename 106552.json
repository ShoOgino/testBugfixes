{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#read(IndexInput,ValueReader).mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#read(IndexInput,ValueReader).mjava","pathOld":"/dev/null","sourceNew":"    private Source read(IndexInput in, ValueReader reader) throws IOException {\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.readLine(in, scratch);\n\n        assert StringHelper.startsWith(scratch, DOC) : scratch.utf8ToString();\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, VALUE);\n        reader.fromString(i, scratch, scratch.offset + VALUE.length);\n      }\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.equals(END);\n      return reader.getSource();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#read(IndexInput,ValueReader).mjava","pathOld":"/dev/null","sourceNew":"    private Source read(IndexInput in, ValueReader reader) throws IOException {\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.readLine(in, scratch);\n\n        assert StringHelper.startsWith(scratch, DOC) : scratch.utf8ToString();\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, VALUE);\n        reader.fromString(i, scratch, scratch.offset + VALUE.length);\n      }\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.equals(END);\n      return reader.getSource();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#read(IndexInput,ValueReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.SimpleTextDocValues#read(IndexInput,ValueReader).mjava","sourceNew":"    private Source read(IndexInput in, ValueReader reader) throws IOException {\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.readLine(in, scratch);\n\n        assert StringHelper.startsWith(scratch, DOC) : scratch.utf8ToString();\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, VALUE);\n        reader.fromString(i, scratch, scratch.offset + VALUE.length);\n      }\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.equals(END);\n      return reader.getSource();\n    }\n\n","sourceOld":"    private Source read(IndexInput in, ValueReader reader) throws IOException {\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.readLine(in, scratch);\n\n        assert StringHelper.startsWith(scratch, DOC) : scratch.utf8ToString();\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, VALUE);\n        reader.fromString(i, scratch, scratch.offset + VALUE.length);\n      }\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.equals(END);\n      return reader.getSource();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}