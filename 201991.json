{"path":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Set[String]],Map[String,Map[String,Object]],String,Phase).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Set[String]],Map[String,Map[String,Object]],String,Phase).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check if it is possible to assign this node as a replica of the given shard\n   * without violating this rule\n   *\n   * @param testNode       The node in question\n   * @param shardVsNodeSet\n   * @param nodeVsTags     The pre-fetched tags for all the nodes\n   * @param shardName      The shard to which this node should be attempted\n   * @return\n   */\n  MatchStatus tryAssignNodeToShard(String testNode,\n                                   Map<String, Set<String>> shardVsNodeSet,\n                                   Map<String, Map<String, Object>> nodeVsTags,\n                                   String shardName, Phase phase) {\n\n    if (tag.isWildCard()) {\n      //this is ensuring uniqueness across a certain tag\n      //eg: rack:r168\n      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;\n      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);\n      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,\n          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);\n      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)\n        v++;//v++ because including this node , it becomes v+1 during ASSIGN\n      return replica.canMatch(v, phase) ?\n          NODE_CAN_BE_ASSIGNED :\n          CANNOT_ASSIGN_FAIL;\n    } else {\n      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;\n      if (replica.isWildCard()) {\n        //this means for each replica, the value must match\n        //shard match is already tested\n        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;\n        else return CANNOT_ASSIGN_FAIL;\n      } else {\n        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);\n        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;\n\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"555dd0d9ae20c6d7fd5d9f2150173e8b1563b80f","date":1430761975,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Set[String]],Map[String,Map[String,Object]],String,Phase).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Set[String]],Map[String,Map[String,Object]],String,Phase).mjava","sourceNew":"  /**\n   * Check if it is possible to assign this node as a replica of the given shard\n   * without violating this rule\n   *\n   * @param testNode       The node in question\n   * @param shardVsNodeSet Set of nodes for every shard \n   * @param nodeVsTags     The pre-fetched tags for all the nodes\n   * @param shardName      The shard to which this node should be attempted\n   * @return MatchStatus\n   */\n  MatchStatus tryAssignNodeToShard(String testNode,\n                                   Map<String, Set<String>> shardVsNodeSet,\n                                   Map<String, Map<String, Object>> nodeVsTags,\n                                   String shardName, Phase phase) {\n\n    if (tag.isWildCard()) {\n      //this is ensuring uniqueness across a certain tag\n      //eg: rack:r168\n      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;\n      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);\n      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,\n          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);\n      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)\n        v++;//v++ because including this node , it becomes v+1 during ASSIGN\n      return replica.canMatch(v, phase) ?\n          NODE_CAN_BE_ASSIGNED :\n          CANNOT_ASSIGN_FAIL;\n    } else {\n      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;\n      if (replica.isWildCard()) {\n        //this means for each replica, the value must match\n        //shard match is already tested\n        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;\n        else return CANNOT_ASSIGN_FAIL;\n      } else {\n        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);\n        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;\n\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Check if it is possible to assign this node as a replica of the given shard\n   * without violating this rule\n   *\n   * @param testNode       The node in question\n   * @param shardVsNodeSet\n   * @param nodeVsTags     The pre-fetched tags for all the nodes\n   * @param shardName      The shard to which this node should be attempted\n   * @return\n   */\n  MatchStatus tryAssignNodeToShard(String testNode,\n                                   Map<String, Set<String>> shardVsNodeSet,\n                                   Map<String, Map<String, Object>> nodeVsTags,\n                                   String shardName, Phase phase) {\n\n    if (tag.isWildCard()) {\n      //this is ensuring uniqueness across a certain tag\n      //eg: rack:r168\n      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;\n      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);\n      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,\n          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);\n      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)\n        v++;//v++ because including this node , it becomes v+1 during ASSIGN\n      return replica.canMatch(v, phase) ?\n          NODE_CAN_BE_ASSIGNED :\n          CANNOT_ASSIGN_FAIL;\n    } else {\n      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;\n      if (replica.isWildCard()) {\n        //this means for each replica, the value must match\n        //shard match is already tested\n        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;\n        else return CANNOT_ASSIGN_FAIL;\n      } else {\n        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);\n        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Map[String,Integer]],Map[String,Map[String,Object]],String,Phase).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#tryAssignNodeToShard(String,Map[String,Set[String]],Map[String,Map[String,Object]],String,Phase).mjava","sourceNew":"  /**\n   * Check if it is possible to assign this node as a replica of the given shard\n   * without violating this rule\n   *\n   * @param testNode       The node in question\n   * @param shardVsNodeSet Set of nodes for every shard \n   * @param nodeVsTags     The pre-fetched tags for all the nodes\n   * @param shardName      The shard to which this node should be attempted\n   * @return MatchStatus\n   */\n  MatchStatus tryAssignNodeToShard(String testNode,\n                                   Map<String, Map<String,Integer>> shardVsNodeSet,\n                                   Map<String, Map<String, Object>> nodeVsTags,\n                                   String shardName, Phase phase) {\n\n    if (tag.isWildCard()) {\n      //this is ensuring uniqueness across a certain tag\n      //eg: rack:r168\n      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;\n      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);\n      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,\n          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);\n      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)\n        v++;//v++ because including this node , it becomes v+1 during ASSIGN\n      return replica.canMatch(v, phase) ?\n          NODE_CAN_BE_ASSIGNED :\n          CANNOT_ASSIGN_FAIL;\n    } else {\n      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;\n      if (replica.isWildCard()) {\n        //this means for each replica, the value must match\n        //shard match is already tested\n        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;\n        else return CANNOT_ASSIGN_FAIL;\n      } else {\n        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);\n        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;\n\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Check if it is possible to assign this node as a replica of the given shard\n   * without violating this rule\n   *\n   * @param testNode       The node in question\n   * @param shardVsNodeSet Set of nodes for every shard \n   * @param nodeVsTags     The pre-fetched tags for all the nodes\n   * @param shardName      The shard to which this node should be attempted\n   * @return MatchStatus\n   */\n  MatchStatus tryAssignNodeToShard(String testNode,\n                                   Map<String, Set<String>> shardVsNodeSet,\n                                   Map<String, Map<String, Object>> nodeVsTags,\n                                   String shardName, Phase phase) {\n\n    if (tag.isWildCard()) {\n      //this is ensuring uniqueness across a certain tag\n      //eg: rack:r168\n      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;\n      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);\n      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,\n          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);\n      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)\n        v++;//v++ because including this node , it becomes v+1 during ASSIGN\n      return replica.canMatch(v, phase) ?\n          NODE_CAN_BE_ASSIGNED :\n          CANNOT_ASSIGN_FAIL;\n    } else {\n      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;\n      if (replica.isWildCard()) {\n        //this means for each replica, the value must match\n        //shard match is already tested\n        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;\n        else return CANNOT_ASSIGN_FAIL;\n      } else {\n        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);\n        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4fc24ecd353171e03bd016c1681cd97476015f":["555dd0d9ae20c6d7fd5d9f2150173e8b1563b80f"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"555dd0d9ae20c6d7fd5d9f2150173e8b1563b80f":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec4fc24ecd353171e03bd016c1681cd97476015f"]},"commit2Childs":{"ec4fc24ecd353171e03bd016c1681cd97476015f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["555dd0d9ae20c6d7fd5d9f2150173e8b1563b80f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"555dd0d9ae20c6d7fd5d9f2150173e8b1563b80f":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}