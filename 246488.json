{"path":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    FieldType ft = schema.getFieldType(field);\n    return new ConstantScoreRangeQuery(\n      field,\n      \"*\".equals(part1) ? null : ft.toInternal(part1),\n      \"*\".equals(part2) ? null : ft.toInternal(part2),\n      inclusive, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9d0a51c3327de369ec765bf55295b7b33641a3","date":1207691330,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return new ConstantScoreRangeQuery(\n      field,\n      \"*\".equals(part1) ? null : ft.toInternal(part1),\n      \"*\".equals(part2) ? null : ft.toInternal(part2),\n      inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    FieldType ft = schema.getFieldType(field);\n    return new ConstantScoreRangeQuery(\n      field,\n      \"*\".equals(part1) ? null : ft.toInternal(part1),\n      \"*\".equals(part2) ? null : ft.toInternal(part2),\n      inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0","date":1236796963,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    if (ft instanceof TrieField) {\n      TrieField f = (TrieField) ft;\n      return new ConstantScoreQuery(f.getTrieRangeFilter(field, part1, part2, inclusive, inclusive));\n    } else {\n      RangeQuery rangeQuery = new RangeQuery(\n              field,\n              \"*\".equals(part1) ? null : ft.toInternal(part1),\n              \"*\".equals(part2) ? null : ft.toInternal(part2),\n              inclusive, inclusive);\n      rangeQuery.setConstantScoreRewrite(true);\n      return rangeQuery;\n    }\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return new ConstantScoreRangeQuery(\n      field,\n      \"*\".equals(part1) ? null : ft.toInternal(part1),\n      \"*\".equals(part2) ? null : ft.toInternal(part2),\n      inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df","date":1236801004,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    if (ft instanceof TrieField) {\n      TrieField f = (TrieField) ft;\n      return new ConstantScoreQuery(f.getTrieRangeFilter(field, part1, part2, inclusive, inclusive));\n    } else {\n      RangeQuery rangeQuery = new RangeQuery(\n              field,\n              \"*\".equals(part1) ? null : ft.toInternal(part1),\n              \"*\".equals(part2) ? null : ft.toInternal(part2),\n              inclusive, inclusive);\n      rangeQuery.setConstantScoreRewrite(true);\n      return rangeQuery;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6607c2e2193cd450f258dfc01588ecbb25a75ae","date":1236839053,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(field,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"187477cb6c13b4aad8f8b30e1a2a0c18907acce9","date":1236863546,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(parser, field,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(field,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    FieldType ft = schema.getFieldType(field);\n    return ft.getRangeQuery(parser, field,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf,\n            \"*\".equals(part1) ? null : part1,\n            \"*\".equals(part2) ? null : part2,\n            inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d9d0a51c3327de369ec765bf55295b7b33641a3":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["c6607c2e2193cd450f258dfc01588ecbb25a75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"c6607c2e2193cd450f258dfc01588ecbb25a75ae":["d0b3b236a1a9fb0ab54d5afc732ee5e580b607df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9d9d0a51c3327de369ec765bf55295b7b33641a3":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df":["c6607c2e2193cd450f258dfc01588ecbb25a75ae"],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["d0b3b236a1a9fb0ab54d5afc732ee5e580b607df"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6607c2e2193cd450f258dfc01588ecbb25a75ae":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}