{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#initPhrasePositions().mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#initPhrasePositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#initPhrasePositions().mjava","sourceNew":"  /**\n   * Initialize PhrasePositions in place.\n   * A one time initialization for this scorer (on first doc matching all terms):\n   * <ul>\n   *  <li>Check if there are repetitions\n   *  <li>If there are, find groups of repetitions.\n   * </ul>\n   * Examples:\n   * <ol>\n   *  <li>no repetitions: <b>\"ho my\"~2</b>\n   *  <li>repetitions: <b>\"ho my my\"~2</b>\n   *  <li>repetitions: <b>\"my ho my\"~2</b>\n   * </ol>\n   * @return false if PPs are exhausted (and so current doc will not be a match) \n   */\n  private boolean initPhrasePositions() throws IOException {\n    end = Integer.MIN_VALUE;\n    if (!checkedRpts) {\n      return initFirstTime();\n    }\n    if (!hasRpts) {\n      initSimple();\n      return true; // PPs available\n    }\n    return initComplex();\n  }\n\n","sourceOld":"  /**\n   * Initialize PhrasePositions in place.\n   * A one time initialization for this scorer (on first doc matching all terms):\n   * <ul>\n   *  <li>Check if there are repetitions\n   *  <li>If there are, find groups of repetitions.\n   * </ul>\n   * Examples:\n   * <ol>\n   *  <li>no repetitions: <b>\"ho my\"~2</b>\n   *  <li>repetitions: <b>\"ho my my\"~2</b>\n   *  <li>repetitions: <b>\"my ho my\"~2</b>\n   * </ol>\n   * @return false if PPs are exhausted (and so current doc will not be a match) \n   */\n  private boolean initPhrasePositions() throws IOException {\n    end = Integer.MIN_VALUE;\n    if (!checkedRpts) {\n      return initFirstTime();\n    }\n    if (!hasRpts) {\n      initSimple();\n      return true; // PPs available\n    }\n    return initComplex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}