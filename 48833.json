{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#FieldPhraseList(FieldPhraseList[]).mjava","commits":[{"id":"050e6201c3a7d4c351ebc06cbe4822e26e028117","date":1382375603,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#FieldPhraseList(FieldPhraseList[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merging constructor.\n   *\n   * @param toMerge FieldPhraseLists to merge to build this one\n   */\n  public FieldPhraseList( FieldPhraseList[] toMerge ) {\n    // Merge all overlapping WeightedPhraseInfos\n    // Step 1.  Sort by startOffset, endOffset, and boost, in that order.\n    @SuppressWarnings( { \"rawtypes\", \"unchecked\" } )\n    Iterator< WeightedPhraseInfo >[] allInfos = new Iterator[ toMerge.length ];\n    int index = 0;\n    for ( FieldPhraseList fplToMerge : toMerge ) {\n      allInfos[ index++ ] = fplToMerge.phraseList.iterator();\n    }\n    MergedIterator< WeightedPhraseInfo > itr = new MergedIterator< WeightedPhraseInfo >( false, allInfos );\n    // Step 2.  Walk the sorted list merging infos that overlap\n    phraseList = new LinkedList< WeightedPhraseInfo >();\n    if ( !itr.hasNext() ) {\n      return;\n    }\n    List< WeightedPhraseInfo > work = new ArrayList< WeightedPhraseInfo >();\n    WeightedPhraseInfo first = itr.next();\n    work.add( first );\n    int workEndOffset = first.getEndOffset();\n    while ( itr.hasNext() ) {\n      WeightedPhraseInfo current = itr.next();\n      if ( current.getStartOffset() <= workEndOffset ) {\n        workEndOffset = Math.max( workEndOffset, current.getEndOffset() );\n        work.add( current );\n      } else {\n        if ( work.size() == 1 ) {\n          phraseList.add( work.get( 0 ) );\n          work.set( 0, current );\n        } else {\n          phraseList.add( new WeightedPhraseInfo( work ) );\n          work.clear();\n          work.add( current );\n        }\n        workEndOffset = current.getEndOffset();\n      }\n    }\n    if ( work.size() == 1 ) {\n      phraseList.add( work.get( 0 ) );\n    } else {\n      phraseList.add( new WeightedPhraseInfo( work ) );\n      work.clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#FieldPhraseList(FieldPhraseList[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#FieldPhraseList(FieldPhraseList[]).mjava","sourceNew":"  /**\n   * Merging constructor.\n   *\n   * @param toMerge FieldPhraseLists to merge to build this one\n   */\n  public FieldPhraseList( FieldPhraseList[] toMerge ) {\n    // Merge all overlapping WeightedPhraseInfos\n    // Step 1.  Sort by startOffset, endOffset, and boost, in that order.\n    @SuppressWarnings( { \"rawtypes\", \"unchecked\" } )\n    Iterator< WeightedPhraseInfo >[] allInfos = new Iterator[ toMerge.length ];\n    int index = 0;\n    for ( FieldPhraseList fplToMerge : toMerge ) {\n      allInfos[ index++ ] = fplToMerge.phraseList.iterator();\n    }\n    MergedIterator< WeightedPhraseInfo > itr = new MergedIterator<>( false, allInfos );\n    // Step 2.  Walk the sorted list merging infos that overlap\n    phraseList = new LinkedList<>();\n    if ( !itr.hasNext() ) {\n      return;\n    }\n    List< WeightedPhraseInfo > work = new ArrayList<>();\n    WeightedPhraseInfo first = itr.next();\n    work.add( first );\n    int workEndOffset = first.getEndOffset();\n    while ( itr.hasNext() ) {\n      WeightedPhraseInfo current = itr.next();\n      if ( current.getStartOffset() <= workEndOffset ) {\n        workEndOffset = Math.max( workEndOffset, current.getEndOffset() );\n        work.add( current );\n      } else {\n        if ( work.size() == 1 ) {\n          phraseList.add( work.get( 0 ) );\n          work.set( 0, current );\n        } else {\n          phraseList.add( new WeightedPhraseInfo( work ) );\n          work.clear();\n          work.add( current );\n        }\n        workEndOffset = current.getEndOffset();\n      }\n    }\n    if ( work.size() == 1 ) {\n      phraseList.add( work.get( 0 ) );\n    } else {\n      phraseList.add( new WeightedPhraseInfo( work ) );\n      work.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * Merging constructor.\n   *\n   * @param toMerge FieldPhraseLists to merge to build this one\n   */\n  public FieldPhraseList( FieldPhraseList[] toMerge ) {\n    // Merge all overlapping WeightedPhraseInfos\n    // Step 1.  Sort by startOffset, endOffset, and boost, in that order.\n    @SuppressWarnings( { \"rawtypes\", \"unchecked\" } )\n    Iterator< WeightedPhraseInfo >[] allInfos = new Iterator[ toMerge.length ];\n    int index = 0;\n    for ( FieldPhraseList fplToMerge : toMerge ) {\n      allInfos[ index++ ] = fplToMerge.phraseList.iterator();\n    }\n    MergedIterator< WeightedPhraseInfo > itr = new MergedIterator< WeightedPhraseInfo >( false, allInfos );\n    // Step 2.  Walk the sorted list merging infos that overlap\n    phraseList = new LinkedList< WeightedPhraseInfo >();\n    if ( !itr.hasNext() ) {\n      return;\n    }\n    List< WeightedPhraseInfo > work = new ArrayList< WeightedPhraseInfo >();\n    WeightedPhraseInfo first = itr.next();\n    work.add( first );\n    int workEndOffset = first.getEndOffset();\n    while ( itr.hasNext() ) {\n      WeightedPhraseInfo current = itr.next();\n      if ( current.getStartOffset() <= workEndOffset ) {\n        workEndOffset = Math.max( workEndOffset, current.getEndOffset() );\n        work.add( current );\n      } else {\n        if ( work.size() == 1 ) {\n          phraseList.add( work.get( 0 ) );\n          work.set( 0, current );\n        } else {\n          phraseList.add( new WeightedPhraseInfo( work ) );\n          work.clear();\n          work.add( current );\n        }\n        workEndOffset = current.getEndOffset();\n      }\n    }\n    if ( work.size() == 1 ) {\n      phraseList.add( work.get( 0 ) );\n    } else {\n      phraseList.add( new WeightedPhraseInfo( work ) );\n      work.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}