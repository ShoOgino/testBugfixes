{"path":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56b73889eb1d01f9e6df4acab29810fb701abf0d","date":1284810631,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    return getRandomAccessReaderIterator(in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    return getRandomAccessReaderIterator(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReaderIterator(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts as a {@link ReaderIterator}\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an iterator to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static ReaderIterator getReaderIterator(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new PackedReaderIterator(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","56b73889eb1d01f9e6df4acab29810fb701abf0d"],"e128967bca58657bc0039d4bfe631e63e81f1977":["56b73889eb1d01f9e6df4acab29810fb701abf0d"],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["5f4e87790277826a2aea119328600dfb07761f32","56b73889eb1d01f9e6df4acab29810fb701abf0d"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e128967bca58657bc0039d4bfe631e63e81f1977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}