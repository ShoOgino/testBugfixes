{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","commits":[{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,Version).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param matchVersion the Lucene {@link Version}\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader, Version matchVersion) throws IOException {\n    return getWordSet(reader, new CharArraySet(matchVersion, INITIAL_CAPACITY, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,Version).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param matchVersion the Lucene {@link Version}\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader, Version matchVersion) throws IOException {\n    return getWordSet(reader, new CharArraySet(matchVersion, INITIAL_CAPACITY, false));\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,Version).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param matchVersion the Lucene {@link Version}\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader, Version matchVersion) throws IOException {\n    return getWordSet(reader, new CharArraySet(matchVersion, INITIAL_CAPACITY, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader) throws IOException {\n    return getWordSet(reader, new CharArraySet(INITIAL_CAPACITY, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}