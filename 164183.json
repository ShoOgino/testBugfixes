{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}