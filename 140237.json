{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","commits":[{"id":"c254f081571322c1e7c67cf1d4fa4c1b39cd7def","date":1234969682,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int shift=0;; shift+=precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, precisionStep, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, precisionStep, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, precisionStep, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08566707eaac91c2a59f35d09c29d3423b8b0caf","date":1235326633,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int level=0,shift=0;; level++) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift, level);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift, level);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift, level);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n      shift += precisionStep;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int shift=0;; shift+=precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, precisionStep, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, precisionStep, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, precisionStep, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int level=0,shift=0;; level++) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift, level);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift, level);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift, level);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n      shift += precisionStep;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60dca40a2dbc1f396046c3f87a7a03a995cd157","date":1239722886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":null,"sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n\n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}