{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFull().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void xxxtestImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void xxxtestImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    writer.setMaxBufferedDocs(2);\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}