{"path":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","commits":[{"id":"decc8a7344e9231708f9991fa09db2cafec7a2dd","date":1201187153,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","pathOld":"/dev/null","sourceNew":"  private void collapseTokens(Token result, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    result.setTermBuffer(s.toCharArray(), 0, s.length());\n    result.setStartOffset(theStart);\n    result.setEndOffset(theStart + s.length());\n    result.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","sourceNew":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(theStart);\n    reusableToken.setEndOffset(theStart + s.length());\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","sourceOld":"  private void collapseTokens(Token result, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    result.setTermBuffer(s.toCharArray(), 0, s.length());\n    result.setStartOffset(theStart);\n    result.setEndOffset(theStart + s.length());\n    result.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","sourceNew":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(input.correctOffset(theStart));\n    reusableToken.setEndOffset(input.correctOffset(theStart + s.length()));\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","sourceOld":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(theStart);\n    reusableToken.setEndOffset(theStart + s.length());\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":6,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(input.correctOffset(theStart), input.correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(input.correctOffset(theStart));\n    reusableToken.setEndOffset(input.correctOffset(theStart + s.length()));\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c","a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(int).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","sourceNew":"  private void collapseTokens(int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(input.correctOffset(theStart), input.correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","sourceOld":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(input.correctOffset(theStart));\n    reusableToken.setEndOffset(input.correctOffset(theStart + s.length()));\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c","a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["decc8a7344e9231708f9991fa09db2cafec7a2dd"],"decc8a7344e9231708f9991fa09db2cafec7a2dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"decc8a7344e9231708f9991fa09db2cafec7a2dd":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["decc8a7344e9231708f9991fa09db2cafec7a2dd"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}