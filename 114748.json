{"path":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","date":1327846543,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}