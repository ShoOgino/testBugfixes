{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testOffsetIntervals().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testOffsetIntervals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOffsetIntervals().mjava","sourceNew":"  public void testOffsetIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n\n    IntervalsSource before = new OffsetIntervalsSource(source, true);\n    checkIntervals(before, \"field1\", 3, new int[][]{\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {}\n    });\n\n    IntervalsSource after = new OffsetIntervalsSource(source, false);\n    checkIntervals(after, \"field1\", 3, new int[][]{\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {}\n    });\n  }\n\n","sourceOld":"  public void testOffsetIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n\n    IntervalsSource before = new OffsetIntervalsSource(source, true);\n    checkIntervals(before, \"field1\", 3, new int[][]{\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {}\n    });\n\n    IntervalsSource after = new OffsetIntervalsSource(source, false);\n    checkIntervals(after, \"field1\", 3, new int[][]{\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testOffsetIntervals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testOffsetIntervals().mjava","sourceNew":"  public void testOffsetIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n\n    IntervalsSource before = new OffsetIntervalsSource(source, true);\n    checkIntervals(before, \"field1\", 3, new int[][]{\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {}\n    });\n\n    IntervalsSource after = new OffsetIntervalsSource(source, false);\n    checkIntervals(after, \"field1\", 3, new int[][]{\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {}\n    });\n\n    checkVisits(before, 7, \"pease\", \"porridge\", \"hot\", \"cold\");\n  }\n\n","sourceOld":"  public void testOffsetIntervals() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n\n    IntervalsSource before = new OffsetIntervalsSource(source, true);\n    checkIntervals(before, \"field1\", 3, new int[][]{\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {},\n        { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 },\n        {}\n    });\n\n    IntervalsSource after = new OffsetIntervalsSource(source, false);\n    checkIntervals(after, \"field1\", 3, new int[][]{\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {},\n        { 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 18, 18 },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed67e557f509069144486ee34fd0275a6dcbe991"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}