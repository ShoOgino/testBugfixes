{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.shutdown();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), TEST_VERSION_CURRENT, mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.shutdown();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      AtomicReader memIndexReader= (AtomicReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1151ecb4798f5c31137aec032c241638018ed20":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","e1151ecb4798f5c31137aec032c241638018ed20"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e1151ecb4798f5c31137aec032c241638018ed20"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"e1151ecb4798f5c31137aec032c241638018ed20":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["e1151ecb4798f5c31137aec032c241638018ed20","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}