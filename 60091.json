{"path":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","commits":[{"id":"e561bdf81b5b983639de610f7c878f3e2382bf24","date":1099437089,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"/dev/null","sourceNew":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","pathOld":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testBuild().mjava","sourceNew":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","sourceOld":"    public void testBuild () {\n        try {\n            IndexReader r=IndexReader.open(userindex);\n\n            spellChecker.clearIndex();\n\n            addwords(r, \"field1\");\n            int num_field1=this.numdoc();\n\n            addwords(r, \"field2\");\n            int num_field2=this.numdoc();\n\n            this.assertTrue(num_field2==num_field1+1);\n\n            // test small word\n            String[] l=spellChecker.suggestSimilar(\"fvie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fiv\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"ive\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fives\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fie\", 2);\n            this.assertTrue(l[0].equals(\"five\"));\n\n            l=spellChecker.suggestSimilar(\"fi\", 2);\n            this.assertEquals(0,l.length);\n\n            // test restreint to a field\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\", false);\n            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1\n\n            l=spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\", false);\n            this.assertEquals(1,l.length); // there is the term thousand in the field field2\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            this.assertTrue(false);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e561bdf81b5b983639de610f7c878f3e2382bf24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"e561bdf81b5b983639de610f7c878f3e2382bf24":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}