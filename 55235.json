{"path":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"/dev/null","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":null,"sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"/dev/null","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92e2bfad016eca1c24f7e954f537e40a60465a1a","date":1273279324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dd980d4542233e52576cef2b34d9f54722c7e26","date":1279201848,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4","date":1279293720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#getLines(String,Charset).mjava","sourceNew":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","sourceOld":"  public List<String> getLines(String resource, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          charset.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"92e2bfad016eca1c24f7e954f537e40a60465a1a":["1da8d55113b689b06716246649de6f62430f15c0"],"5f4e87790277826a2aea119328600dfb07761f32":["92e2bfad016eca1c24f7e954f537e40a60465a1a","56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"4dd980d4542233e52576cef2b34d9f54722c7e26":["92e2bfad016eca1c24f7e954f537e40a60465a1a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4"],"56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4":["4dd980d4542233e52576cef2b34d9f54722c7e26"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"92e2bfad016eca1c24f7e954f537e40a60465a1a":["5f4e87790277826a2aea119328600dfb07761f32","4dd980d4542233e52576cef2b34d9f54722c7e26"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1da8d55113b689b06716246649de6f62430f15c0":["92e2bfad016eca1c24f7e954f537e40a60465a1a"],"4dd980d4542233e52576cef2b34d9f54722c7e26":["56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"56b4a9dfe7ebaad57e2e895ae5500777ebf27ec4":["c26f00b574427b55127e869b935845554afde1fa","5f4e87790277826a2aea119328600dfb07761f32","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}