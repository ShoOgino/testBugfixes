{"path":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","sourceNew":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45_AS_RADS * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarly for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45_AS_RADS * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarly for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","sourceNew":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45_AS_RADS * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarly for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45_AS_RADS * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarly for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}