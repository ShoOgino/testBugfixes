{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if(annotation.value().indexOf('*') >= 0){ //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      }\n      //dynamic fields are annotated as @Field(\"categories_*\")\n      else if(annotation.value().indexOf('*') >= 0){\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if(annotation.value().indexOf('*') >= 0){ //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ENGLISH) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeName(Field).mjava","sourceNew":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","sourceOld":"    private void storeName(Field annotation) {\n      if (annotation.value().equals(Field.DEFAULT)) {\n        if (field != null) {\n          name = field.getName();\n        } else {\n          String setterName = setter.getName();\n          if (setterName.startsWith(\"set\") && setterName.length() > 3) {\n            name = setterName.substring(3, 4).toLowerCase(Locale.ROOT) + setterName.substring(4);\n          } else {\n            name = setter.getName();\n          }\n        }\n      } else if (annotation.value().indexOf('*') >= 0) { //dynamic fields are annotated as @Field(\"categories_*\")\n        //if the field was annotated as a dynamic field, convert the name into a pattern\n        //the wildcard (*) is supposed to be either a prefix or a suffix, hence the use of replaceFirst\n        name = annotation.value().replaceFirst(\"\\\\*\", \"\\\\.*\");\n        dynamicFieldNamePatternMatcher = Pattern.compile(\"^\"+name+\"$\");\n      } else {\n        name = annotation.value();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["35b292579499b440bb87b86a6b832d91a6f6dc2e","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["35b292579499b440bb87b86a6b832d91a6f6dc2e","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["2acf500f78aa12b92e371fd89c719291986b6b90"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"46d8ada1fff8d18cb197c38c7983225162599948":["35b292579499b440bb87b86a6b832d91a6f6dc2e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ef9659be74f43b907ff558f1bafe80488bb9f4b7","46d8ada1fff8d18cb197c38c7983225162599948"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}