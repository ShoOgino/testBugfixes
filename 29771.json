{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: do a more efficient version that starts with the\n  // smallest DocSet and drives the intersection off that\n  // or implement an intersection() function that takes multiple\n  // DocSets (prob the better way)\n  protected DocSet getDocSet(List<Query> queries) throws IOException {\n    DocSet answer=null;\n    if (queries==null) return null;\n    for (Query q : queries) {\n      if (answer==null) {\n        answer = getDocSet(q);\n      } else {\n        answer = answer.intersection(getDocSet(q));\n      }\n    }\n    return answer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1940b60224897131cf61bb615e02af1b26558c8","date":1169501002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  protected DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  // TODO: do a more efficient version that starts with the\n  // smallest DocSet and drives the intersection off that\n  // or implement an intersection() function that takes multiple\n  // DocSets (prob the better way)\n  protected DocSet getDocSet(List<Query> queries) throws IOException {\n    DocSet answer=null;\n    if (queries==null) return null;\n    for (Query q : queries) {\n      if (answer==null) {\n        answer = getDocSet(q);\n      } else {\n        answer = answer.intersection(getDocSet(q));\n      }\n    }\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  protected DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1940b60224897131cf61bb615e02af1b26558c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["b1940b60224897131cf61bb615e02af1b26558c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["b1940b60224897131cf61bb615e02af1b26558c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1940b60224897131cf61bb615e02af1b26558c8":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}