{"path":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19389fe47925b510b2811e2b385a75f7ad19dcca","date":1393903127,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","sourceNew":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    blockCacheKey.setPath(\"/\");\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","sourceOld":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","sourceNew":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    blockCacheKey.setPath(\"/\");\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","sourceOld":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26bd56bd7f06194390617d646d6b9a24a7a472dd","date":1420576157,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","sourceNew":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(), true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    blockCacheKey.setPath(\"/\");\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","sourceOld":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(new Configuration()),\n        true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    blockCacheKey.setPath(\"/\");\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46386805f467fa40cb9d5a3cab791713306548c2","date":1487170610,"type":4,"author":"yonik","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BlockCacheTest#testLongBuffer().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verify checking of buffer size limits against the cached block size.\n   */\n  @Test\n  public void testLongBuffer() {\n    Random random = random();\n    int blockSize = BlockCache._32K;\n    int slabSize = blockSize * 1024;\n    long totalMemory = 2 * slabSize;\n\n    BlockCache blockCache = new BlockCache(new Metrics(), true, totalMemory, slabSize);\n    BlockCacheKey blockCacheKey = new BlockCacheKey();\n    blockCacheKey.setBlock(0);\n    blockCacheKey.setFile(0);\n    blockCacheKey.setPath(\"/\");\n    byte[] newData = new byte[blockSize*3];\n    byte[] testData = testData(random, blockSize, newData);\n\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, 0, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize, blockSize));\n    assertTrue(blockCache.store(blockCacheKey, 0, testData, blockSize*2, blockSize));\n\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, 0, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize, blockSize - 1));\n    assertTrue(blockCache.store(blockCacheKey, 1, testData, blockSize*2, blockSize - 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","19389fe47925b510b2811e2b385a75f7ad19dcca"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46386805f467fa40cb9d5a3cab791713306548c2":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46386805f467fa40cb9d5a3cab791713306548c2"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["19389fe47925b510b2811e2b385a75f7ad19dcca"]},"commit2Childs":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["96ea64d994d340044e0d57aeb6a5871539d10ca5","26bd56bd7f06194390617d646d6b9a24a7a472dd"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["19389fe47925b510b2811e2b385a75f7ad19dcca","96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"46386805f467fa40cb9d5a3cab791713306548c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["46386805f467fa40cb9d5a3cab791713306548c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}