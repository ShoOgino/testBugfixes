{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");\n    Collection<Double> intDate = (ArrayList<Double>)xmlToList(intDateFacet, \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(intDate,intDateTest);\n    //Int String\n    String intStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");\n    Collection<Double> intString = (ArrayList<Double>)xmlToList(intStringFacet, \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(intString,intStringTest);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");\n    Collection<Double> longDate = (ArrayList<Double>)xmlToList(longDateFacet, \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(longDate,longDateTest);\n    //Long String\n    String longStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");\n    Collection<Double> longString = (ArrayList<Double>)xmlToList(longStringFacet, \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(longString,longStringTest);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");   \n    Collection<Double> floatDate = (ArrayList<Double>)xmlToList(floatDateFacet, \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(floatDate,floatDateTest);\n    //Float String\n    String floatStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");    \n    Collection<Double> floatString = (ArrayList<Double>)xmlToList(floatStringFacet, \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(floatString,floatStringTest);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");  \n    Collection<Double> doubleDate = (ArrayList<Double>)xmlToList(doubleDateFacet, \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(doubleDate,doubleDateTest);\n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");    \n    Collection<Double> doubleString = (ArrayList<Double>)xmlToList(doubleStringFacet, \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(doubleString,doubleStringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    Collection<Double> intDate = getDoubleList( \"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");\n    Collection<Double> intDate = (ArrayList<Double>)xmlToList(intDateFacet, \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(intDate,intDateTest);\n    //Int String\n    String intStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");\n    Collection<Double> intString = (ArrayList<Double>)xmlToList(intStringFacet, \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(intString,intStringTest);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");\n    Collection<Double> longDate = (ArrayList<Double>)xmlToList(longDateFacet, \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(longDate,longDateTest);\n    //Long String\n    String longStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");\n    Collection<Double> longString = (ArrayList<Double>)xmlToList(longStringFacet, \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(longString,longStringTest);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");   \n    Collection<Double> floatDate = (ArrayList<Double>)xmlToList(floatDateFacet, \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(floatDate,floatDateTest);\n    //Float String\n    String floatStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");    \n    Collection<Double> floatString = (ArrayList<Double>)xmlToList(floatStringFacet, \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(floatString,floatStringTest);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"date_dtd\");  \n    Collection<Double> doubleDate = (ArrayList<Double>)xmlToList(doubleDateFacet, \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(doubleDate,doubleDateTest);\n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"median\",\"fieldFacets\", \"string_sd\");    \n    Collection<Double> doubleString = (ArrayList<Double>)xmlToList(doubleStringFacet, \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(doubleString,doubleStringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    Collection<Double> intDate = getDoubleList( \"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#medianFacetAscTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    Collection<Double> intDate = getDoubleList( \"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void medianFacetAscTest() throws Exception { \n    //Int Date\n    Collection<Double> intDate = getDoubleList( \"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"int\");\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, \"median\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Double> intString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"int\");\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"median\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Double> longDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"long\");\n    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, \"median\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Double> longString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"long\");\n    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, \"median\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Double> floatDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"float\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, \"median\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Double> floatString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"float\");\n    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, \"median\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"median\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"median\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, \"median\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}