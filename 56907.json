{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","commits":[{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"/dev/null","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) throws IOException {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) throws IOException {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":["77855215e331ce146763531cb9b0c050726f6ae5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) throws IOException {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs);\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs);\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs, hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedTopDocs(String,boolean,ScoreMode,IndexIterationContext).mjava","sourceNew":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(new TotalHits(hits.size(), TotalHits.Relation.EQUAL_TO), scoreDocs);\n  }\n\n","sourceOld":"  private TopDocs createExpectedTopDocs(String queryValue,\n                                        final boolean from,\n                                        final ScoreMode scoreMode,\n                                        IndexIterationContext context) {\n\n    Map<Integer, JoinScore> hitsToJoinScores;\n    if (from) {\n      hitsToJoinScores = context.fromHitsToJoinScore.get(queryValue);\n    } else {\n      hitsToJoinScores = context.toHitsToJoinScore.get(queryValue);\n    }\n    List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<>(hitsToJoinScores.entrySet());\n    Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {\n\n      @Override\n      public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {\n        float score1 = hit1.getValue().score(scoreMode);\n        float score2 = hit2.getValue().score(scoreMode);\n\n        int cmp = Float.compare(score2, score1);\n        if (cmp != 0) {\n          return cmp;\n        }\n        return hit1.getKey() - hit2.getKey();\n      }\n\n    });\n    ScoreDoc[] scoreDocs = new ScoreDoc[Math.min(10, hits.size())];\n    for (int i = 0; i < scoreDocs.length; i++) {\n      Map.Entry<Integer,JoinScore> hit = hits.get(i);\n      scoreDocs[i] = new ScoreDoc(hit.getKey(), hit.getValue().score(scoreMode));\n    }\n    return new TopDocs(hits.size(), scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["7530de27b87b961b51f01bd1299b7004d46e8823"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["19f400d1b6b61e87efe596bd64726f080f9a29f0","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["77855215e331ce146763531cb9b0c050726f6ae5","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77855215e331ce146763531cb9b0c050726f6ae5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["77855215e331ce146763531cb9b0c050726f6ae5"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77855215e331ce146763531cb9b0c050726f6ae5"],"77855215e331ce146763531cb9b0c050726f6ae5":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","19f400d1b6b61e87efe596bd64726f080f9a29f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}