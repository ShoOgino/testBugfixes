{"path":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","commits":[{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eafd816608011f66422f3052c37962973582d12a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["eafd816608011f66422f3052c37962973582d12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["eafd816608011f66422f3052c37962973582d12a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"eafd816608011f66422f3052c37962973582d12a":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eafd816608011f66422f3052c37962973582d12a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}