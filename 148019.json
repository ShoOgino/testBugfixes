{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final StoredDocument doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testEmptyDocs().mjava","sourceNew":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = maybeWrapWithMergingReader(DirectoryReader.open(dir));\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n    \n    // make sure that the fact that documents might be empty is not a problem\n    final Document emptyDoc = new Document();\n    final int numDocs = random().nextBoolean() ? 1 : atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      iw.addDocument(emptyDoc);\n    }\n    iw.commit();\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = rd.document(i);\n      assertNotNull(doc);\n      assertTrue(doc.getFields().isEmpty());\n    }\n    rd.close();\n    \n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6448f67be45147de82a85cd903fec34e8930da75":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6448f67be45147de82a85cd903fec34e8930da75"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["6448f67be45147de82a85cd903fec34e8930da75"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70b55953b6a72596cb534ead735a8b849a473cac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"70b55953b6a72596cb534ead735a8b849a473cac":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}