{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","sourceNew":"    private void doDeletes(List<? extends IndexCommit> commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","sourceOld":"    private void doDeletes(List<? extends IndexCommit> commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","sourceNew":"    private void doDeletes(List<? extends IndexCommit> commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","sourceOld":"    private void doDeletes(List<? extends IndexCommit> commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}