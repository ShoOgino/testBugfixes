{"path":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testMergeSort().mjava","sourceNew":"  public void testIntroSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.introSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","sourceOld":"  public void testMergeSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.mergeSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.mergeSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.mergeSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","sourceNew":"  public void testIntroSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","sourceOld":"  public void testIntroSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<Integer>(list1);\n      CollectionUtil.introSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testIntroSort().mjava","sourceNew":"  public void testIntroSort() {\n    for (int i = 0, c = atLeast(100); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","sourceOld":"  public void testIntroSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      List<Integer> list1 = createRandomList(2000), list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n      \n      list1 = createRandomList(2000);\n      list2 = new ArrayList<>(list1);\n      CollectionUtil.introSort(list1, Collections.reverseOrder());\n      Collections.sort(list2, Collections.reverseOrder());\n      assertEquals(list2, list1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      CollectionUtil.introSort(list1);\n      Collections.sort(list2);\n      assertEquals(list2, list1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}