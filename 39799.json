{"path":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","commits":[{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b3115f2bc6471b711ae670e999c942c6212432","date":1248307368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961159f13aece73fbb30aea720e77a2237e8bafd":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9b3115f2bc6471b711ae670e999c942c6212432":["961159f13aece73fbb30aea720e77a2237e8bafd"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["a9b3115f2bc6471b711ae670e999c942c6212432"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"961159f13aece73fbb30aea720e77a2237e8bafd":["a9b3115f2bc6471b711ae670e999c942c6212432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"a9b3115f2bc6471b711ae670e999c942c6212432":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}