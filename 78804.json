{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"541f6605a29362fa8a42f33b69069e7da5178034","date":1337786849,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR), options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR), options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e54fda1eb029b24dd806a3b668c0d78b1625fd9","date":1350933798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR), options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      List<LookupResult> suggestions = lookup.lookup(scratch,\n          (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR), options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    log.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    log.debug(\"getSuggestions: {}\", options.tokens);\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    log.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    CharsRef scratch = new CharsRef();\n    for (Token t : options.tokens) {\n      scratch.chars = t.buffer();\n      scratch.offset = 0;\n      scratch.length = t.length();\n      boolean onlyMorePopular = (options.suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) &&\n        !(lookup instanceof WFSTCompletionLookup) &&\n        !(lookup instanceof AnalyzingSuggester);\n      List<LookupResult> suggestions = lookup.lookup(scratch, onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (options.suggestMode != SuggestMode.SUGGEST_MORE_POPULAR) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key.toString(), (int)lr.value);\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["541f6605a29362fa8a42f33b69069e7da5178034"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6ecc52400551de6a7d8daf646be839487911627c":["c26f00b574427b55127e869b935845554afde1fa"],"541f6605a29362fa8a42f33b69069e7da5178034":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"62e52115b56781006682fd92c6938efaf174304d":["541f6605a29362fa8a42f33b69069e7da5178034","3e54fda1eb029b24dd806a3b668c0d78b1625fd9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["dc3c850c5222a1ce7d619563f67bf047a11b32b6","541f6605a29362fa8a42f33b69069e7da5178034"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9"]},"commit2Childs":{"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["62e52115b56781006682fd92c6938efaf174304d","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"541f6605a29362fa8a42f33b69069e7da5178034":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9","62e52115b56781006682fd92c6938efaf174304d","3599646b4d4c346cf74d334813488b8b337b5bf5"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62e52115b56781006682fd92c6938efaf174304d":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","541f6605a29362fa8a42f33b69069e7da5178034","3599646b4d4c346cf74d334813488b8b337b5bf5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","62e52115b56781006682fd92c6938efaf174304d","3599646b4d4c346cf74d334813488b8b337b5bf5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}