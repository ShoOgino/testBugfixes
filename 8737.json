{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31fd188d5e34d3af6691f8428fecc2d4665e2d56","date":1309225455,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, noAnalyzer).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, noAnalyzer).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, noAnalyzer).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a045054ae144972f58092f8a3d398c30f12fa21f","date":1310880650,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, null).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, noAnalyzer).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, null).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, null).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6acdc953f67c10fad15168f245289efcd16588d7","date":1320400495,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, null).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"a045054ae144972f58092f8a3d398c30f12fa21f":["31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e230a61047bc041516c811baa08a7174d6f8322a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e230a61047bc041516c811baa08a7174d6f8322a","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"6acdc953f67c10fad15168f245289efcd16588d7":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["a045054ae144972f58092f8a3d398c30f12fa21f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6acdc953f67c10fad15168f245289efcd16588d7"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["2553b00f699380c64959ccb27991289aae87be2e","a045054ae144972f58092f8a3d398c30f12fa21f","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"a045054ae144972f58092f8a3d398c30f12fa21f":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"6acdc953f67c10fad15168f245289efcd16588d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["6acdc953f67c10fad15168f245289efcd16588d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}