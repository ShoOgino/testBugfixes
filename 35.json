{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random(), q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067f220540d8b5947e311e835a309a3e9c5d9c85","date":1363843558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random(), q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000, Integer.MAX_VALUE);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        // bs1\n        ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getTestName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        // bs2\n        TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n        s.search(q, collector);\n        ScoreDoc[] h2 = collector.topDocs().scoreDocs;\n        if (expected != h2.length) {\n          printHits(getTestName(), h2, s);\n        }\n        assertEquals(\"result count (bs2)\", expected, h2.length);\n\n        QueryUtils.check(random(), q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["067f220540d8b5947e311e835a309a3e9c5d9c85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"067f220540d8b5947e311e835a309a3e9c5d9c85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["067f220540d8b5947e311e835a309a3e9c5d9c85"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"067f220540d8b5947e311e835a309a3e9c5d9c85":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}