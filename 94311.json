{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = LegacyNumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = LegacyNumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}