{"path":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            mgr.maybeReopen();\n          }\n        } catch (Throwable t) {\n          System.out.println(\"TEST: reopen thread hit exc\");\n          t.printStackTrace(System.out);\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d604c1ad3df259faad15d636dd6f0a3674961a02","date":1318284355,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          System.out.println(\"TEST: reopen thread hit exc\");\n          t.printStackTrace(System.out);\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            mgr.maybeReopen();\n          }\n        } catch (Throwable t) {\n          System.out.println(\"TEST: reopen thread hit exc\");\n          t.printStackTrace(System.out);\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          System.out.println(\"TEST: reopen thread hit exc\");\n          t.printStackTrace(System.out);\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          System.out.println(\"TEST: reopen thread hit exc\");\n          t.printStackTrace(System.out);\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["d604c1ad3df259faad15d636dd6f0a3674961a02"],"d604c1ad3df259faad15d636dd6f0a3674961a02":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d604c1ad3df259faad15d636dd6f0a3674961a02":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["d604c1ad3df259faad15d636dd6f0a3674961a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}