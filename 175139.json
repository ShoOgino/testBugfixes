{"path":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","commits":[{"id":"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","date":1449514606,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","pathOld":"/dev/null","sourceNew":"  static GenericTermsCollector wrap(final TermsCollector<?> collector) {\n    return new GenericTermsCollector() {\n\n      \n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return collector.getLeafCollector(context);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return collector.needsScores();\n      }\n\n      @Override\n      public BytesRefHash getCollectedTerms() {\n        return collector.getCollectorTerms();\n      }\n\n      @Override\n      public float[] getScoresPerTerm() {\n        throw new UnsupportedOperationException(\"scores are not available for \"+collector);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","sourceNew":"  static GenericTermsCollector wrap(final TermsCollector<?> collector) {\n    return new GenericTermsCollector() {\n\n      \n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return collector.getLeafCollector(context);\n      }\n\n      @Override\n      public org.apache.lucene.search.ScoreMode scoreMode() {\n        return collector.scoreMode();\n      }\n\n      @Override\n      public BytesRefHash getCollectedTerms() {\n        return collector.getCollectorTerms();\n      }\n\n      @Override\n      public float[] getScoresPerTerm() {\n        throw new UnsupportedOperationException(\"scores are not available for \"+collector);\n      }\n    };\n  }\n\n","sourceOld":"  static GenericTermsCollector wrap(final TermsCollector<?> collector) {\n    return new GenericTermsCollector() {\n\n      \n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return collector.getLeafCollector(context);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return collector.needsScores();\n      }\n\n      @Override\n      public BytesRefHash getCollectedTerms() {\n        return collector.getCollectorTerms();\n      }\n\n      @Override\n      public float[] getScoresPerTerm() {\n        throw new UnsupportedOperationException(\"scores are not available for \"+collector);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GenericTermsCollector#wrap(TermsCollector[#]).mjava","sourceNew":"  static GenericTermsCollector wrap(final TermsCollector<?> collector) {\n    return new GenericTermsCollector() {\n\n      \n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return collector.getLeafCollector(context);\n      }\n\n      @Override\n      public org.apache.lucene.search.ScoreMode scoreMode() {\n        return collector.scoreMode();\n      }\n\n      @Override\n      public BytesRefHash getCollectedTerms() {\n        return collector.getCollectorTerms();\n      }\n\n      @Override\n      public float[] getScoresPerTerm() {\n        throw new UnsupportedOperationException(\"scores are not available for \"+collector);\n      }\n    };\n  }\n\n","sourceOld":"  static GenericTermsCollector wrap(final TermsCollector<?> collector) {\n    return new GenericTermsCollector() {\n\n      \n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return collector.getLeafCollector(context);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return collector.needsScores();\n      }\n\n      @Override\n      public BytesRefHash getCollectedTerms() {\n        return collector.getCollectorTerms();\n      }\n\n      @Override\n      public float[] getScoresPerTerm() {\n        throw new UnsupportedOperationException(\"scores are not available for \"+collector);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}