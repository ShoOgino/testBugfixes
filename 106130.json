{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f73cbe1f1b9e67a7c11d33b04639ce79ba78707","date":1374646657,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags = (byte) (arc.flags() | BIT_ARC_HAS_FINAL_OUTPUT);\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags = (byte) (arc.flags() | BIT_ARC_HAS_FINAL_OUTPUT);\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    T NO_OUTPUT = outputs.getNoOutput();\n\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n      if (emptyOutput != NO_OUTPUT) {\n        arc.flags |= BIT_ARC_HAS_FINAL_OUTPUT;\n      }\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"1abb939fb41b2fe4f89fd518f3da288c0213341d":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f73cbe1f1b9e67a7c11d33b04639ce79ba78707":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1f73cbe1f1b9e67a7c11d33b04639ce79ba78707"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1abb939fb41b2fe4f89fd518f3da288c0213341d","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"1abb939fb41b2fe4f89fd518f3da288c0213341d":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f73cbe1f1b9e67a7c11d33b04639ce79ba78707","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1f73cbe1f1b9e67a7c11d33b04639ce79ba78707":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}