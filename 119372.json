{"path":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown () throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown () throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown () throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown () throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().getSubResults().iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().getValue());\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().getValue());\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestSimpleExample#testDrillDown().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestSimpleExample#testDrillDown().mjava","sourceNew":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","sourceOld":"  /**\n   * In drill down test we are drilling down to a facet that appears in a single document.\n   * As result, facets that without drill down got count of 2 will now get a count of 1. \n   */\n  @Test\n  public void testDrillDown() throws Exception {\n    ExampleResult res = new SimpleMain().runDrillDown();\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\",1, res.getFacetResults().size());\n    \n    // drill down facet appears in only 1 doc, and that doc has only 2 facets  \n    FacetResult facetResult = res.getFacetResults().get(0);\n    assertEquals(\"Wrong number of facets!\",2, facetResult.getNumValidDescendants());\n    \n    Iterator<? extends FacetResultNode> resIterator = facetResult.getFacetResultNode().subResults.iterator();\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for first result out of 2\", 1, (int)resIterator.next().value);\n    assertTrue(\"Too few results\", resIterator.hasNext());\n    assertEquals(\"wrong count for second result out of 2\", 1, (int)resIterator.next().value);\n    assertFalse(\"Too many results!\", resIterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["811cdb4a80352766eb0c762e48972707a924e5cd"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"811cdb4a80352766eb0c762e48972707a924e5cd":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"811cdb4a80352766eb0c762e48972707a924e5cd":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}