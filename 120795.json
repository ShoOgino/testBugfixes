{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","commits":[{"id":"02e2650f264d07432d3cd716538163ca711df73d","date":1340003800,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a15a3739f7ed5a65e43e25c59d82e3f40847896"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a2ba67a463f52915e77a5fd8714aa7d36faf59c","date":1348538193,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docsOrig.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":["c373346edd4f4f04a263a25219db1f8cbf86877b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c373346edd4f4f04a263a25219db1f8cbf86877b","date":1364045775,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docsOrig.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a15a3739f7ed5a65e43e25c59d82e3f40847896","date":1403046116,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":["02e2650f264d07432d3cd716538163ca711df73d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(new FilteredQuery(facetQuery, mainQueryFilter), collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(facetQuery, mainQueryFilter, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    searcher.search(new FilteredQuery(facetQuery, mainQueryFilter), collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,ParsedParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {\n    String groupField = parsed.params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = parsed.docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery) throws IOException {\n    String groupField = params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a15a3739f7ed5a65e43e25c59d82e3f40847896":["c373346edd4f4f04a263a25219db1f8cbf86877b"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["c373346edd4f4f04a263a25219db1f8cbf86877b","3a15a3739f7ed5a65e43e25c59d82e3f40847896"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a15a3739f7ed5a65e43e25c59d82e3f40847896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["02e2650f264d07432d3cd716538163ca711df73d"],"c373346edd4f4f04a263a25219db1f8cbf86877b":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"02e2650f264d07432d3cd716538163ca711df73d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a15a3739f7ed5a65e43e25c59d82e3f40847896":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1db68e96dd908fcd79ef809095822736aa601d08":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e2650f264d07432d3cd716538163ca711df73d"],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["c373346edd4f4f04a263a25219db1f8cbf86877b"],"c373346edd4f4f04a263a25219db1f8cbf86877b":["3a15a3739f7ed5a65e43e25c59d82e3f40847896","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02e2650f264d07432d3cd716538163ca711df73d":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}