{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cd1b4223cee0ae5a351cacaf8d2190a226752f","date":1301623115,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    CharTermAttribute termAtt1 = ts1.addAttribute(CharTermAttribute.class);\n    CharTermAttribute termAtt2 = ts2.addAttribute(CharTermAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    assertEquals(termAtt1.toString(), termAtt2.toString());\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.reusableTokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.reusableTokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.reusableTokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.reusableTokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68cd1b4223cee0ae5a351cacaf8d2190a226752f":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","68cd1b4223cee0ae5a351cacaf8d2190a226752f"],"cf7efd82433f3f64684711c16edfd149db6af111":["68cd1b4223cee0ae5a351cacaf8d2190a226752f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","68cd1b4223cee0ae5a351cacaf8d2190a226752f"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","68cd1b4223cee0ae5a351cacaf8d2190a226752f","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68cd1b4223cee0ae5a351cacaf8d2190a226752f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cf7efd82433f3f64684711c16edfd149db6af111","45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}