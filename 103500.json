{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#assertIsLeafMatch(Query,String).mjava","commits":[{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#assertIsLeafMatch(Query,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertIsLeafMatch(Query q, String field) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n    for (int i = 0; i < searcher.reader.maxDoc(); i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        return;\n      }\n      MatchesIterator mi = matches.getMatches(field);\n      if (mi == null) {\n        return;\n      }\n      while (mi.next()) {\n        assertNull(mi.getSubMatches());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb","date":1557385218,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#assertIsLeafMatch(Query,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#assertIsLeafMatch(Query,String).mjava","sourceNew":"  private void assertIsLeafMatch(Query q, String field) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1);\n    for (int i = 0; i < searcher.reader.maxDoc(); i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        return;\n      }\n      MatchesIterator mi = matches.getMatches(field);\n      if (mi == null) {\n        return;\n      }\n      while (mi.next()) {\n        assertNull(mi.getSubMatches());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertIsLeafMatch(Query q, String field) throws IOException {\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE_NO_SCORES, 1);\n    for (int i = 0; i < searcher.reader.maxDoc(); i++) {\n      LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(i, searcher.leafContexts));\n      int doc = i - ctx.docBase;\n      Matches matches = w.matches(ctx, doc);\n      if (matches == null) {\n        return;\n      }\n      MatchesIterator mi = matches.getMatches(field);\n      if (mi == null) {\n        return;\n      }\n      while (mi.next()) {\n        assertNull(mi.getSubMatches());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}