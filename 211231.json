{"path":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"/dev/null","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */    \n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n            \n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            InputStream expected = dir.openFile(name);\n            InputStream actual = csr.openFile(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            InputStream expected = dir.openFile(name);\n            InputStream actual = csr.openFile(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */    \n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n            \n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            InputStream expected = dir.openFile(name);\n            InputStream actual = csr.openFile(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            InputStream expected = dir.openFile(name);\n            InputStream actual = csr.openFile(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e971ba25509e21a130fef61f0687be0446ca27a0"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}