{"path":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[]).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields) throws Throwable {\n\n    final int termIndexInterval = this.nextInt(13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, new AtomicLong());\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new AtomicLong(0));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, new AtomicLong());\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new AtomicLong(0));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new AtomicLong(0));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.codecId] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo = SegmentCodecs.build(fieldInfos, CodecProvider.getDefault());\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new AtomicLong(0));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new IOContext(Context.FLUSH));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, newIOContext(random));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, new IOContext(Context.FLUSH));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, newIOContext(random));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, newIOContext(random));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final Codec codec = Codec.getDefault();\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codec, null, newIOContext(random));\n\n    final FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codec instanceof Lucene3xCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final SegmentCodecs codecInfo =  fieldInfos.buildSegmentCodecs(false);\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codecInfo, null, newIOContext(random));\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      assertTrue(field.fieldInfo.getCodecId() != FieldInfo.UNASSIGNED_CODEC_ID);\n      if (!allowPreFlex && codecInfo.codecs[field.fieldInfo.getCodecId()] instanceof PreFlexCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final Codec codec = Codec.getDefault();\n    final SegmentWriteState state = new SegmentWriteState(InfoStream.getDefault(), dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codec, null, newIOContext(random));\n\n    final FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codec instanceof Lucene3xCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final Codec codec = Codec.getDefault();\n    final SegmentWriteState state = new SegmentWriteState(null, dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codec, null, newIOContext(random));\n\n    final FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codec instanceof Lucene3xCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#write(FieldInfos,Directory,FieldData[],boolean).mjava","sourceNew":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final Codec codec = Codec.getDefault();\n    final SegmentWriteState state = new SegmentWriteState(InfoStream.getDefault(), dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codec, null, newIOContext(random));\n\n    final FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codec instanceof Lucene3xCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  private void write(final FieldInfos fieldInfos, final Directory dir, final FieldData[] fields, boolean allowPreFlex) throws Throwable {\n\n    final int termIndexInterval = _TestUtil.nextInt(random, 13, 27);\n    final Codec codec = Codec.getDefault();\n    final SegmentWriteState state = new SegmentWriteState(InfoStream.getDefault(), dir, SEGMENT, fieldInfos, 10000, termIndexInterval, codec, null, newIOContext(random));\n\n    final FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(state);\n    Arrays.sort(fields);\n    for (final FieldData field : fields) {\n      if (!allowPreFlex && codec instanceof Lucene3xCodec) {\n        // code below expects unicode sort order\n        continue;\n      }\n      field.write(consumer);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","e92442af786151ee55bc283eb472f629e3c7b52b"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["e92442af786151ee55bc283eb472f629e3c7b52b"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"e92442af786151ee55bc283eb472f629e3c7b52b":["1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e92442af786151ee55bc283eb472f629e3c7b52b"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","e92442af786151ee55bc283eb472f629e3c7b52b"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["e92442af786151ee55bc283eb472f629e3c7b52b","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["56da903869515527852ee21ea7ef7bfe414cd40d"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e92442af786151ee55bc283eb472f629e3c7b52b","b6f9be74ca7baaef11857ad002cad40419979516"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"e92442af786151ee55bc283eb472f629e3c7b52b":["135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","69a6d2d525aeab53c867ed26934185e5bb627d0e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["b0c7a8f7304b75b1528814c5820fa23a96816c27","29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["e92442af786151ee55bc283eb472f629e3c7b52b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}