{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random);\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random);\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random, 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random);\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(CharReader.get(reader), 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter);\n      ts.reset();\n      while (ts.incrementToken()) {\n        ;\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":["b8851e523e638323ef17b2c8e44eb34ba16365e0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8","date":1417050396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(10000);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testForwardOffsets().mjava","sourceNew":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testForwardOffsets() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomHtmlishString(random(), 20);\n      StringReader reader = new StringReader(s);\n      MockCharFilter charfilter = new MockCharFilter(reader, 2);\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      try (TokenStream ts = analyzer.tokenStream(\"bogus\", charfilter)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n          ;\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["3bbc7f6a833b883b37b6474ecdce0973a9bf09c8"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3bbc7f6a833b883b37b6474ecdce0973a9bf09c8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}