{"path":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"/dev/null","sourceNew":"  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr = null;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(StandardCharsets.UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["946009ad0fba506337041a368b0a74d2edd59e2c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr = null;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(StandardCharsets.UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":"  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr = null;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(StandardCharsets.UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e76c7a05748b87468b5ccbcf325482013e002a3d","date":1448547807,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr = null;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(StandardCharsets.UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"946009ad0fba506337041a368b0a74d2edd59e2c","date":1528114477,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setHeader(HttpRequest).mjava","sourceNew":"  void setHeader(HttpRequest httpRequest) {\n    generateToken().ifPresent(s -> httpRequest.setHeader(HEADER, myNodeName + \" \" + s));\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  void setHeader(HttpRequest httpRequest) {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return;\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return;\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    httpRequest.setHeader(HEADER, myNodeName + \" \" + base64Cipher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["946009ad0fba506337041a368b0a74d2edd59e2c"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["e76c7a05748b87468b5ccbcf325482013e002a3d","946009ad0fba506337041a368b0a74d2edd59e2c"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["e76c7a05748b87468b5ccbcf325482013e002a3d","946009ad0fba506337041a368b0a74d2edd59e2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"946009ad0fba506337041a368b0a74d2edd59e2c":["e76c7a05748b87468b5ccbcf325482013e002a3d"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","946009ad0fba506337041a368b0a74d2edd59e2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e76c7a05748b87468b5ccbcf325482013e002a3d"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"f592209545c71895260367152601e9200399776d":[],"946009ad0fba506337041a368b0a74d2edd59e2c":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}