{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","commits":[{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","pathOld":"/dev/null","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(\"shard1\");\n    addReplica.setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    while (System.currentTimeMillis() < timeout && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica();\n    deleteReplicaRequest.setCollectionName(collectionName);\n    deleteReplicaRequest.setShardName(\"shard1\");\n    deleteReplicaRequest.setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    \n    timeout = System.currentTimeMillis() + 3000;\n    \n    while (System.currentTimeMillis() < timeout && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    while (System.currentTimeMillis() < timeout && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    \n    timeout = System.currentTimeMillis() + 3000;\n    \n    while (System.currentTimeMillis() < timeout && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(\"shard1\");\n    addReplica.setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    while (System.currentTimeMillis() < timeout && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica();\n    deleteReplicaRequest.setCollectionName(collectionName);\n    deleteReplicaRequest.setShardName(\"shard1\");\n    deleteReplicaRequest.setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    \n    timeout = System.currentTimeMillis() + 3000;\n    \n    while (System.currentTimeMillis() < timeout && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    while (System.currentTimeMillis() < timeout && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    \n    timeout = System.currentTimeMillis() + 3000;\n    \n    while (System.currentTimeMillis() < timeout && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["bcf9886c8ff537aafde14de48ebf744f5673f08b","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}