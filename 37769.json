{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator();\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5a238fc456663f685a9db1ed8d680e348bb45171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}