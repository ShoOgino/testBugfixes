{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","commits":[{"id":"7cf464adc9721589a2872247d15442e59766e791","date":1327607202,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e607fe30545e76999c3eb528f9af63e9586f22d1","date":1327619121,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee9da43a3111bbe02a90555f284bb28d02101b4c","date":1329234611,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 20) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e607fe30545e76999c3eb528f9af63e9586f22d1"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["ee9da43a3111bbe02a90555f284bb28d02101b4c"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["ee9da43a3111bbe02a90555f284bb28d02101b4c","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"ee9da43a3111bbe02a90555f284bb28d02101b4c":["e607fe30545e76999c3eb528f9af63e9586f22d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e607fe30545e76999c3eb528f9af63e9586f22d1"],"e607fe30545e76999c3eb528f9af63e9586f22d1":["7cf464adc9721589a2872247d15442e59766e791"],"7cf464adc9721589a2872247d15442e59766e791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["33d0ed80b7b47e34ad3ff033a77544563aba3085"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","7cf464adc9721589a2872247d15442e59766e791"],"ee9da43a3111bbe02a90555f284bb28d02101b4c":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"e607fe30545e76999c3eb528f9af63e9586f22d1":["78a55f24d9b493c2a1cecf79f1d78279062b545b","ee9da43a3111bbe02a90555f284bb28d02101b4c","fd92b8bcc88e969302510acf77bd6970da3994c4"],"7cf464adc9721589a2872247d15442e59766e791":["e607fe30545e76999c3eb528f9af63e9586f22d1"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}