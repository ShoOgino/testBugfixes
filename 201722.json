{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","commits":[{"id":"3fa20a3abac513546891f11898093eaf5828f7ab","date":1360558555,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      OrdIterator ords = null;\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        ords = docValues.getOrds(i, ords);\n        for (int j = 0; j < stringValues.length; j++) {\n          long ord = ords.nextOrd();\n          assert ord != OrdIterator.NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert ords.nextOrd() == OrdIterator.NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988e3f44fe797ee94a0135abfe27e5872b99844d","date":1360563792,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          long ord = docValues.nextOrd();\n          assert ord != SortedSetDocValues.NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == SortedSetDocValues.NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      OrdIterator ords = null;\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        ords = docValues.getOrds(i, ords);\n        for (int j = 0; j < stringValues.length; j++) {\n          long ord = ords.nextOrd();\n          assert ord != OrdIterator.NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert ords.nextOrd() == OrdIterator.NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1272e04e4f27b1c1f8cdb786b642c536a429386e","date":1360592091,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          long ord = docValues.nextOrd();\n          assert ord != SortedSetDocValues.NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == SortedSetDocValues.NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fa20a3abac513546891f11898093eaf5828f7ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1272e04e4f27b1c1f8cdb786b642c536a429386e":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["1272e04e4f27b1c1f8cdb786b642c536a429386e"],"988e3f44fe797ee94a0135abfe27e5872b99844d":["3fa20a3abac513546891f11898093eaf5828f7ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fa20a3abac513546891f11898093eaf5828f7ab":["988e3f44fe797ee94a0135abfe27e5872b99844d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fa20a3abac513546891f11898093eaf5828f7ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1272e04e4f27b1c1f8cdb786b642c536a429386e":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":[],"988e3f44fe797ee94a0135abfe27e5872b99844d":["1272e04e4f27b1c1f8cdb786b642c536a429386e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}