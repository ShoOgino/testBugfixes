{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","commits":[{"id":"083674ea80108c4053d9526cdef6f77b2494e551","date":1462313169,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && minValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && minValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d664a2b813187e9d6d2e5dda89b0f704b25965c","date":1501079735,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && maxValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && minValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,double,double).mjava","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && maxValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (minValue <= max) {\n        \n        // Does this node overlap?\n        if (minValue <= high && maxValue >= low) {\n          if (edgeIterator.matches(edge) == false) {\n            return false;\n          }\n        }\n        \n        if (left != null && left.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (right != null && minValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["083674ea80108c4053d9526cdef6f77b2494e551","7d664a2b813187e9d6d2e5dda89b0f704b25965c"],"7d664a2b813187e9d6d2e5dda89b0f704b25965c":["083674ea80108c4053d9526cdef6f77b2494e551"],"083674ea80108c4053d9526cdef6f77b2494e551":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d664a2b813187e9d6d2e5dda89b0f704b25965c"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","083674ea80108c4053d9526cdef6f77b2494e551"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"7d664a2b813187e9d6d2e5dda89b0f704b25965c":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"083674ea80108c4053d9526cdef6f77b2494e551":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","7d664a2b813187e9d6d2e5dda89b0f704b25965c","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["083674ea80108c4053d9526cdef6f77b2494e551","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}