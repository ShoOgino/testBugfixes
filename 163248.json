{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","commits":[{"id":"d47a51687a906464022060653be52ed62dfa2c18","date":1391087530,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates search and taxonomy readers over the corresponding directories.\n   * \n   * <p>\n   * <b>NOTE:</b> you should only use this constructor if you commit and call\n   * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an\n   * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.\n   */\n  public SearcherTaxonomyManager(Directory indexDir, Directory taxoDir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    current = new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(indexDir)), taxoReader);\n    this.taxoWriter = null;\n    taxoEpoch = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates search and taxonomy readers over the corresponding directories.\n   * \n   * <p>\n   * <b>NOTE:</b> you should only use this constructor if you commit and call\n   * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an\n   * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.\n   */\n  public SearcherTaxonomyManager(Directory indexDir, Directory taxoDir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    current = new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(indexDir), null), taxoReader);\n    this.taxoWriter = null;\n    taxoEpoch = -1;\n  }\n\n","sourceOld":"  /**\n   * Creates search and taxonomy readers over the corresponding directories.\n   * \n   * <p>\n   * <b>NOTE:</b> you should only use this constructor if you commit and call\n   * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an\n   * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.\n   */\n  public SearcherTaxonomyManager(Directory indexDir, Directory taxoDir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    current = new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(indexDir)), taxoReader);\n    this.taxoWriter = null;\n    taxoEpoch = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#SearcherTaxonomyManager(Directory,Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates search and taxonomy readers over the corresponding directories.\n   * \n   * <p>\n   * <b>NOTE:</b> you should only use this constructor if you commit and call\n   * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an\n   * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.\n   */\n  public SearcherTaxonomyManager(Directory indexDir, Directory taxoDir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    current = new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(indexDir), null), taxoReader);\n    this.taxoWriter = null;\n    taxoEpoch = -1;\n  }\n\n","sourceOld":"  /**\n   * Creates search and taxonomy readers over the corresponding directories.\n   * \n   * <p>\n   * <b>NOTE:</b> you should only use this constructor if you commit and call\n   * {@link #maybeRefresh()} in the same thread. Otherwise it could lead to an\n   * unsync'd {@link IndexSearcher} and {@link TaxonomyReader} pair.\n   */\n  public SearcherTaxonomyManager(Directory indexDir, Directory taxoDir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    current = new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(indexDir)), taxoReader);\n    this.taxoWriter = null;\n    taxoEpoch = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["d47a51687a906464022060653be52ed62dfa2c18"],"d47a51687a906464022060653be52ed62dfa2c18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["d47a51687a906464022060653be52ed62dfa2c18","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"d47a51687a906464022060653be52ed62dfa2c18":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d47a51687a906464022060653be52ed62dfa2c18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}