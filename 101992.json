{"path":"src/java/org/apache/lucene/index/IndexWriter#doCommitBeforeMergeCFS(MergePolicy.OneMerge).mjava","commits":[{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doCommitBeforeMergeCFS(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"  /** This is called after merging a segment and before\n   *  building its CFS.  Return true if the files should be\n   *  sync'd.  If you return false, then the source segment\n   *  files that were merged cannot be deleted until the CFS\n   *  file is built & sync'd.  So, returning false consumes\n   *  more transient disk space, but saves performance of\n   *  not having to sync files which will shortly be deleted\n   *  anyway.\n   * @deprecated -- this will be removed in 3.0 when\n   * autoCommit is hardwired to false */\n  private synchronized boolean doCommitBeforeMergeCFS(MergePolicy.OneMerge merge) throws IOException {\n    long freeableBytes = 0;\n    final int size = merge.segments.size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      // It's only important to sync if the most recent\n      // commit actually references this segment, because if\n      // it doesn't, even without syncing we will free up\n      // the disk space:\n      Integer loc = (Integer) rollbackSegments.get(info);\n      if (loc != null) {\n        final SegmentInfo oldInfo = rollbackSegmentInfos.info(loc.intValue());\n        if (oldInfo.getUseCompoundFile() != info.getUseCompoundFile())\n          freeableBytes += info.sizeInBytes();\n      }\n    }\n    // If we would free up more than 1/3rd of the index by\n    // committing now, then do so:\n    long totalBytes = 0;\n    final int numSegments = segmentInfos.size();\n    for(int i=0;i<numSegments;i++)\n      totalBytes += segmentInfos.info(i).sizeInBytes();\n    if (3*freeableBytes > totalBytes)\n      return true;\n    else\n      return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doCommitBeforeMergeCFS(MergePolicy.OneMerge).mjava","sourceNew":null,"sourceOld":"  /** This is called after merging a segment and before\n   *  building its CFS.  Return true if the files should be\n   *  sync'd.  If you return false, then the source segment\n   *  files that were merged cannot be deleted until the CFS\n   *  file is built & sync'd.  So, returning false consumes\n   *  more transient disk space, but saves performance of\n   *  not having to sync files which will shortly be deleted\n   *  anyway.\n   * @deprecated -- this will be removed in 3.0 when\n   * autoCommit is hardwired to false */\n  private synchronized boolean doCommitBeforeMergeCFS(MergePolicy.OneMerge merge) throws IOException {\n    long freeableBytes = 0;\n    final int size = merge.segments.size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      // It's only important to sync if the most recent\n      // commit actually references this segment, because if\n      // it doesn't, even without syncing we will free up\n      // the disk space:\n      Integer loc = (Integer) rollbackSegments.get(info);\n      if (loc != null) {\n        final SegmentInfo oldInfo = rollbackSegmentInfos.info(loc.intValue());\n        if (oldInfo.getUseCompoundFile() != info.getUseCompoundFile())\n          freeableBytes += info.sizeInBytes();\n      }\n    }\n    // If we would free up more than 1/3rd of the index by\n    // committing now, then do so:\n    long totalBytes = 0;\n    final int numSegments = segmentInfos.size();\n    for(int i=0;i<numSegments;i++)\n      totalBytes += segmentInfos.info(i).sizeInBytes();\n    if (3*freeableBytes > totalBytes)\n      return true;\n    else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82780afe6097066eb5befb86e9432f077667e3d"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e82780afe6097066eb5befb86e9432f077667e3d":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}