{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      // First pass to find all prefix terms we should compile into the index:\n      List<PrefixTerm> prefixTerms;\n      if (minItemsInAutoPrefix != 0) {\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          throw new IllegalStateException(\"ranges can only be indexed with IndexOptions.DOCS (field: \" + fieldInfo.name + \")\");\n        }\n        prefixTerms = new AutoPrefixTermsWriter(terms, minItemsInAutoPrefix, maxItemsInAutoPrefix).prefixes;\n        //if (DEBUG) {\n        //  for(PrefixTerm term : prefixTerms) {\n        //    System.out.println(\"field=\" + fieldInfo.name + \" PREFIX TERM: \" + term);\n        //  }\n        //}\n      } else {\n        prefixTerms = null;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      int prefixTermUpto = 0;\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        // Insert (merge sort) next prefix term(s):\n        if (prefixTerms != null) {\n          while (prefixTermUpto < prefixTerms.size() && (term == null || prefixTerms.get(prefixTermUpto).compareTo(term) <= 0)) {\n            PrefixTerm prefixTerm = prefixTerms.get(prefixTermUpto);\n            //if (DEBUG) System.out.println(\"seg=\" + segment + \" field=\" + fieldInfo.name + \" NOW INSERT prefix=\" + prefixTerm);\n            termsWriter.write(prefixTerm.term, getAutoPrefixTermsEnum(terms, prefixTerm), prefixTerm);\n            prefixTermUpto++;\n          }\n        }\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, null);\n      }\n\n      assert prefixTerms == null || prefixTermUpto == prefixTerms.size();\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields, NormsProducer norms) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum, norms);\n      }\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment);\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write seg=\" + segment + \" field=\" + field);\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        //if (DEBUG) System.out.println(\"BTTW: next term \" + term);\n\n        if (term == null) {\n          break;\n        }\n\n        //if (DEBUG) System.out.println(\"write field=\" + fieldInfo.name + \" term=\" + brToString(term));\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n\n      //if (DEBUG) System.out.println(\"\\nBTTW.write done seg=\" + segment + \" field=\" + field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e8715d826e588419327562287d5d6a8040d63d6"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["31c8c009cea52067b0cf34f2ea666147e80b1461","3e8715d826e588419327562287d5d6a8040d63d6"],"622a708571e534680618b3c5e0c28ac539a47776":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["622a708571e534680618b3c5e0c28ac539a47776","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}