{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","commits":[{"id":"022a16646a72265e17bbad4aef83cd54efd15804","date":1499023964,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 2000));\n\n    int numDocs = atLeast(10000);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final AtomicInteger count = new AtomicInteger();\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n           while (count.getAndIncrement() < numDocs) {\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n              try {\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    assertEquals(\"lost \" + (numDocs - w.maxDoc()) + \" documents; maxBufferedDocs=\" + iwc.getMaxBufferedDocs(), numDocs, w.maxDoc());\n    w.close();\n             \n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(numDocs, r.maxDoc());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","date":1499066739,"type":0,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 2000));\n\n    int numDocs = atLeast(10000);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final AtomicInteger count = new AtomicInteger();\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n           while (count.getAndIncrement() < numDocs) {\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n              try {\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    assertEquals(\"lost \" + (numDocs - w.maxDoc()) + \" documents; maxBufferedDocs=\" + iwc.getMaxBufferedDocs(), numDocs, w.maxDoc());\n    w.close();\n             \n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(numDocs, r.maxDoc());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 2000));\n\n    int numDocs = atLeast(10000);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final AtomicInteger count = new AtomicInteger();\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n           while (count.getAndIncrement() < numDocs) {\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n              try {\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    assertEquals(\"lost \" + (numDocs - w.maxDoc()) + \" documents; maxBufferedDocs=\" + iwc.getMaxBufferedDocs(), numDocs, w.maxDoc());\n    w.close();\n             \n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(numDocs, r.maxDoc());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexManyDocuments#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 2000));\n\n    int numDocs = atLeast(10000);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final AtomicInteger count = new AtomicInteger();\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n           while (count.getAndIncrement() < numDocs) {\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n              try {\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    assertEquals(\"lost \" + (numDocs - w.getDocStats().maxDoc) + \" documents; maxBufferedDocs=\" + iwc.getMaxBufferedDocs(), numDocs, w.getDocStats().maxDoc);\n    w.close();\n             \n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(numDocs, r.maxDoc());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 2000));\n\n    int numDocs = atLeast(10000);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final AtomicInteger count = new AtomicInteger();\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n           while (count.getAndIncrement() < numDocs) {\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n              try {\n                w.addDocument(doc);\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    assertEquals(\"lost \" + (numDocs - w.maxDoc()) + \" documents; maxBufferedDocs=\" + iwc.getMaxBufferedDocs(), numDocs, w.maxDoc());\n    w.close();\n             \n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(numDocs, r.maxDoc());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["022a16646a72265e17bbad4aef83cd54efd15804"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"022a16646a72265e17bbad4aef83cd54efd15804":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","022a16646a72265e17bbad4aef83cd54efd15804"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","022a16646a72265e17bbad4aef83cd54efd15804"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["022a16646a72265e17bbad4aef83cd54efd15804","30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"022a16646a72265e17bbad4aef83cd54efd15804":["feb4029567b43f074ed7b6eb8fb126d355075dfd","30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"30c8e5574b55d57947e989443dfde611646530ee":[],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}