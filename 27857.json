{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","commits":[{"id":"61d55d0cc95bfc03461b5c355153ca28c49076eb","date":1515469157,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(ServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper(response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private ServletResponse closeShield(ServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper((HttpServletResponse) response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper(response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false : true : \"Attempted close of response output stream - never do this, you will spoil connection reuse and possibly disrupt a client\";\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield, as if by a {@link CloseShieldOutputStream}. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  private HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (testMode && !retry) {\n      return new HttpServletResponseWrapper(response) {\n        ServletOutputStream stream;\n        \n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n          // Lazy stream creation\n          if (stream == null) {\n            stream = new ServletOutputStreamWrapper(super.getOutputStream()) {\n              @Override\n              public void close() {\n                assert false : \"Attempted close of response output stream.\";\n              }\n            };\n          }\n          return stream;\n        }\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26df39da7d392b47a97822cdaca7c3b73c68de0e","date":1526099545,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_RESPONSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false : true : \"Attempted close of response output stream - never do this, you will spoil connection reuse and possibly disrupt a client\";\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"542a18f2bae05d76d7eb30b675528738510ef012","date":1526102119,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_RESPONSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert !Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert !Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#closeShield(HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") ? false\n                      : true : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","sourceOld":"  /**\n   * Wrap the response's output stream with a close shield. If this is a\n   * retry, we will assume that the stream has already been wrapped and do nothing.\n   *\n   * Only the container should ever actually close the servlet request stream.\n   *\n   * @param response The response to wrap.\n   * @param retry If this response corresponds to an original request or a retry.\n   * @return A response object with an {@link OutputStream} that will ignore calls to close.\n   */\n  public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {\n    if (!retry) {\n      return new HttpServletResponseWrapper(response) {\n\n        @Override\n        public ServletOutputStream getOutputStream() throws IOException {\n\n          return new ServletOutputStreamWrapper(super.getOutputStream()) {\n            @Override\n            public void close() {\n              // even though we skip closes, we let local tests know not to close so that a full understanding can take\n              // place\n              assert !Thread.currentThread().getStackTrace()[2].getClassName().matches(\n                  \"org\\\\.apache\\\\.(?:solr|lucene).*\") : CLOSE_STREAM_MSG;\n              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;\n            }\n          };\n        }\n\n      };\n    } else {\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"26df39da7d392b47a97822cdaca7c3b73c68de0e":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["542a18f2bae05d76d7eb30b675528738510ef012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"542a18f2bae05d76d7eb30b675528738510ef012":["26df39da7d392b47a97822cdaca7c3b73c68de0e"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"26df39da7d392b47a97822cdaca7c3b73c68de0e":["542a18f2bae05d76d7eb30b675528738510ef012"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"542a18f2bae05d76d7eb30b675528738510ef012":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["26df39da7d392b47a97822cdaca7c3b73c68de0e"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}