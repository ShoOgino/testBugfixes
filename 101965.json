{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeStringLight(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(Automata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeStringLight(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(Automata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = TestUtil.randomUnicodeString(random());\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["6613659748fe4411a7dcf85266e55db1f95f7315","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}