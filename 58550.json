{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#execute(Judge,SubmissionReport,PrintWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#execute(Judge,SubmissionReport,PrintWriter).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#execute(Judge,SubmissionReport,PrintWriter).mjava","sourceNew":"  /**\n   * Run the quality benchmark.\n   * @param judge the judge that can tell if a certain result doc is relevant for a certain quality query. \n   *        If null, no judgements would be made. Usually null for a submission run. \n   * @param submitRep submission report is created if non null.\n   * @param qualityLog If not null, quality run data would be printed for each query.\n   * @return QualityStats of each quality query that was executed.\n   * @throws Exception if quality benchmark failed to run.\n   */\n  public  QualityStats [] execute(Judge judge, SubmissionReport submitRep, \n                                  PrintWriter qualityLog) throws Exception {\n    int nQueries = Math.min(maxQueries, qualityQueries.length);\n    QualityStats stats[] = new QualityStats[nQueries]; \n    for (int i=0; i<nQueries; i++) {\n      QualityQuery qq = qualityQueries[i];\n      // generate query\n      Query q = qqParser.parse(qq);\n      // search with this query \n      long t1 = System.currentTimeMillis();\n      TopDocs td = searcher.search(q,null,maxResults);\n      long searchTime = System.currentTimeMillis()-t1;\n      //most likely we either submit or judge, but check both \n      if (judge!=null) {\n        stats[i] = analyzeQueryResults(qq, q, td, judge, qualityLog, searchTime);\n      }\n      if (submitRep!=null) {\n        submitRep.report(qq,td,docNameField,searcher);\n      }\n    } \n    if (submitRep!=null) {\n      submitRep.flush();\n    }\n    return stats;\n  }\n\n","sourceOld":"  /**\n   * Run the quality benchmark.\n   * @param judge the judge that can tell if a certain result doc is relevant for a certain quality query. \n   *        If null, no judgements would be made. Usually null for a submission run. \n   * @param submitRep submission report is created if non null.\n   * @param qualityLog If not null, quality run data would be printed for each query.\n   * @return QualityStats of each quality query that was executed.\n   * @throws Exception if quality benchmark failed to run.\n   */\n  public  QualityStats [] execute(Judge judge, SubmissionReport submitRep, \n                                  PrintWriter qualityLog) throws Exception {\n    int nQueries = Math.min(maxQueries, qualityQueries.length);\n    QualityStats stats[] = new QualityStats[nQueries]; \n    for (int i=0; i<nQueries; i++) {\n      QualityQuery qq = qualityQueries[i];\n      // generate query\n      Query q = qqParser.parse(qq);\n      // search with this query \n      long t1 = System.currentTimeMillis();\n      TopDocs td = searcher.search(q,null,maxResults);\n      long searchTime = System.currentTimeMillis()-t1;\n      //most likely we either submit or judge, but check both \n      if (judge!=null) {\n        stats[i] = analyzeQueryResults(qq, q, td, judge, qualityLog, searchTime);\n      }\n      if (submitRep!=null) {\n        submitRep.report(qq,td,docNameField,searcher);\n      }\n    } \n    if (submitRep!=null) {\n      submitRep.flush();\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#execute(Judge,SubmissionReport,PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#execute(Judge,SubmissionReport,PrintWriter).mjava","sourceNew":"  /**\n   * Run the quality benchmark.\n   * @param judge the judge that can tell if a certain result doc is relevant for a certain quality query. \n   *        If null, no judgements would be made. Usually null for a submission run. \n   * @param submitRep submission report is created if non null.\n   * @param qualityLog If not null, quality run data would be printed for each query.\n   * @return QualityStats of each quality query that was executed.\n   * @throws Exception if quality benchmark failed to run.\n   */\n  public  QualityStats [] execute(Judge judge, SubmissionReport submitRep, \n                                  PrintWriter qualityLog) throws Exception {\n    int nQueries = Math.min(maxQueries, qualityQueries.length);\n    QualityStats stats[] = new QualityStats[nQueries]; \n    for (int i=0; i<nQueries; i++) {\n      QualityQuery qq = qualityQueries[i];\n      // generate query\n      Query q = qqParser.parse(qq);\n      // search with this query \n      long t1 = System.currentTimeMillis();\n      TopDocs td = searcher.search(q,maxResults);\n      long searchTime = System.currentTimeMillis()-t1;\n      //most likely we either submit or judge, but check both \n      if (judge!=null) {\n        stats[i] = analyzeQueryResults(qq, q, td, judge, qualityLog, searchTime);\n      }\n      if (submitRep!=null) {\n        submitRep.report(qq,td,docNameField,searcher);\n      }\n    } \n    if (submitRep!=null) {\n      submitRep.flush();\n    }\n    return stats;\n  }\n\n","sourceOld":"  /**\n   * Run the quality benchmark.\n   * @param judge the judge that can tell if a certain result doc is relevant for a certain quality query. \n   *        If null, no judgements would be made. Usually null for a submission run. \n   * @param submitRep submission report is created if non null.\n   * @param qualityLog If not null, quality run data would be printed for each query.\n   * @return QualityStats of each quality query that was executed.\n   * @throws Exception if quality benchmark failed to run.\n   */\n  public  QualityStats [] execute(Judge judge, SubmissionReport submitRep, \n                                  PrintWriter qualityLog) throws Exception {\n    int nQueries = Math.min(maxQueries, qualityQueries.length);\n    QualityStats stats[] = new QualityStats[nQueries]; \n    for (int i=0; i<nQueries; i++) {\n      QualityQuery qq = qualityQueries[i];\n      // generate query\n      Query q = qqParser.parse(qq);\n      // search with this query \n      long t1 = System.currentTimeMillis();\n      TopDocs td = searcher.search(q,null,maxResults);\n      long searchTime = System.currentTimeMillis()-t1;\n      //most likely we either submit or judge, but check both \n      if (judge!=null) {\n        stats[i] = analyzeQueryResults(qq, q, td, judge, qualityLog, searchTime);\n      }\n      if (submitRep!=null) {\n        submitRep.report(qq,td,docNameField,searcher);\n      }\n    } \n    if (submitRep!=null) {\n      submitRep.flush();\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}