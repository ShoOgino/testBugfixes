{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQWrapper(ThrowingRunnable,ThrowingRunnable).mjava","commits":[{"id":"7e2e9e62efb6c79c406fe3c2b8bc2739fa192e40","date":1487267132,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQWrapper(ThrowingRunnable,ThrowingRunnable).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQWrapper(RunnableWithException,RunnableWithException).mjava","sourceNew":"  private void testLogReplayWithReorderedDBQWrapper(ThrowingRunnable act, ThrowingRunnable assrt) throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      // Adding some documents\n      act.run();\n\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // Asserting\n      assrt.run();\n\n    } catch (Throwable thr) {\n      throw new Exception(thr);\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  private void testLogReplayWithReorderedDBQWrapper(RunnableWithException act, RunnableWithException assrt) throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      // Adding some documents\n      act.run();\n\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // Asserting\n      assrt.run();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQWrapper(ThrowingRunnable,ThrowingRunnable).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithReorderedDBQWrapper(ThrowingRunnable,ThrowingRunnable).mjava","sourceNew":"  private void testLogReplayWithReorderedDBQWrapper(ThrowingRunnable act, ThrowingRunnable assrt) throws Exception {\n\n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      // Adding some documents\n      act.run();\n\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // Asserting\n      assrt.run();\n\n    } catch (Throwable thr) {\n      throw new Exception(thr);\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  private void testLogReplayWithReorderedDBQWrapper(ThrowingRunnable act, ThrowingRunnable assrt) throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      // Adding some documents\n      act.run();\n\n\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==0\");\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // Asserting\n      assrt.run();\n\n    } catch (Throwable thr) {\n      throw new Exception(thr);\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["7e2e9e62efb6c79c406fe3c2b8bc2739fa192e40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"7e2e9e62efb6c79c406fe3c2b8bc2739fa192e40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2e9e62efb6c79c406fe3c2b8bc2739fa192e40"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e2e9e62efb6c79c406fe3c2b8bc2739fa192e40":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}