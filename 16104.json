{"path":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory postings format\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with Direct postings format\", fieldFormat.equals(\"Direct\"));\n      assumeFalse(\"This test cannot run with SimpleText postings format\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","172cf08877d0e6738a51edd238c4dc5ffc088345"],"24f89e8a6aac05753cde4c83d62a74356098200d":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["172cf08877d0e6738a51edd238c4dc5ffc088345"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["172cf08877d0e6738a51edd238c4dc5ffc088345"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","172cf08877d0e6738a51edd238c4dc5ffc088345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"6613659748fe4411a7dcf85266e55db1f95f7315":["24f89e8a6aac05753cde4c83d62a74356098200d"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["aba371508186796cc6151d8223a5b4e16d02e26e","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}