{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) throws IOException {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":["084884d4602f4d1c7411eab29e897e349ce62675"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.name).count;\n    final LegacyBinaryDocValues binary = getLegacyBinary(field);\n    NumericEntry entry = ords.get(field.name);\n    final LongValues ordinals = getNumeric(entry);\n    if (entry.format == SPARSE_COMPRESSED) {\n      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;\n      return new SortedDocValues() {\n\n        @Override\n        public int ordValue() {\n          return (int) sparseValues.longValue();\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          return binary.get(ord);\n        }\n\n        @Override\n        public int getValueCount() {\n          return valueCount;\n        }\n\n        @Override\n        public int docID() {\n          return sparseValues.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return sparseValues.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return sparseValues.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return sparseValues.cost();\n        }\n\n      };\n    }\n    return new SortedDocValues() {\n      private int docID = -1;\n      private int ord;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        while (true) {\n          docID++;\n          if (docID == maxDoc) {\n            docID = NO_MORE_DOCS;\n            break;\n          }\n          ord = (int) ordinals.get(docID);\n          if (ord != -1) {\n            break;\n          }\n        }\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= maxDoc) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        } else {\n          docID = target-1;\n          return nextDoc();\n        }\n      }\n          \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public long cost() {\n        // TODO\n        return 0;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) throws IOException {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedEntry entry = sorted.get(field.name);\n    return getSorted(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"f7558b5077dd4abd457be151475f13b541f4f13e":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["f7558b5077dd4abd457be151475f13b541f4f13e"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["23e44daeaa8b89694d10df5999956c8e14a7dd09","03e17b020972a0d6e8d6823f545571a66646a167"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7558b5077dd4abd457be151475f13b541f4f13e":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}