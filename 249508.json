{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","commits":[{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.setDisableCoord(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.setDisableCoord(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestStandardQP#testNewFieldQuery().mjava","sourceNew":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","sourceOld":"  @Override\n  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    StandardQueryParser dumb = getParser(new Analyzer1());\n    BooleanQuery.Builder expanded = new BooleanQuery.Builder();\n    expanded.setDisableCoord(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")),\n        BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")),\n        BooleanClause.Occur.SHOULD);\n    assertEquals(expanded.build(), dumb.parse(\"\\\"dogs\\\"\",\"field\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded.build(), dumb.parse(\"dogs\",\"field\"));\n    \n    /**\n     * custom behavior, the synonyms are expanded, unless you use quote operator\n     */\n    //TODO test something like \"SmartQueryParser()\"\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}