{"path":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","commits":[{"id":"c8a8645b10693962a3b9984a15c27ce1e790565b","date":1207594786,"type":1,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  public void testMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6868c259eb4c44f9a4aaa824280e49dff8b5891","date":1251379465,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6868c259eb4c44f9a4aaa824280e49dff8b5891":["c8a8645b10693962a3b9984a15c27ce1e790565b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f6868c259eb4c44f9a4aaa824280e49dff8b5891"],"c8a8645b10693962a3b9984a15c27ce1e790565b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6868c259eb4c44f9a4aaa824280e49dff8b5891":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c8a8645b10693962a3b9984a15c27ce1e790565b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c8a8645b10693962a3b9984a15c27ce1e790565b":["f6868c259eb4c44f9a4aaa824280e49dff8b5891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}