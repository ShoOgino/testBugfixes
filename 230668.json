{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9381336c4dc91cc20829fb628036012963dc440","date":1515945231,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"O'Reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"Jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"O'Reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"O'Reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"Jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"O'Reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc05d435c845d2b3c7c10faeb6674cc37ad3527","date":1519133993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"O'Reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"Jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"O'Reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a3e7b7017a06c652c79a772b1259178f6908877","date":1522103499,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"O'Reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"Jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"O'Reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testApostrophesSA().mjava","sourceNew":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"O'Reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"Jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"O'Reilly's\"});\n  }\n\n","sourceOld":"  public void testApostrophesSA() throws Exception {\n    // internal apostrophes: O'Reilly, you're, O'Reilly's\n    assertAnalyzesTo(a, \"O'Reilly\", new String[]{\"o'reilly\"});\n    assertAnalyzesTo(a, \"you're\", new String[]{\"you're\"});\n    assertAnalyzesTo(a, \"she's\", new String[]{\"she's\"});\n    assertAnalyzesTo(a, \"Jim's\", new String[]{\"jim's\"});\n    assertAnalyzesTo(a, \"don't\", new String[]{\"don't\"});\n    assertAnalyzesTo(a, \"O'Reilly's\", new String[]{\"o'reilly's\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a9381336c4dc91cc20829fb628036012963dc440"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a3e7b7017a06c652c79a772b1259178f6908877":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9381336c4dc91cc20829fb628036012963dc440":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527","1a3e7b7017a06c652c79a772b1259178f6908877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b94236357aaa22b76c10629851fe4e376e0cea82","a9381336c4dc91cc20829fb628036012963dc440"],"1a3e7b7017a06c652c79a772b1259178f6908877":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["1a3e7b7017a06c652c79a772b1259178f6908877","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a9381336c4dc91cc20829fb628036012963dc440":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}