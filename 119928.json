{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}