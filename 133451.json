{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(Path).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(Path).mjava","pathOld":"/dev/null","sourceNew":"  /** Changes incoming {@link ByteSequencesWriter} file to to fixed-width-per-entry file, because we need to be able to slice\n   *  as we recurse in {@link #build}. */\n  private LatLonWriter convertToFixedWidth(Path in) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.grow(BYTES_PER_DOC);\n    BytesRef bytes = scratch.get();\n    ByteArrayDataInput dataReader = new ByteArrayDataInput();\n\n    OfflineSorter.ByteSequencesReader reader = null;\n    LatLonWriter sortedWriter = null;\n    boolean success = false;\n    try {\n      reader = new OfflineSorter.ByteSequencesReader(in);\n      sortedWriter = getWriter(pointCount);\n      for (long i=0;i<pointCount;i++) {\n        boolean result = reader.read(scratch);\n        assert result;\n        dataReader.reset(bytes.bytes, bytes.offset, bytes.length);\n        int latEnc = dataReader.readInt();\n        int lonEnc = dataReader.readInt();\n        int docID = dataReader.readVInt();\n        long ord = dataReader.readVLong();\n        assert docID >= 0: \"docID=\" + docID;\n        assert latEnc > Integer.MIN_VALUE;\n        assert latEnc < Integer.MAX_VALUE;\n        assert lonEnc > Integer.MIN_VALUE;\n        assert lonEnc < Integer.MAX_VALUE;\n        sortedWriter.append(latEnc, lonEnc, ord, docID);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(sortedWriter, reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n      }\n    }\n\n    return sortedWriter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f558588ddbab152a12681d16572d483aa59616b","date":1439595052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(Path).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(Path).mjava","sourceNew":"  /** Changes incoming {@link ByteSequencesWriter} file to to fixed-width-per-entry file, because we need to be able to slice\n   *  as we recurse in {@link #build}. */\n  private LatLonWriter convertToFixedWidth(Path in) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.grow(BYTES_PER_DOC);\n    BytesRef bytes = scratch.get();\n    ByteArrayDataInput dataReader = new ByteArrayDataInput();\n\n    OfflineSorter.ByteSequencesReader reader = null;\n    LatLonWriter sortedWriter = null;\n    boolean success = false;\n    try {\n      reader = new OfflineSorter.ByteSequencesReader(in);\n      sortedWriter = getWriter(pointCount);\n      for (long i=0;i<pointCount;i++) {\n        boolean result = reader.read(scratch);\n        assert result;\n        dataReader.reset(bytes.bytes, bytes.offset, bytes.length);\n        int latEnc = dataReader.readInt();\n        int lonEnc = dataReader.readInt();\n        int docID = dataReader.readVInt();\n        long ord = dataReader.readVLong();\n        assert docID >= 0: \"docID=\" + docID;\n        assert latEnc > Integer.MIN_VALUE;\n        assert latEnc < Integer.MAX_VALUE;\n        assert lonEnc > Integer.MIN_VALUE;\n        assert lonEnc < Integer.MAX_VALUE;\n        sortedWriter.append(latEnc, lonEnc, ord, docID);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(sortedWriter, reader);\n      } else {\n        IOUtils.closeWhileHandlingException(sortedWriter, reader);\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n      }\n    }\n\n    return sortedWriter;\n  }\n\n","sourceOld":"  /** Changes incoming {@link ByteSequencesWriter} file to to fixed-width-per-entry file, because we need to be able to slice\n   *  as we recurse in {@link #build}. */\n  private LatLonWriter convertToFixedWidth(Path in) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.grow(BYTES_PER_DOC);\n    BytesRef bytes = scratch.get();\n    ByteArrayDataInput dataReader = new ByteArrayDataInput();\n\n    OfflineSorter.ByteSequencesReader reader = null;\n    LatLonWriter sortedWriter = null;\n    boolean success = false;\n    try {\n      reader = new OfflineSorter.ByteSequencesReader(in);\n      sortedWriter = getWriter(pointCount);\n      for (long i=0;i<pointCount;i++) {\n        boolean result = reader.read(scratch);\n        assert result;\n        dataReader.reset(bytes.bytes, bytes.offset, bytes.length);\n        int latEnc = dataReader.readInt();\n        int lonEnc = dataReader.readInt();\n        int docID = dataReader.readVInt();\n        long ord = dataReader.readVLong();\n        assert docID >= 0: \"docID=\" + docID;\n        assert latEnc > Integer.MIN_VALUE;\n        assert latEnc < Integer.MAX_VALUE;\n        assert lonEnc > Integer.MIN_VALUE;\n        assert lonEnc < Integer.MAX_VALUE;\n        sortedWriter.append(latEnc, lonEnc, ord, docID);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(sortedWriter, reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n      }\n    }\n\n    return sortedWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#convertToFixedWidth(Path).mjava","sourceNew":"  /** Changes incoming {@link ByteSequencesWriter} file to to fixed-width-per-entry file, because we need to be able to slice\n   *  as we recurse in {@link #build}. */\n  private LatLonWriter convertToFixedWidth(String in) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.grow(BYTES_PER_DOC);\n    BytesRef bytes = scratch.get();\n    ByteArrayDataInput dataReader = new ByteArrayDataInput();\n\n    OfflineSorter.ByteSequencesReader reader = null;\n    LatLonWriter sortedWriter = null;\n    boolean success = false;\n    try {\n      reader = new OfflineSorter.ByteSequencesReader(tempDir.openInput(in, IOContext.READONCE));\n      sortedWriter = getWriter(pointCount);\n      for (long i=0;i<pointCount;i++) {\n        boolean result = reader.read(scratch);\n        assert result;\n        dataReader.reset(bytes.bytes, bytes.offset, bytes.length);\n        int latEnc = dataReader.readInt();\n        int lonEnc = dataReader.readInt();\n        int docID = dataReader.readVInt();\n        long ord = dataReader.readVLong();\n        assert docID >= 0: \"docID=\" + docID;\n        assert latEnc > Integer.MIN_VALUE;\n        assert latEnc < Integer.MAX_VALUE;\n        assert lonEnc > Integer.MIN_VALUE;\n        assert lonEnc < Integer.MAX_VALUE;\n        sortedWriter.append(latEnc, lonEnc, ord, docID);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(sortedWriter, reader);\n      } else {\n        IOUtils.closeWhileHandlingException(sortedWriter, reader);\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n      }\n    }\n\n    return sortedWriter;\n  }\n\n","sourceOld":"  /** Changes incoming {@link ByteSequencesWriter} file to to fixed-width-per-entry file, because we need to be able to slice\n   *  as we recurse in {@link #build}. */\n  private LatLonWriter convertToFixedWidth(Path in) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    scratch.grow(BYTES_PER_DOC);\n    BytesRef bytes = scratch.get();\n    ByteArrayDataInput dataReader = new ByteArrayDataInput();\n\n    OfflineSorter.ByteSequencesReader reader = null;\n    LatLonWriter sortedWriter = null;\n    boolean success = false;\n    try {\n      reader = new OfflineSorter.ByteSequencesReader(in);\n      sortedWriter = getWriter(pointCount);\n      for (long i=0;i<pointCount;i++) {\n        boolean result = reader.read(scratch);\n        assert result;\n        dataReader.reset(bytes.bytes, bytes.offset, bytes.length);\n        int latEnc = dataReader.readInt();\n        int lonEnc = dataReader.readInt();\n        int docID = dataReader.readVInt();\n        long ord = dataReader.readVLong();\n        assert docID >= 0: \"docID=\" + docID;\n        assert latEnc > Integer.MIN_VALUE;\n        assert latEnc < Integer.MAX_VALUE;\n        assert lonEnc > Integer.MIN_VALUE;\n        assert lonEnc < Integer.MAX_VALUE;\n        sortedWriter.append(latEnc, lonEnc, ord, docID);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(sortedWriter, reader);\n      } else {\n        IOUtils.closeWhileHandlingException(sortedWriter, reader);\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n      }\n    }\n\n    return sortedWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f558588ddbab152a12681d16572d483aa59616b":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["4f558588ddbab152a12681d16572d483aa59616b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f558588ddbab152a12681d16572d483aa59616b":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["4f558588ddbab152a12681d16572d483aa59616b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}