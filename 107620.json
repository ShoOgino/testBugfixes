{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryTree#disjunction(List[Function[TermWeightor,QueryTree]],TermWeightor).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/QueryTree#disjunction(List[Function[TermWeightor,QueryTree]],TermWeightor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a disjunction of a set of child nodes\n   */\n  public static QueryTree disjunction(List<Function<TermWeightor, QueryTree>> children, TermWeightor weightor) {\n    if (children.size() == 0) {\n      throw new IllegalArgumentException(\"Cannot build a disjunction with no children\");\n    }\n    if (children.size() == 1) {\n      return children.get(0).apply(weightor);\n    }\n    List<QueryTree> qt = children.stream()\n        .map(f -> f.apply(weightor)).collect(Collectors.toList());\n    Optional<QueryTree> firstAnyChild = qt.stream().filter(q -> q.weight() == 0).findAny();\n    // if any of the children is an ANY node, just return that, otherwise build the disjunction\n    return firstAnyChild.orElseGet(() -> new DisjunctionQueryTree(qt));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}