{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","commits":[{"id":"13734b36bfd631ed6a46b961df376f679e8a3f57","date":1473743967,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#setCommitData(IndexWriter).mjava","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  private void setCommitData(IndexWriter iw) {\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(SolrIndexWriter.COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#setCommitData(IndexWriter).mjava","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  private void setCommitData(IndexWriter iw) {\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(SolrIndexWriter.COMMIT_TIME_MSEC_KEY,\n        String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw, long commitCommandVersion) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString() + \" commitCommandVersion:\"+commitCommandVersion);\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    commitData.put(COMMIT_COMMAND_VERSION, String.valueOf(commitCommandVersion));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw, long commitCommandVersion) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString() + \" commitCommandVersion:\"+commitCommandVersion);\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    commitData.put(COMMIT_COMMAND_VERSION, String.valueOf(commitCommandVersion));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#setCommitData(IndexWriter).mjava","sourceNew":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw, long commitCommandVersion) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString() + \" commitCommandVersion:\"+commitCommandVersion);\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    commitData.put(COMMIT_COMMAND_VERSION, String.valueOf(commitCommandVersion));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Need currentTimeMillis, commit time should be used only for debugging purposes, \" +\n      \" but currently suspiciously used for replication as well\")\n  public static void setCommitData(IndexWriter iw) {\n    log.info(\"Calling setCommitData with IW:\" + iw.toString());\n    final Map<String,String> commitData = new HashMap<>();\n    commitData.put(COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));\n    iw.setLiveCommitData(commitData.entrySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13734b36bfd631ed6a46b961df376f679e8a3f57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"be320990bdc77e643388fa801e75017f19289c42":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ab68488225b6a6c357dda72ed11dedca9914a192":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be320990bdc77e643388fa801e75017f19289c42"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","13734b36bfd631ed6a46b961df376f679e8a3f57"]},"commit2Childs":{"13734b36bfd631ed6a46b961df376f679e8a3f57":["89424def13674ea17829b41c5883c54ecc31a132"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13734b36bfd631ed6a46b961df376f679e8a3f57","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"be320990bdc77e643388fa801e75017f19289c42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}