{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cc809885aee4d16fe14baa327d43c5592ec55c","date":1363795545,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document d = new Document();\n    d.add(newTextField(\"f\", \"a a b\", Field.Store.NO));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))) != -1);\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n      assertEquals(2, r.totalTermFreq(new Term(\"f\", new BytesRef(\"a\"))));\n      assertEquals(1, r.totalTermFreq(new Term(\"f\", new BytesRef(\"b\"))));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cc809885aee4d16fe14baa327d43c5592ec55c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["10cc809885aee4d16fe14baa327d43c5592ec55c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["10cc809885aee4d16fe14baa327d43c5592ec55c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"10cc809885aee4d16fe14baa327d43c5592ec55c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}