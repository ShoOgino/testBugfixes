{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_INDEX_EXTENSION);\n      if (dir.fileExists(idxFile)) { // TODO is this correct? could be initialized lazy\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      if(idxOut != null) { // called after flush - so this must be initialized if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_INDEX_EXTENSION);\n      if (dir.fileExists(idxFile)) { // TODO is this correct? could be initialized lazy\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n                            // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      if(idxOut != null) { // called after flush - so this must be initialized if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\", DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n                            // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\", DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\", DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX, DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, \"\", DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, \"\",\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX, DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX, DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#files(Collection[String]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void files(Collection<String> files) throws IOException {\n      assert datOut != null;\n      files.add(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX, DATA_EXTENSION));\n      if (idxOut != null) { // called after flush - so this must be initialized\n        // if needed or present\n        final String idxFile = IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n            INDEX_EXTENSION);\n        files.add(idxFile);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7b91922b55d15444d554721b352861d028eb8278":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d84736c4614acce6720851cbd2c823d7cd516e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["7b91922b55d15444d554721b352861d028eb8278"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["b5c559c875836474bafae7243263d93b1b1965db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"b5c559c875836474bafae7243263d93b1b1965db":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7b91922b55d15444d554721b352861d028eb8278","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["b5c559c875836474bafae7243263d93b1b1965db"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"b5c559c875836474bafae7243263d93b1b1965db":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}