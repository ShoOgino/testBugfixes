{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testSingleCollector().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testSingleCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testSingleCollector().mjava","sourceNew":"  @Test\n  public void testSingleCollector() throws Exception {\n    // Tests that if a single Collector is input, it is returned (and not MultiCollector).\n    DummyCollector dc = new DummyCollector();\n    assertSame(dc, MultiCollector.wrap(dc));\n    assertSame(dc, MultiCollector.wrap(dc, null));\n  }\n\n","sourceOld":"  @Test\n  public void testSingleCollector() throws Exception {\n    // Tests that if a single Collector is input, it is returned (and not MultiCollector).\n    DummyCollector dc = new DummyCollector();\n    assertSame(dc, MultiCollector.wrap(dc));\n    assertSame(dc, MultiCollector.wrap(dc, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSingleCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testSingleCollector().mjava","sourceNew":"  @Test\n  public void testSingleCollector() throws Exception {\n    // Tests that if a single Collector is input, it is returned (and not MultiCollector).\n    DummyCollector dc = new DummyCollector();\n    assertSame(dc, MultiCollector.wrap(dc));\n    assertSame(dc, MultiCollector.wrap(dc, null));\n  }\n\n","sourceOld":"  @Test\n  public void testSingleCollector() throws Exception {\n    // Tests that if a single Collector is input, it is returned (and not MultiCollector).\n    DummyCollector dc = new DummyCollector();\n    assertSame(dc, MultiCollector.wrap(dc));\n    assertSame(dc, MultiCollector.wrap(dc, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}