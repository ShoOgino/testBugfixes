{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarity +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarity +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarity +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}