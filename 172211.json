{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"_EXCEPTION_\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(this.baseUrl + \":\" + msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw e;\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      e.printStackTrace();\n      throw new IOException(this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","bugFix":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b","91814ce09be68efd0626969632e79ae47d8876d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"_EXCEPTION_\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(this.baseUrl + \":\" + msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw e;\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      e.printStackTrace();\n      throw new IOException(this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","date":1478163495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = jsonTupleStream.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        return Tuple.EOF();\n      } else {\n\n        String msg = (String) fields.get(StreamParams.EXCEPTION);\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        Map m = new HashMap();\n        m.put(\"EOF\", true);\n        return new Tuple(m);\n      } else {\n\n        String msg = (String) fields.get(\"EXCEPTION\");\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  @SuppressWarnings({\"unchecked\"})\n  public Tuple read() throws IOException {\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        return Tuple.EOF();\n      } else {\n\n        String msg = (String) fields.get(StreamParams.EXCEPTION);\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    try {\n      Map fields = tupleStreamParser.next();\n\n      if (fields == null) {\n        //Return the EOF tuple.\n        return Tuple.EOF();\n      } else {\n\n        String msg = (String) fields.get(StreamParams.EXCEPTION);\n        if (msg != null) {\n          HandledException ioException = new HandledException(msg);\n          throw ioException;\n        }\n\n        if (trace) {\n          fields.put(\"_CORE_\", this.baseUrl);\n          if(slice != null) {\n            fields.put(\"_SLICE_\", slice);\n          }\n        }\n\n        if (fieldMappings != null) {\n          fields = mapFields(fields, fieldMappings);\n        }\n        return new Tuple(fields);\n      }\n    } catch (HandledException e) {\n      throw new IOException(\"--> \"+this.baseUrl+\":\"+e.getMessage());\n    } catch (Exception e) {\n      //The Stream source did not provide an exception in a format that the SolrStream could propagate.\n      throw new IOException(\"--> \"+this.baseUrl+\": An exception has occurred on the server, refer to server log for details.\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"73450c0955930295d34703e7ddbfc6973b7a121a":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["73450c0955930295d34703e7ddbfc6973b7a121a"],"b940572a59da1b42b6c20ab5278155b12816807a":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["10b9c6c42133576daaccbd79bd04c88511b9caca","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"804a8d5358fe7b7563b85ee7838714d720b89272":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["9720b151fde2073f4e401450f4574e5f31c2d0ff","804a8d5358fe7b7563b85ee7838714d720b89272"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}