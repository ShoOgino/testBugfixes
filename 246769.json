{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":null,"sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"/dev/null","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentCacheKey,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentCacheKey,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1ea6b128a9ab931c83254ad0a4248ae09d81fa4","date":1314791970,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      Iterator<Map.Entry<SegmentCacheKey,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n\n        Map.Entry<SegmentCacheKey,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit();\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit();\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit();\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":null,"sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for(Map.Entry<SegmentCacheKey,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo(), \"key=\" + ent.getKey());\n          sr.doCommit();\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n\n      readerMap.clear();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1085ea837da8f1e96697e17cf73e1d08e7329261","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["1085ea837da8f1e96697e17cf73e1d08e7329261","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","1085ea837da8f1e96697e17cf73e1d08e7329261"],"c1ea6b128a9ab931c83254ad0a4248ae09d81fa4":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1085ea837da8f1e96697e17cf73e1d08e7329261","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["c1ea6b128a9ab931c83254ad0a4248ae09d81fa4"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c1ea6b128a9ab931c83254ad0a4248ae09d81fa4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","e1f693ce507c40f77e3a92acd16c6b79cdd730e4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1085ea837da8f1e96697e17cf73e1d08e7329261","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}