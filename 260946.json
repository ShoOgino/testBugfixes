{"path":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","commits":[{"id":"ccf7fc9b3111449ddc1a53959fd3b922bafcd508","date":1330021629,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"/dev/null","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) throws Exception {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"/dev/null","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) throws Exception {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","sourceOld":"  private MultiPhraseQuery randomPhraseQuery(long seed) throws Exception {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","bugFix":["ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","sourceOld":"  private MultiPhraseQuery randomPhraseQuery(long seed) throws Exception {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","sourceOld":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = _TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = _TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) _TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += _TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery.Builder pqb = new MultiPhraseQuery.Builder();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pqb.add(terms, position);\n      position += TestUtil.nextInt(random, 1, 3);\n    }\n    return pqb.build();\n  }\n\n","sourceOld":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#randomPhraseQuery(long).mjava","sourceNew":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery.Builder pqb = new MultiPhraseQuery.Builder();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pqb.add(terms, position);\n      position += TestUtil.nextInt(random, 1, 3);\n    }\n    return pqb.build();\n  }\n\n","sourceOld":"  private MultiPhraseQuery randomPhraseQuery(long seed) {\n    Random random = new Random(seed);\n    int length = TestUtil.nextInt(random, 2, 5);\n    MultiPhraseQuery pq = new MultiPhraseQuery();\n    int position = 0;\n    for (int i = 0; i < length; i++) {\n      int depth = TestUtil.nextInt(random, 1, 3);\n      Term terms[] = new Term[depth];\n      for (int j = 0; j < depth; j++) {\n        terms[j] = new Term(\"field\", \"\" + (char) TestUtil.nextInt(random, 'a', 'z'));\n      }\n      pq.add(terms, position);\n      position += TestUtil.nextInt(random, 1, 3);\n    }\n    return pq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["6613659748fe4411a7dcf85266e55db1f95f7315"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["ccf7fc9b3111449ddc1a53959fd3b922bafcd508","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["6613659748fe4411a7dcf85266e55db1f95f7315","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"ccf7fc9b3111449ddc1a53959fd3b922bafcd508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccf7fc9b3111449ddc1a53959fd3b922bafcd508":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}