{"path":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1640a619bcb2540ce0703e0db764ce7327c1a5","date":1321704123,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToRawLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6","date":1321706781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * The sort order (including {@link Double#NaN}) is defined by\n   * {@link Double#compareTo}; {@code NaN} is greater than positive infinity.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#doubleToSortableLong(double).mjava","sourceNew":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * The sort order (including {@link Double#NaN}) is defined by\n   * {@link Double#compareTo}; {@code NaN} is greater than positive infinity.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Converts a <code>double</code> value to a sortable signed <code>long</code>.\n   * The value is converted by getting their IEEE 754 floating-point &quot;double format&quot;\n   * bit layout and then some bits are swapped, to be able to compare the result as long.\n   * By this the precision is not reduced, but the value can easily used as a long.\n   * The sort order (including {@link Double#NaN}) is defined by\n   * {@link Double#compareTo}; {@code NaN} is greater than positive infinity.\n   * @see #sortableLongToDouble\n   */\n  public static long doubleToSortableLong(double val) {\n    long f = Double.doubleToLongBits(val);\n    if (f<0) f ^= 0x7fffffffffffffffL;\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}