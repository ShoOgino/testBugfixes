{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","commits":[{"id":"92ff363eabbaa0b7706976aea7997bb2f620caa0","date":1412866130,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","pathOld":"/dev/null","sourceNew":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    type.setIndexed(r.nextBoolean());\n    if (type.indexed()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","pathOld":"/dev/null","sourceNew":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    type.setIndexed(r.nextBoolean());\n    if (type.indexed()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","sourceNew":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    if (r.nextBoolean()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","sourceOld":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    type.setIndexed(r.nextBoolean());\n    if (type.indexed()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","sourceNew":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    if (r.nextBoolean()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","sourceOld":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    type.setIndexed(r.nextBoolean());\n    if (type.indexed()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#randomFieldType(Random).mjava","sourceNew":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    if (r.nextBoolean()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValuesType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","sourceOld":"  private final IndexableFieldType randomFieldType(Random r) {\n    FieldType type = new FieldType();\n    \n    if (r.nextBoolean()) {\n      IndexOptions values[] = IndexOptions.values();\n      type.setIndexOptions(values[r.nextInt(values.length)]);\n      type.setOmitNorms(r.nextBoolean());\n      \n      if (r.nextBoolean()) {\n        type.setStoreTermVectors(true);\n        if (type.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          type.setStoreTermVectorPositions(r.nextBoolean());\n          type.setStoreTermVectorOffsets(r.nextBoolean());\n          if (type.storeTermVectorPositions()) {\n            type.setStoreTermVectorPayloads(r.nextBoolean());\n          }\n        }\n      }\n    }\n    \n    if (r.nextBoolean()) {\n      DocValuesType values[] = getDocValuesTypes();\n      type.setDocValueType(values[r.nextInt(values.length)]);\n    }\n        \n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["3184874f7f3aca850248483485b4995343066875"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3184874f7f3aca850248483485b4995343066875":["92ff363eabbaa0b7706976aea7997bb2f620caa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["55980207f1977bd1463465de1659b821347e2fa8","3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}