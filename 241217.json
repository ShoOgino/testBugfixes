{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      // nocommit cutover to per-segment comparison\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertEquals(leftValues.size(), rightValues.size());\n          assertEquals(leftValues.maxLength(), rightValues.maxLength());\n          assertEquals(leftValues.isFixedLength(), rightValues.isFixedLength());\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftValues.size();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      // nocommit cutover to per-segment comparison\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertEquals(leftValues.size(), rightValues.size());\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftValues.size();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertEquals(leftValues.size(), rightValues.size());\n          assertEquals(leftValues.maxLength(), rightValues.maxLength());\n          assertEquals(leftValues.isFixedLength(), rightValues.isFixedLength());\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftValues.size();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertEquals(leftValues.size(), rightValues.size());\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftValues.size();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71c36a54dc1069e83a3c0aa8194a7319aba642ea","date":1358781390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(leftValues);\n          assertNull(rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftValues = getDVFields(leftReader);\n    Set<String> rightValues = getDVFields(rightReader);\n    assertEquals(info, leftValues, rightValues);\n\n    for (String field : leftValues) {\n      DocValues leftDocValues = MultiDocValues.getDocValues(leftReader, field);\n      DocValues rightDocValues = MultiDocValues.getDocValues(rightReader, field);\n      if (leftDocValues != null && rightDocValues != null) {\n        assertDocValues(leftDocValues, rightDocValues);\n      } else {\n        assertNull(leftDocValues);\n        assertNull(rightDocValues);\n      }\n    }\n  }\n\n","bugFix":["cac4d5fa6c305b94f6232a70bda07f096ad0348c","868186558eb3a854ce7e720a52bb445795d54910","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","date":1361042054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    // nocommit: SortedSet too\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedSetDocValues leftValues = MultiDocValues.getSortedSetValues(leftReader, field);\n        SortedSetDocValues rightValues = MultiDocValues.getSortedSetValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // ord lists\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.setDocument(docID);\n            rightValues.setDocument(docID);\n            long ord;\n            while ((ord = leftValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              assertEquals(info, ord, rightValues.nextOrd());\n            }\n            assertEquals(info, SortedSetDocValues.NO_MORE_ORDS, rightValues.nextOrd());\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    // nocommit: SortedSet too\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedSetDocValues leftValues = MultiDocValues.getSortedSetValues(leftReader, field);\n        SortedSetDocValues rightValues = MultiDocValues.getSortedSetValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // ord lists\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.setDocument(docID);\n            rightValues.setDocument(docID);\n            long ord;\n            while ((ord = leftValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              assertEquals(info, ord, rightValues.nextOrd());\n            }\n            assertEquals(info, SortedSetDocValues.NO_MORE_ORDS, rightValues.nextOrd());\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(IndexReader,IndexReader).mjava","sourceNew":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValuesEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValuesEquals(info, leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedSetDocValues leftValues = MultiDocValues.getSortedSetValues(leftReader, field);\n        SortedSetDocValues rightValues = MultiDocValues.getSortedSetValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // ord lists\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.setDocument(docID);\n            rightValues.setDocument(docID);\n            long ord;\n            while ((ord = leftValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              assertEquals(info, ord, rightValues.nextOrd());\n            }\n            assertEquals(info, SortedSetDocValues.NO_MORE_ORDS, rightValues.nextOrd());\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks that docvalues across all fields are equivalent\n   */\n  public void assertDocValues(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Set<String> leftFields = getDVFields(leftReader);\n    Set<String> rightFields = getDVFields(rightReader);\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      // TODO: clean this up... very messy\n      {\n        NumericDocValues leftValues = MultiDocValues.getNumericValues(leftReader, field);\n        NumericDocValues rightValues = MultiDocValues.getNumericValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n\n      {\n        BinaryDocValues leftValues = MultiDocValues.getBinaryValues(leftReader, field);\n        BinaryDocValues rightValues = MultiDocValues.getBinaryValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedDocValues leftValues = MultiDocValues.getSortedValues(leftReader, field);\n        SortedDocValues rightValues = MultiDocValues.getSortedValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // bytes\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.get(docID, scratchLeft);\n            rightValues.get(docID, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n      \n      {\n        SortedSetDocValues leftValues = MultiDocValues.getSortedSetValues(leftReader, field);\n        SortedSetDocValues rightValues = MultiDocValues.getSortedSetValues(rightReader, field);\n        if (leftValues != null && rightValues != null) {\n          // numOrds\n          assertEquals(info, leftValues.getValueCount(), rightValues.getValueCount());\n          // ords\n          BytesRef scratchLeft = new BytesRef();\n          BytesRef scratchRight = new BytesRef();\n          for (int i = 0; i < leftValues.getValueCount(); i++) {\n            leftValues.lookupOrd(i, scratchLeft);\n            rightValues.lookupOrd(i, scratchRight);\n            assertEquals(info, scratchLeft, scratchRight);\n          }\n          // ord lists\n          for(int docID=0;docID<leftReader.maxDoc();docID++) {\n            leftValues.setDocument(docID);\n            rightValues.setDocument(docID);\n            long ord;\n            while ((ord = leftValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              assertEquals(info, ord, rightValues.nextOrd());\n            }\n            assertEquals(info, SortedSetDocValues.NO_MORE_ORDS, rightValues.nextOrd());\n          }\n        } else {\n          assertNull(info, leftValues);\n          assertNull(info, rightValues);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"746e3645169db50c8f53252b30d6bc9ac21dea7c":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"71c36a54dc1069e83a3c0aa8194a7319aba642ea":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","71c36a54dc1069e83a3c0aa8194a7319aba642ea"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"746e3645169db50c8f53252b30d6bc9ac21dea7c":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f7178a82d1134111f4511f28bb9ad57573a57d93","d4d69c535930b5cce125cff868d40f6373dc27d4"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"71c36a54dc1069e83a3c0aa8194a7319aba642ea":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["71c36a54dc1069e83a3c0aa8194a7319aba642ea"],"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}