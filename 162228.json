{"path":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","commits":[{"id":"4e1019a365f90871803e0de296165d291865c2ce","date":1402929675,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_FILTER), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene410DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene49DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(new Lucene410DocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    LeafReader ar = SlowCompositeReaderWrapper.wrap(r);\n    SortedDocValues sdv = ar.getSortedDocValues(\"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = ar.getSortedSetDocValues(\"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","4e1019a365f90871803e0de296165d291865c2ce"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiDocValues.MultiSortedDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiDocValues.MultiSortedDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOrdinalMap#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiDocValues.MultiSortedDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiDocValues.MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiDocValues.MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRamBytesUsed() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setCodec(TestUtil.alwaysDocValuesFormat(TestUtil.getDefaultDocValuesFormat()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    final int maxDoc = TestUtil.nextInt(random(), 10, 1000);\n    final int maxTermLength = TestUtil.nextInt(random(), 1, 4);\n    for (int i = 0; i < maxDoc; ++i) {\n      Document d = new Document();\n      if (random().nextBoolean()) {\n        d.add(new SortedDocValuesField(\"sdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      final int numSortedSet = random().nextInt(3);\n      for (int j = 0; j < numSortedSet; ++j) {\n        d.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(TestUtil.randomSimpleString(random(), maxTermLength))));\n      }\n      iw.addDocument(d);\n      if (rarely()) {\n        iw.getReader().close();\n      }\n    }\n    iw.commit();\n    DirectoryReader r = iw.getReader();\n    SortedDocValues sdv = MultiDocValues.getSortedValues(r, \"sdv\");\n    if (sdv instanceof MultiSortedDocValues) {\n      OrdinalMap map = ((MultiSortedDocValues) sdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    SortedSetDocValues ssdv = MultiDocValues.getSortedSetValues(r, \"ssdv\");\n    if (ssdv instanceof MultiSortedSetDocValues) {\n      OrdinalMap map = ((MultiSortedSetDocValues) ssdv).mapping;\n      assertEquals(RamUsageTester.sizeOf(map, ORDINAL_MAP_ACCUMULATOR), map.ramBytesUsed());\n    }\n    iw.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d943163030bbd7a9caf93cb5fea92257390a2a99"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["4e1019a365f90871803e0de296165d291865c2ce"],"4e1019a365f90871803e0de296165d291865c2ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e1019a365f90871803e0de296165d291865c2ce"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d0ef034a4f10871667ae75181537775ddcf8ade4"],"4e1019a365f90871803e0de296165d291865c2ce":["d943163030bbd7a9caf93cb5fea92257390a2a99","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e1019a365f90871803e0de296165d291865c2ce","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}