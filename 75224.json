{"path":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","commits":[{"id":"af6e3b131b22b455c53cd15b9345442651eeba30","date":1497238365,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a37f42fd3acf60bcf683cbfad43433f1c259ef7","date":1497239198,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","sourceNew":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n\n      res = client.request(new V2Request.Builder(\"/_introspect\").build());\n      header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","sourceOld":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n\n      res = client.request(new V2Request.Builder(\"/_introspect\").build());\n      header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n\n      res = client.request(new V2Request.Builder(\"/_introspect\").build());\n      header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2StandaloneTest#testWelcomeMessage().mjava","sourceNew":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n\n      res = client.request(new V2Request.Builder(\"/_introspect\").build());\n      header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","sourceOld":"  @Test\n  public void testWelcomeMessage() throws Exception {\n    File solrHomeTmp = createTempDir().toFile().getAbsoluteFile();\n    FileUtils.copyDirectory(new File(TEST_HOME(), \"configsets/minimal/conf\"), new File(solrHomeTmp,\"/conf\"));\n    FileUtils.copyFile(new File(TEST_HOME(), \"solr.xml\"), new File(solrHomeTmp, \"solr.xml\"));\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHomeTmp.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    jetty.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(buildUrl(jetty.getLocalPort(),\"/solr/\"))) {\n      NamedList res = client.request(new V2Request.Builder(\"/\").build());\n      NamedList header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n\n      res = client.request(new V2Request.Builder(\"/_introspect\").build());\n      header = (NamedList) res.get(\"responseHeader\");\n      assertEquals(0, header.get(\"status\"));\n    }\n\n    jetty.stop();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a37f42fd3acf60bcf683cbfad43433f1c259ef7":["af6e3b131b22b455c53cd15b9345442651eeba30"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a37f42fd3acf60bcf683cbfad43433f1c259ef7"],"af6e3b131b22b455c53cd15b9345442651eeba30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a37f42fd3acf60bcf683cbfad43433f1c259ef7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","af6e3b131b22b455c53cd15b9345442651eeba30","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a37f42fd3acf60bcf683cbfad43433f1c259ef7":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"af6e3b131b22b455c53cd15b9345442651eeba30":["2a37f42fd3acf60bcf683cbfad43433f1c259ef7"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}