{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","commits":[{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_f)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_f)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_f)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    FacetStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"facet(collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"buckets=a_s\"));\n    assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n    assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    assertTrue(expressionString.contains(\"sum(a_f)\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"min(a_f)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_f)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 150);\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"count(*) desc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 150);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n                                                        +   \"collection1, \"\n                                                        +   \"q=\\\"*:*\\\", \"\n                                                        +   \"buckets=\\\"a_s\\\", \"\n                                                        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                                                        +   \"bucketSizeLimit=100, \"\n                                                        +   \"sum(a_i), sum(a_f), \"\n                                                        +   \"min(a_i), min(a_f), \"\n                                                        +   \"max(a_i), max(a_f), \"\n                                                        +   \"avg(a_i), avg(a_f), \"\n                                                        +   \"count(*)\"\n                                                        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34","date":1541599137,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 150);\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 150);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 150);\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"count(*) desc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 150);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=250\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 250);\n      assertEquals(stream.getBucketSizeLimit(), 260);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=250\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 260);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 250);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 150);\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 150);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFacetStream().mjava","sourceNew":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=250\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 250);\n      assertEquals(stream.getBucketSizeLimit(), 260);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=250\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 260);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 250);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFacetStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"bucketSizeLimit=100\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 100);\n      assertEquals(stream.getRows(), 100);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getOverfetch(), 150);\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=0\"));\n      assertTrue(expressionString.contains(\"overfetch=150\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 160);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 0);\n      assertEquals(stream.getOverfetch(), 150);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=10, offset=100, overfetch=30, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=10\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=30\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), 140);\n      assertEquals(stream.getRows(), 10);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), 30);\n\n    }\n\n    try (FacetStream stream = new FacetStream(StreamExpressionParser.parse(\"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n        +   \"rows=-1, offset=100, overfetch=-1, method=dvhash, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\"), factory)){\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"facet(collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"buckets=a_s\"));\n      assertTrue(expressionString.contains(\"bucketSorts=\\\"sum(a_i) asc\\\"\"));\n      assertTrue(!expressionString.contains(\"bucketSizeLimit\"));\n      assertTrue(expressionString.contains(\"rows=-1\"));\n      assertTrue(expressionString.contains(\"offset=100\"));\n      assertTrue(expressionString.contains(\"overfetch=-1\"));\n      assertTrue(expressionString.contains(\"method=dvhash\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n      assertTrue(expressionString.contains(\"sum(a_f)\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"min(a_f)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_f)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"avg(a_f,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertEquals(stream.getBucketSizeLimit(), Integer.MAX_VALUE);\n      assertEquals(stream.getRows(), Integer.MAX_VALUE);\n      assertEquals(stream.getOffset(), 100);\n      assertEquals(stream.getOverfetch(), -1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9b741b54c163686a5fd077895a797daa9b0b95f":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"7107555998ea86d6f61e2ad770687d674fa8e012":["d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34":["011d43366b2da54d1652d93e7ec6412848eeb009"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"011d43366b2da54d1652d93e7ec6412848eeb009":["d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["011d43366b2da54d1652d93e7ec6412848eeb009"],"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}