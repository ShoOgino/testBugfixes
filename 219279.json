{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUnsetAllValues().mjava","commits":[{"id":"418b0099fc2355f2ad3afbb548e528def5db2aa9","date":1379296606,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUnsetAllValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnsetAllValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", 5));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // unset the value of 'doc'\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"ndv\", null);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(0, ndv.get(i));\n    }\n    \n    Bits docsWithField = r.getDocsWithField(\"ndv\");\n    assertFalse(docsWithField.get(0));\n    assertFalse(docsWithField.get(1));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUnsetAllValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUnsetAllValues().mjava","sourceNew":"  public void testUnsetAllValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", 5));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // unset the value of 'doc'\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"ndv\", null);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(0, ndv.get(i));\n    }\n    \n    Bits docsWithField = r.getDocsWithField(\"ndv\");\n    assertFalse(docsWithField.get(0));\n    assertFalse(docsWithField.get(1));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUnsetAllValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", 5));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // unset the value of 'doc'\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"ndv\", null);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(0, ndv.get(i));\n    }\n    \n    Bits docsWithField = r.getDocsWithField(\"ndv\");\n    assertFalse(docsWithField.get(0));\n    assertFalse(docsWithField.get(1));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUnsetAllValues().mjava","sourceNew":null,"sourceOld":"  public void testUnsetAllValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", 5));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // unset the value of 'doc'\n    writer.updateNumericDocValue(new Term(\"id\", \"doc\"), \"ndv\", null);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(0, ndv.get(i));\n    }\n    \n    Bits docsWithField = r.getDocsWithField(\"ndv\");\n    assertFalse(docsWithField.get(0));\n    assertFalse(docsWithField.get(1));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["418b0099fc2355f2ad3afbb548e528def5db2aa9"],"418b0099fc2355f2ad3afbb548e528def5db2aa9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["418b0099fc2355f2ad3afbb548e528def5db2aa9"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"418b0099fc2355f2ad3afbb548e528def5db2aa9":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}