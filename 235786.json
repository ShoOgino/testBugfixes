{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCache#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCache#test().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCache#test().mjava","sourceNew":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    double [] doubles = cache.getDoubles(reader, \"theDouble\");\n    assertSame(\"Second request to cache return same array\", doubles, cache.getDoubles(reader, \"theDouble\"));\n    assertSame(\"Second request with explicit parser return same array\", doubles, cache.getDoubles(reader, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER));\n    assertTrue(\"doubles Size: \" + doubles.length + \" is not: \" + NUM_DOCS, doubles.length == NUM_DOCS);\n    for (int i = 0; i < doubles.length; i++) {\n      assertTrue(doubles[i] + \" does not equal: \" + (Double.MAX_VALUE - i), doubles[i] == (Double.MAX_VALUE - i));\n\n    }\n    \n    long [] longs = cache.getLongs(reader, \"theLong\");\n    assertSame(\"Second request to cache return same array\", longs, cache.getLongs(reader, \"theLong\"));\n    assertSame(\"Second request with explicit parser return same array\", longs, cache.getLongs(reader, \"theLong\", FieldCache.DEFAULT_LONG_PARSER));\n    assertTrue(\"longs Size: \" + longs.length + \" is not: \" + NUM_DOCS, longs.length == NUM_DOCS);\n    for (int i = 0; i < longs.length; i++) {\n      assertTrue(longs[i] + \" does not equal: \" + (Long.MAX_VALUE - i), longs[i] == (Long.MAX_VALUE - i));\n\n    }\n    \n    byte [] bytes = cache.getBytes(reader, \"theByte\");\n    assertSame(\"Second request to cache return same array\", bytes, cache.getBytes(reader, \"theByte\"));\n    assertSame(\"Second request with explicit parser return same array\", bytes, cache.getBytes(reader, \"theByte\", FieldCache.DEFAULT_BYTE_PARSER));\n    assertTrue(\"bytes Size: \" + bytes.length + \" is not: \" + NUM_DOCS, bytes.length == NUM_DOCS);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(bytes[i] + \" does not equal: \" + (Byte.MAX_VALUE - i), bytes[i] == (byte) (Byte.MAX_VALUE - i));\n\n    }\n    \n    short [] shorts = cache.getShorts(reader, \"theShort\");\n    assertSame(\"Second request to cache return same array\", shorts, cache.getShorts(reader, \"theShort\"));\n    assertSame(\"Second request with explicit parser return same array\", shorts, cache.getShorts(reader, \"theShort\", FieldCache.DEFAULT_SHORT_PARSER));\n    assertTrue(\"shorts Size: \" + shorts.length + \" is not: \" + NUM_DOCS, shorts.length == NUM_DOCS);\n    for (int i = 0; i < shorts.length; i++) {\n      assertTrue(shorts[i] + \" does not equal: \" + (Short.MAX_VALUE - i), shorts[i] == (short) (Short.MAX_VALUE - i));\n\n    }\n    \n    int [] ints = cache.getInts(reader, \"theInt\");\n    assertSame(\"Second request to cache return same array\", ints, cache.getInts(reader, \"theInt\"));\n    assertSame(\"Second request with explicit parser return same array\", ints, cache.getInts(reader, \"theInt\", FieldCache.DEFAULT_INT_PARSER));\n    assertTrue(\"ints Size: \" + ints.length + \" is not: \" + NUM_DOCS, ints.length == NUM_DOCS);\n    for (int i = 0; i < ints.length; i++) {\n      assertTrue(ints[i] + \" does not equal: \" + (Integer.MAX_VALUE - i), ints[i] == (Integer.MAX_VALUE - i));\n\n    }\n    \n    float [] floats = cache.getFloats(reader, \"theFloat\");\n    assertSame(\"Second request to cache return same array\", floats, cache.getFloats(reader, \"theFloat\"));\n    assertSame(\"Second request with explicit parser return same array\", floats, cache.getFloats(reader, \"theFloat\", FieldCache.DEFAULT_FLOAT_PARSER));\n    assertTrue(\"floats Size: \" + floats.length + \" is not: \" + NUM_DOCS, floats.length == NUM_DOCS);\n    for (int i = 0; i < floats.length; i++) {\n      assertTrue(floats[i] + \" does not equal: \" + (Float.MAX_VALUE - i), floats[i] == (Float.MAX_VALUE - i));\n\n    }\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    double [] doubles = cache.getDoubles(reader, \"theDouble\");\n    assertSame(\"Second request to cache return same array\", doubles, cache.getDoubles(reader, \"theDouble\"));\n    assertSame(\"Second request with explicit parser return same array\", doubles, cache.getDoubles(reader, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER));\n    assertTrue(\"doubles Size: \" + doubles.length + \" is not: \" + NUM_DOCS, doubles.length == NUM_DOCS);\n    for (int i = 0; i < doubles.length; i++) {\n      assertTrue(doubles[i] + \" does not equal: \" + (Double.MAX_VALUE - i), doubles[i] == (Double.MAX_VALUE - i));\n\n    }\n    \n    long [] longs = cache.getLongs(reader, \"theLong\");\n    assertSame(\"Second request to cache return same array\", longs, cache.getLongs(reader, \"theLong\"));\n    assertSame(\"Second request with explicit parser return same array\", longs, cache.getLongs(reader, \"theLong\", FieldCache.DEFAULT_LONG_PARSER));\n    assertTrue(\"longs Size: \" + longs.length + \" is not: \" + NUM_DOCS, longs.length == NUM_DOCS);\n    for (int i = 0; i < longs.length; i++) {\n      assertTrue(longs[i] + \" does not equal: \" + (Long.MAX_VALUE - i), longs[i] == (Long.MAX_VALUE - i));\n\n    }\n    \n    byte [] bytes = cache.getBytes(reader, \"theByte\");\n    assertSame(\"Second request to cache return same array\", bytes, cache.getBytes(reader, \"theByte\"));\n    assertSame(\"Second request with explicit parser return same array\", bytes, cache.getBytes(reader, \"theByte\", FieldCache.DEFAULT_BYTE_PARSER));\n    assertTrue(\"bytes Size: \" + bytes.length + \" is not: \" + NUM_DOCS, bytes.length == NUM_DOCS);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(bytes[i] + \" does not equal: \" + (Byte.MAX_VALUE - i), bytes[i] == (byte) (Byte.MAX_VALUE - i));\n\n    }\n    \n    short [] shorts = cache.getShorts(reader, \"theShort\");\n    assertSame(\"Second request to cache return same array\", shorts, cache.getShorts(reader, \"theShort\"));\n    assertSame(\"Second request with explicit parser return same array\", shorts, cache.getShorts(reader, \"theShort\", FieldCache.DEFAULT_SHORT_PARSER));\n    assertTrue(\"shorts Size: \" + shorts.length + \" is not: \" + NUM_DOCS, shorts.length == NUM_DOCS);\n    for (int i = 0; i < shorts.length; i++) {\n      assertTrue(shorts[i] + \" does not equal: \" + (Short.MAX_VALUE - i), shorts[i] == (short) (Short.MAX_VALUE - i));\n\n    }\n    \n    int [] ints = cache.getInts(reader, \"theInt\");\n    assertSame(\"Second request to cache return same array\", ints, cache.getInts(reader, \"theInt\"));\n    assertSame(\"Second request with explicit parser return same array\", ints, cache.getInts(reader, \"theInt\", FieldCache.DEFAULT_INT_PARSER));\n    assertTrue(\"ints Size: \" + ints.length + \" is not: \" + NUM_DOCS, ints.length == NUM_DOCS);\n    for (int i = 0; i < ints.length; i++) {\n      assertTrue(ints[i] + \" does not equal: \" + (Integer.MAX_VALUE - i), ints[i] == (Integer.MAX_VALUE - i));\n\n    }\n    \n    float [] floats = cache.getFloats(reader, \"theFloat\");\n    assertSame(\"Second request to cache return same array\", floats, cache.getFloats(reader, \"theFloat\"));\n    assertSame(\"Second request with explicit parser return same array\", floats, cache.getFloats(reader, \"theFloat\", FieldCache.DEFAULT_FLOAT_PARSER));\n    assertTrue(\"floats Size: \" + floats.length + \" is not: \" + NUM_DOCS, floats.length == NUM_DOCS);\n    for (int i = 0; i < floats.length; i++) {\n      assertTrue(floats[i] + \" does not equal: \" + (Float.MAX_VALUE - i), floats[i] == (Float.MAX_VALUE - i));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCache#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    double [] doubles = cache.getDoubles(reader, \"theDouble\");\n    assertSame(\"Second request to cache return same array\", doubles, cache.getDoubles(reader, \"theDouble\"));\n    assertSame(\"Second request with explicit parser return same array\", doubles, cache.getDoubles(reader, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER));\n    assertTrue(\"doubles Size: \" + doubles.length + \" is not: \" + NUM_DOCS, doubles.length == NUM_DOCS);\n    for (int i = 0; i < doubles.length; i++) {\n      assertTrue(doubles[i] + \" does not equal: \" + (Double.MAX_VALUE - i), doubles[i] == (Double.MAX_VALUE - i));\n\n    }\n    \n    long [] longs = cache.getLongs(reader, \"theLong\");\n    assertSame(\"Second request to cache return same array\", longs, cache.getLongs(reader, \"theLong\"));\n    assertSame(\"Second request with explicit parser return same array\", longs, cache.getLongs(reader, \"theLong\", FieldCache.DEFAULT_LONG_PARSER));\n    assertTrue(\"longs Size: \" + longs.length + \" is not: \" + NUM_DOCS, longs.length == NUM_DOCS);\n    for (int i = 0; i < longs.length; i++) {\n      assertTrue(longs[i] + \" does not equal: \" + (Long.MAX_VALUE - i), longs[i] == (Long.MAX_VALUE - i));\n\n    }\n    \n    byte [] bytes = cache.getBytes(reader, \"theByte\");\n    assertSame(\"Second request to cache return same array\", bytes, cache.getBytes(reader, \"theByte\"));\n    assertSame(\"Second request with explicit parser return same array\", bytes, cache.getBytes(reader, \"theByte\", FieldCache.DEFAULT_BYTE_PARSER));\n    assertTrue(\"bytes Size: \" + bytes.length + \" is not: \" + NUM_DOCS, bytes.length == NUM_DOCS);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(bytes[i] + \" does not equal: \" + (Byte.MAX_VALUE - i), bytes[i] == (byte) (Byte.MAX_VALUE - i));\n\n    }\n    \n    short [] shorts = cache.getShorts(reader, \"theShort\");\n    assertSame(\"Second request to cache return same array\", shorts, cache.getShorts(reader, \"theShort\"));\n    assertSame(\"Second request with explicit parser return same array\", shorts, cache.getShorts(reader, \"theShort\", FieldCache.DEFAULT_SHORT_PARSER));\n    assertTrue(\"shorts Size: \" + shorts.length + \" is not: \" + NUM_DOCS, shorts.length == NUM_DOCS);\n    for (int i = 0; i < shorts.length; i++) {\n      assertTrue(shorts[i] + \" does not equal: \" + (Short.MAX_VALUE - i), shorts[i] == (short) (Short.MAX_VALUE - i));\n\n    }\n    \n    int [] ints = cache.getInts(reader, \"theInt\");\n    assertSame(\"Second request to cache return same array\", ints, cache.getInts(reader, \"theInt\"));\n    assertSame(\"Second request with explicit parser return same array\", ints, cache.getInts(reader, \"theInt\", FieldCache.DEFAULT_INT_PARSER));\n    assertTrue(\"ints Size: \" + ints.length + \" is not: \" + NUM_DOCS, ints.length == NUM_DOCS);\n    for (int i = 0; i < ints.length; i++) {\n      assertTrue(ints[i] + \" does not equal: \" + (Integer.MAX_VALUE - i), ints[i] == (Integer.MAX_VALUE - i));\n\n    }\n    \n    float [] floats = cache.getFloats(reader, \"theFloat\");\n    assertSame(\"Second request to cache return same array\", floats, cache.getFloats(reader, \"theFloat\"));\n    assertSame(\"Second request with explicit parser return same array\", floats, cache.getFloats(reader, \"theFloat\", FieldCache.DEFAULT_FLOAT_PARSER));\n    assertTrue(\"floats Size: \" + floats.length + \" is not: \" + NUM_DOCS, floats.length == NUM_DOCS);\n    for (int i = 0; i < floats.length; i++) {\n      assertTrue(floats[i] + \" does not equal: \" + (Float.MAX_VALUE - i), floats[i] == (Float.MAX_VALUE - i));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}