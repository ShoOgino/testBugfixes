{"path":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9454a6510e2db155fb01faa5c049b06ece95fab9","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}