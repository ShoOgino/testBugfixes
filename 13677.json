{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#validateRouteValue(AddUpdateCommand).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#validateRouteValue(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void validateRouteValue(AddUpdateCommand cmd) throws SolrException {\n    if (this.parsedAliases == null) {\n      updateParsedCollectionAliases(cmd.getReq().getCore().getCoreContainer().getZkController());\n    }\n\n    Object fieldValue = cmd.getSolrInputDocument().getFieldValue(getRouteField());\n    // possible future enhancement: allow specification of an \"unknown\" category name to where we can send\n    // docs that are uncategorized.\n    if (fieldValue == null) {\n      throw new SolrException(BAD_REQUEST,\"Route value is null\");\n    }\n\n    String dataValue = String.valueOf(fieldValue);\n\n    String candidateCollectionName = buildCollectionNameFromValue(dataValue);\n    List<String> cols = getCollectionList(this.parsedAliases);\n\n    if (cols.contains(candidateCollectionName)) {\n      return;\n    }\n\n    // this check will become very important for future work\n    int infix = candidateCollectionName.indexOf(COLLECTION_INFIX);\n    int valueStart = infix + COLLECTION_INFIX.length();\n    if (candidateCollectionName.substring(valueStart).contains(COLLECTION_INFIX)) {\n      throw new SolrException(BAD_REQUEST, \"No portion of the route value may resolve to the 7 character sequence \" +\n          \"__CRA__\");\n    }\n\n    if (mustMatch != null && !mustMatch.matcher(dataValue).matches()) {\n      throw new SolrException(BAD_REQUEST, \"Route value \" + dataValue\n          + \" does not match \" + ROUTER_MUST_MATCH + \": \" + mustMatch);\n    }\n\n    if (cols.stream()\n        .filter(x -> !x.contains(UNINITIALIZED)).count() >= maxCardinality) {\n      throw new SolrException(BAD_REQUEST, \"Max cardinality \" + maxCardinality\n          + \" reached for Category Routed Alias: \" + getAliasName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#validateRouteValue(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#validateRouteValue(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void validateRouteValue(AddUpdateCommand cmd) throws SolrException {\n    if (this.aliases == null) {\n      updateParsedCollectionAliases(cmd.getReq().getCore().getCoreContainer().getZkController().zkStateReader, false);\n    }\n\n    Object fieldValue = cmd.getSolrInputDocument().getFieldValue(getRouteField());\n    // possible future enhancement: allow specification of an \"unknown\" category name to where we can send\n    // docs that are uncategorized.\n    if (fieldValue == null) {\n      throw new SolrException(BAD_REQUEST, \"Route value is null\");\n    }\n\n    String dataValue = String.valueOf(fieldValue);\n\n    String candidateCollectionName = buildCollectionNameFromValue(dataValue);\n    List<String> cols = getCollectionList(this.aliases);\n\n    if (cols.contains(candidateCollectionName)) {\n      return;\n    }\n\n    // this check will become very important for future work\n    int infix = candidateCollectionName.indexOf(COLLECTION_INFIX);\n    int valueStart = infix + COLLECTION_INFIX.length();\n    if (candidateCollectionName.substring(valueStart).contains(COLLECTION_INFIX)) {\n      throw new SolrException(BAD_REQUEST, \"No portion of the route value may resolve to the 7 character sequence \" +\n          \"__CRA__\");\n    }\n\n    if (mustMatch != null && !mustMatch.matcher(dataValue).matches()) {\n      throw new SolrException(BAD_REQUEST, \"Route value \" + dataValue\n          + \" does not match \" + ROUTER_MUST_MATCH + \": \" + mustMatch);\n    }\n\n    if (cols.stream()\n        .filter(x -> !x.contains(UNINITIALIZED)).count() >= maxCardinality) {\n      throw new SolrException(BAD_REQUEST, \"Max cardinality \" + maxCardinality\n          + \" reached for Category Routed Alias: \" + getAliasName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void validateRouteValue(AddUpdateCommand cmd) throws SolrException {\n    if (this.parsedAliases == null) {\n      updateParsedCollectionAliases(cmd.getReq().getCore().getCoreContainer().getZkController());\n    }\n\n    Object fieldValue = cmd.getSolrInputDocument().getFieldValue(getRouteField());\n    // possible future enhancement: allow specification of an \"unknown\" category name to where we can send\n    // docs that are uncategorized.\n    if (fieldValue == null) {\n      throw new SolrException(BAD_REQUEST,\"Route value is null\");\n    }\n\n    String dataValue = String.valueOf(fieldValue);\n\n    String candidateCollectionName = buildCollectionNameFromValue(dataValue);\n    List<String> cols = getCollectionList(this.parsedAliases);\n\n    if (cols.contains(candidateCollectionName)) {\n      return;\n    }\n\n    // this check will become very important for future work\n    int infix = candidateCollectionName.indexOf(COLLECTION_INFIX);\n    int valueStart = infix + COLLECTION_INFIX.length();\n    if (candidateCollectionName.substring(valueStart).contains(COLLECTION_INFIX)) {\n      throw new SolrException(BAD_REQUEST, \"No portion of the route value may resolve to the 7 character sequence \" +\n          \"__CRA__\");\n    }\n\n    if (mustMatch != null && !mustMatch.matcher(dataValue).matches()) {\n      throw new SolrException(BAD_REQUEST, \"Route value \" + dataValue\n          + \" does not match \" + ROUTER_MUST_MATCH + \": \" + mustMatch);\n    }\n\n    if (cols.stream()\n        .filter(x -> !x.contains(UNINITIALIZED)).count() >= maxCardinality) {\n      throw new SolrException(BAD_REQUEST, \"Max cardinality \" + maxCardinality\n          + \" reached for Category Routed Alias: \" + getAliasName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}