{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float).mjava","pathOld":"/dev/null","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, iterator);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":5,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost) throws IOException {\n      values.intersect(visitor);\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c226b0eeb8b028f572020f459851a663a2c064e":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"97f74f84954e9fefbac4cb38b9bf339e1757600d":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}