{"path":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeil().mjava","sourceNew":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Seeks to smallest term that's >= target. */\n  protected void doSeekCeil() throws IOException {\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE.seekCeil upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n    //System.out.println(\"  after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n    //System.out.println(\"  init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") vs targetLabel=\" + targetLabel);\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart;\n          in.skip(arc.bytesPerArc*mid+1);\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (low == arc.numArcs) {\n          // Dead end\n          arc.arcIdx = arc.numArcs-2;\n          fst.readNextRealArc(arc, in);\n          assert arc.isLast();\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          arc.arcIdx = (low > high ? low : high)-1;\n          fst.readNextRealArc(arc, in);\n          assert arc.label > targetLabel;\n          pushFirst();\n          return;\n        }\n      } else {\n        // Arcs are not array'd -- must do linear scan:\n        if (arc.label == targetLabel) {\n          // recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          pushFirst();\n          return;\n        } else if (arc.isLast()) {\n          // Dead end (target is after the last arc);\n          // rollback to last fork then push\n          upto--;\n          while(true) {\n            if (upto == 0) {\n              return;\n            }\n            final FST.Arc<T> prevArc = getArc(upto);\n            //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n            if (!prevArc.isLast()) {\n              fst.readNextArc(prevArc);\n              pushFirst();\n              return;\n            }\n            upto--;\n          }\n        } else {\n          // keep scanning\n          //System.out.println(\"    next scan\");\n          fst.readNextArc(arc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["4708e7bf7695781d702d204d178627b4faddc03f"],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}