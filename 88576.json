{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","commits":[{"id":"d196c8ed32bc794a6555ac1b2c4efea6dcb57635","date":1357135393,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de2ca603c5d523ef3d09327af40bacce482819eb","date":1373491166,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"206dd656d2bad51b47a453ca18c1328d317dd1ed","date":1391603013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test @Ignore(\"Please fix me!\")\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","bugFix":null,"bugIntro":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc62c53ff8c243df3b582b572bb934b0e79d3467","date":1391619952,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test @Ignore(\"Please fix me!\")\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","bugFix":["206dd656d2bad51b47a453ca18c1328d317dd1ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862fe0ddb727c373fe11596c809321056ffbc018","date":1421158638,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\"+fieldName+\"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testBadShapeParse400().mjava","sourceNew":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    SolrException e = expectThrows(SolrException.class, \"should throw exception on non existent shape\",\n        () -> assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"))\n    );\n    assertEquals(400, e.code());\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","sourceOld":"  @Test\n  public void testBadShapeParse400() {\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9))\"), 400);\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersects(NonexistentShape(89.9,-130 d=9\"), 400);//missing parens\n    assertQEx(null, req(\n        \"fl\", \"id,\" + fieldName, \"q\", \"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{!field f=\" + fieldName + \"}Intersectssss\"), 400);\n\n    ignoreException(\"NonexistentShape\");\n    try {\n      assertU(adoc(\"id\", \"-1\", fieldName, \"NonexistentShape\"));\n      fail();\n    } catch (SolrException e) {\n      assertEquals(400, e.code());\n    }\n    unIgnoreException(\"NonexistentShape\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635","de2ca603c5d523ef3d09327af40bacce482819eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc62c53ff8c243df3b582b572bb934b0e79d3467":["206dd656d2bad51b47a453ca18c1328d317dd1ed"],"206dd656d2bad51b47a453ca18c1328d317dd1ed":["de2ca603c5d523ef3d09327af40bacce482819eb"],"de2ca603c5d523ef3d09327af40bacce482819eb":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"862fe0ddb727c373fe11596c809321056ffbc018":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["862fe0ddb727c373fe11596c809321056ffbc018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["464e7336798bc8a1281d5cf610c649c5a0784e83"]},"commit2Childs":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","de2ca603c5d523ef3d09327af40bacce482819eb"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"fc62c53ff8c243df3b582b572bb934b0e79d3467":["862fe0ddb727c373fe11596c809321056ffbc018"],"206dd656d2bad51b47a453ca18c1328d317dd1ed":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"de2ca603c5d523ef3d09327af40bacce482819eb":["37a0f60745e53927c4c876cfe5b5a58170f0646c","206dd656d2bad51b47a453ca18c1328d317dd1ed"],"862fe0ddb727c373fe11596c809321056ffbc018":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}