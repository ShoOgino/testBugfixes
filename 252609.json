{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerExact(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerRange(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerExact(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerRange(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerExact(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newBigIntegerRange(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","date":1456349953,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":null,"sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2666c8ef916fe551b88266a876c0320db0683dd","date":1456397478,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), large.add(BigInteger.ONE))));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["d2666c8ef916fe551b88266a876c0320db0683dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), large.add(BigInteger.ONE))));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), large.add(BigInteger.ONE))));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), false, large.add(BigInteger.ONE), false)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testBasics().mjava","sourceNew":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), large.add(BigInteger.ONE))));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add a single 1D point and search for it */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with a large biginteger value\n    Document document = new Document();\n    BigInteger large = BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));\n    document.add(new BigIntegerPoint(\"field\", large));\n    writer.addDocument(document);\n    \n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader, false);\n    assertEquals(1, searcher.count(BigIntegerPoint.newExactQuery(\"field\", large)));\n    assertEquals(1, searcher.count(BigIntegerPoint.newRangeQuery(\"field\", large.subtract(BigInteger.ONE), large.add(BigInteger.ONE))));\n    assertEquals(1, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large)));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\", large.subtract(BigInteger.ONE))));\n    assertEquals(0, searcher.count(BigIntegerPoint.newSetQuery(\"field\")));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"c422e924212367b334b4938f1fd3e44438e88c40":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["dd4aa10c3623b9da92a555b8d04677af8fe86877"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d2666c8ef916fe551b88266a876c0320db0683dd"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["dd4aa10c3623b9da92a555b8d04677af8fe86877","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"d2666c8ef916fe551b88266a876c0320db0683dd":["b9ccce763ea3c7e51eff749e584c061d8744b72d"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["d2666c8ef916fe551b88266a876c0320db0683dd"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"d2666c8ef916fe551b88266a876c0320db0683dd":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}