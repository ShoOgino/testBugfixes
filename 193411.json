{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","commits":[{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(Terms).mjava","sourceNew":"    // return true if the listener wanna to be triggered in the next time\r\n    boolean onTermChanged(ShardTerms terms);\r\n\n","sourceOld":"    // return true if the listener wanna to be triggered in the next time\r\n    boolean onTermChanged(Terms terms);\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(Terms).mjava","sourceNew":"    // return true if the listener wanna to be triggered in the next time\r\n    boolean onTermChanged(ShardTerms terms);\r\n\n","sourceOld":"    // return true if the listener wanna to be triggered in the next time\r\n    boolean onTermChanged(Terms terms);\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","sourceNew":"    // return true if the listener wanna to be triggered in the next time\n    boolean onTermChanged(ShardTerms terms);\n\n","sourceOld":"    // return true if the listener wanna to be triggered in the next time\r\n    boolean onTermChanged(ShardTerms terms);\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64b136610bf3772c70e2d86fa4c913425cedbca5","date":1580107100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","sourceNew":"    /**\n     * Invoked with a Terms instance after update. <p/>\n     * Concurrent invocations of this method is not allowed so at a given time only one thread\n     * will invoke this method.\n     * <p/>\n     * <b>Note</b> - there is no guarantee that the terms version will be strictly monotonic i.e.\n     * an invocation with a newer terms version <i>can</i> be followed by an invocation with an older\n     * terms version. Implementations are required to be resilient to out-of-order invocations.\n     *\n     * @param terms instance\n     * @return true if the listener wanna to be triggered in the next time\n     */\n    boolean onTermChanged(ShardTerms terms);\n\n","sourceOld":"    // return true if the listener wanna to be triggered in the next time\n    boolean onTermChanged(ShardTerms terms);\n\n","bugFix":null,"bugIntro":["7b779e547c93f58e16118c6266c5251a5da5b8b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b779e547c93f58e16118c6266c5251a5da5b8b0","date":1580238707,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms.CoreTermWatcher#onTermChanged(ShardTerms).mjava","sourceNew":"    /**\n     * Invoked with a Terms instance after update. <p>\n     * Concurrent invocations of this method is not allowed so at a given time only one thread\n     * will invoke this method.\n     * <p>\n     * <b>Note</b> - there is no guarantee that the terms version will be strictly monotonic i.e.\n     * an invocation with a newer terms version <i>can</i> be followed by an invocation with an older\n     * terms version. Implementations are required to be resilient to out-of-order invocations.\n     *\n     * @param terms instance\n     * @return true if the listener wanna to be triggered in the next time\n     */\n    boolean onTermChanged(ShardTerms terms);\n\n","sourceOld":"    /**\n     * Invoked with a Terms instance after update. <p/>\n     * Concurrent invocations of this method is not allowed so at a given time only one thread\n     * will invoke this method.\n     * <p/>\n     * <b>Note</b> - there is no guarantee that the terms version will be strictly monotonic i.e.\n     * an invocation with a newer terms version <i>can</i> be followed by an invocation with an older\n     * terms version. Implementations are required to be resilient to out-of-order invocations.\n     *\n     * @param terms instance\n     * @return true if the listener wanna to be triggered in the next time\n     */\n    boolean onTermChanged(ShardTerms terms);\n\n","bugFix":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b779e547c93f58e16118c6266c5251a5da5b8b0":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b779e547c93f58e16118c6266c5251a5da5b8b0"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"7b779e547c93f58e16118c6266c5251a5da5b8b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["7b779e547c93f58e16118c6266c5251a5da5b8b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}