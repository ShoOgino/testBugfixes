{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      return new ConstantScorer(similarity, reader, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      return new ConstantScorer(similarity, reader, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      return new ConstantScorer(similarity, reader, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      return new ConstantScorer(similarity, reader, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      return new ConstantScorer(similarity, reader, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(ReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(ReaderContext context,  boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(reader);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(reader, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}