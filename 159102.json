{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","pathOld":"/dev/null","sourceNew":"  public void testInclude_All_Gap2_hardend() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (EnumSet<FacetRangeOther> other : OTHERS) {\n        final String otherStr = formatFacetRangeOther(other);\n        for (String include : Arrays.asList(\", include:'edge,lower,upper,outer'\",\n                                            \", include:[edge,lower,upper,outer]\",\n                                            \", include:all\")) { // same\n          final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n             // exclude a single low/high value from our ranges\n             \"{ foo:{ type:range, field:\"+INT_FIELD+\" start:1, end:4, gap:2, hardend:true\"\n             +         otherStr+include+subFacet+\" } }\");\n          \n          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n          try {\n            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n            \n            assertEquals(\"num buckets\", 2, buckets.size());\n            \n            assertBucket(\"bucket#0\", 1, modelVals(1,3), subFacetLimit, buckets.get(0));\n            assertBucket(\"bucket#1\", 3, modelVals(3,4), subFacetLimit, buckets.get(1));\n            \n            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(4,5), modelVals(1,4), subFacetLimit, foo);\n            \n          } catch (AssertionError|RuntimeException ae) {\n            throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","pathOld":"/dev/null","sourceNew":"  public void testInclude_All_Gap2_hardend() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (EnumSet<FacetRangeOther> other : OTHERS) {\n        final String otherStr = formatFacetRangeOther(other);\n        for (String include : Arrays.asList(\", include:'edge,lower,upper,outer'\",\n                                            \", include:[edge,lower,upper,outer]\",\n                                            \", include:all\")) { // same\n          final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n             // exclude a single low/high value from our ranges\n             \"{ foo:{ type:range, field:\"+INT_FIELD+\" start:1, end:4, gap:2, hardend:true\"\n             +         otherStr+include+subFacet+\" } }\");\n          \n          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n          try {\n            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n            \n            assertEquals(\"num buckets\", 2, buckets.size());\n            \n            assertBucket(\"bucket#0\", 1, modelVals(1,3), subFacetLimit, buckets.get(0));\n            assertBucket(\"bucket#1\", 3, modelVals(3,4), subFacetLimit, buckets.get(1));\n            \n            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(4,5), modelVals(1,4), subFacetLimit, foo);\n            \n          } catch (AssertionError|RuntimeException ae) {\n            throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","pathOld":"/dev/null","sourceNew":"  public void testInclude_All_Gap2_hardend() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (EnumSet<FacetRangeOther> other : OTHERS) {\n        final String otherStr = formatFacetRangeOther(other);\n        for (String include : Arrays.asList(\", include:'edge,lower,upper,outer'\",\n                                            \", include:[edge,lower,upper,outer]\",\n                                            \", include:all\")) { // same\n          final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n             // exclude a single low/high value from our ranges\n             \"{ foo:{ type:range, field:\"+INT_FIELD+\" start:1, end:4, gap:2, hardend:true\"\n             +         otherStr+include+subFacet+\" } }\");\n          \n          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n          try {\n            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n            \n            assertEquals(\"num buckets\", 2, buckets.size());\n            \n            assertBucket(\"bucket#0\", 1, modelVals(1,3), subFacetLimit, buckets.get(0));\n            assertBucket(\"bucket#1\", 3, modelVals(3,4), subFacetLimit, buckets.get(1));\n            \n            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(4,5), modelVals(1,4), subFacetLimit, foo);\n            \n          } catch (AssertionError|RuntimeException ae) {\n            throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testInclude_All_Gap2_hardend().mjava","sourceNew":"  public void testInclude_All_Gap2_hardend() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (EnumSet<FacetRangeOther> other : OTHERS) {\n        final String otherStr = formatFacetRangeOther(other);\n        for (String include : Arrays.asList(\", include:'edge,lower,upper,outer'\",\n                                            \", include:[edge,lower,upper,outer]\",\n                                            \", include:all\")) { // same\n          final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n             // exclude a single low/high value from our ranges\n             \"{ foo:{ type:range, field:\"+INT_FIELD+\" start:1, end:4, gap:2, hardend:true\"\n             +         otherStr+include+subFacet+\" } }\");\n          \n          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n          try {\n            @SuppressWarnings({\"unchecked\"})\n            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n            @SuppressWarnings({\"unchecked\"})\n            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n            \n            assertEquals(\"num buckets\", 2, buckets.size());\n            \n            assertBucket(\"bucket#0\", 1, modelVals(1,3), subFacetLimit, buckets.get(0));\n            assertBucket(\"bucket#1\", 3, modelVals(3,4), subFacetLimit, buckets.get(1));\n            \n            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(4,5), modelVals(1,4), subFacetLimit, foo);\n            \n          } catch (AssertionError|RuntimeException ae) {\n            throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testInclude_All_Gap2_hardend() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (EnumSet<FacetRangeOther> other : OTHERS) {\n        final String otherStr = formatFacetRangeOther(other);\n        for (String include : Arrays.asList(\", include:'edge,lower,upper,outer'\",\n                                            \", include:[edge,lower,upper,outer]\",\n                                            \", include:all\")) { // same\n          final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n             // exclude a single low/high value from our ranges\n             \"{ foo:{ type:range, field:\"+INT_FIELD+\" start:1, end:4, gap:2, hardend:true\"\n             +         otherStr+include+subFacet+\" } }\");\n          \n          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n          try {\n            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n            \n            assertEquals(\"num buckets\", 2, buckets.size());\n            \n            assertBucket(\"bucket#0\", 1, modelVals(1,3), subFacetLimit, buckets.get(0));\n            assertBucket(\"bucket#1\", 3, modelVals(3,4), subFacetLimit, buckets.get(1));\n            \n            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(4,5), modelVals(1,4), subFacetLimit, foo);\n            \n          } catch (AssertionError|RuntimeException ae) {\n            throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}