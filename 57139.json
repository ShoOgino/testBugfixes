{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, 0)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, 0)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, 0)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, 0)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, 0)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, 0)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random(), terms,null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = DirectoryReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(TestUtil.docs(random(), terms, null, null, DocsEnum.FLAG_NONE)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"6613659748fe4411a7dcf85266e55db1f95f7315":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["6613659748fe4411a7dcf85266e55db1f95f7315","4cc45c615dbb82bf79d5f9550286098367874fbf"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"02331260bb246364779cb6f04919ca47900d01bb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}