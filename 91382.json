{"path":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":null,"sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}