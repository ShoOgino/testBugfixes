{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#PreFlexRWTermVectorsWriter(Directory,String,IOContext).mjava","commits":[{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#PreFlexRWTermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  public PreFlexRWTermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#PreFlexRWTermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#PreFlexRWTermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  public PreFlexRWTermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public PreFlexRWTermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene3xTermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}