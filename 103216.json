{"path":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46885bf5f669268ac6235cce5c62fdd68b4e490c","date":1397242003,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676","date":1398736164,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f, true);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f, true);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f, true);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":null,"sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f, true);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.getFilePointer());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.getFilePointer());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["46885bf5f669268ac6235cce5c62fdd68b4e490c","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["46885bf5f669268ac6235cce5c62fdd68b4e490c","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["46885bf5f669268ac6235cce5c62fdd68b4e490c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"46885bf5f669268ac6235cce5c62fdd68b4e490c":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["409da428f28953cf35fddd5c9ff5c7e4f5439863","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["46885bf5f669268ac6235cce5c62fdd68b4e490c"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"46885bf5f669268ac6235cce5c62fdd68b4e490c":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}