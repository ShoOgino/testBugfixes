{"path":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory.AddSchemaFieldsUpdateProcessor#getUnknownFields(FieldNameSelector,SolrInputDocument,Map[String,List[SolrInputField]]).mjava","commits":[{"id":"c5e2610b40339a9229fd44387a4a33aa04f86a69","date":1434399249,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory.AddSchemaFieldsUpdateProcessor#getUnknownFields(FieldNameSelector,SolrInputDocument,Map[String,List[SolrInputField]]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Recursively find unknown fields in the given doc and its child documents, if any.\n     */\n    private void getUnknownFields\n    (FieldNameSelector selector, SolrInputDocument doc, Map<String,List<SolrInputField>> unknownFields) {\n      for (final String fieldName : doc.getFieldNames()) {\n        if (selector.shouldMutate(fieldName)) { // returns false if the field already exists in the current schema\n          List<SolrInputField> solrInputFields = unknownFields.get(fieldName);\n          if (null == solrInputFields) {\n            solrInputFields = new ArrayList<>();\n            unknownFields.put(fieldName, solrInputFields);\n          }\n          solrInputFields.add(doc.getField(fieldName));\n        }\n      }\n      List<SolrInputDocument> childDocs = doc.getChildDocuments();\n      if (null != childDocs) {\n        for (SolrInputDocument childDoc : childDocs) {\n          getUnknownFields(selector, childDoc, unknownFields);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["514f9b38602488e6f0a93fae3437b1d69f42b085"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"514f9b38602488e6f0a93fae3437b1d69f42b085","date":1535781210,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory.AddSchemaFieldsUpdateProcessor#getUnknownFields(FieldNameSelector,SolrInputDocument,Map[String,List[SolrInputField]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactory.AddSchemaFieldsUpdateProcessor#getUnknownFields(FieldNameSelector,SolrInputDocument,Map[String,List[SolrInputField]]).mjava","sourceNew":"    /**\n     * Recursively find unknown fields in the given doc and its child documents, if any.\n     */\n    private void getUnknownFields\n    (FieldNameSelector selector, SolrInputDocument doc, Map<String,List<SolrInputField>> unknownFields) {\n      for (final String fieldName : doc.getFieldNames()) {\n        //We do a assert and a null check because even after SOLR-12710 is addressed\n        //older SolrJ versions can send null values causing an NPE\n        assert fieldName != null;\n        if (fieldName != null) {\n          if (selector.shouldMutate(fieldName)) { // returns false if the field already exists in the current schema\n            List<SolrInputField> solrInputFields = unknownFields.get(fieldName);\n            if (null == solrInputFields) {\n              solrInputFields = new ArrayList<>();\n              unknownFields.put(fieldName, solrInputFields);\n            }\n            solrInputFields.add(doc.getField(fieldName));\n          }\n        }\n      }\n      List<SolrInputDocument> childDocs = doc.getChildDocuments();\n      if (null != childDocs) {\n        for (SolrInputDocument childDoc : childDocs) {\n          getUnknownFields(selector, childDoc, unknownFields);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Recursively find unknown fields in the given doc and its child documents, if any.\n     */\n    private void getUnknownFields\n    (FieldNameSelector selector, SolrInputDocument doc, Map<String,List<SolrInputField>> unknownFields) {\n      for (final String fieldName : doc.getFieldNames()) {\n        if (selector.shouldMutate(fieldName)) { // returns false if the field already exists in the current schema\n          List<SolrInputField> solrInputFields = unknownFields.get(fieldName);\n          if (null == solrInputFields) {\n            solrInputFields = new ArrayList<>();\n            unknownFields.put(fieldName, solrInputFields);\n          }\n          solrInputFields.add(doc.getField(fieldName));\n        }\n      }\n      List<SolrInputDocument> childDocs = doc.getChildDocuments();\n      if (null != childDocs) {\n        for (SolrInputDocument childDoc : childDocs) {\n          getUnknownFields(selector, childDoc, unknownFields);\n        }\n      }\n    }\n\n","bugFix":["c5e2610b40339a9229fd44387a4a33aa04f86a69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"514f9b38602488e6f0a93fae3437b1d69f42b085":["c5e2610b40339a9229fd44387a4a33aa04f86a69"],"c5e2610b40339a9229fd44387a4a33aa04f86a69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["514f9b38602488e6f0a93fae3437b1d69f42b085"]},"commit2Childs":{"514f9b38602488e6f0a93fae3437b1d69f42b085":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5e2610b40339a9229fd44387a4a33aa04f86a69":["514f9b38602488e6f0a93fae3437b1d69f42b085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5e2610b40339a9229fd44387a4a33aa04f86a69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}