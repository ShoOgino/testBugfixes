{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[Document],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream != null) {\n          message(\"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<Document> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream != null) {\n          message(\"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream != null) {\n          message(\"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        infoStream.message(\"IW\", \"hit exception updating document\");\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream != null) {\n          infoStream.message(\"IW\", \"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f","date":1322855559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        infoStream.message(\"IW\", \"hit exception updating document\");\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success && infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception updating document\");\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents, analyzed  using\n   * the provided analyzer, with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocuments(docs, analyzer, delTerm);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f","c5df35ab57c223ea11aec64b53bf611904f3dced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}