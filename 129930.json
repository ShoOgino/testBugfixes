{"path":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(CoreDescriptor,String,Properties).mjava","commits":[{"id":"2a587c94af1f0093e1c855cd3d5486375336f16e","date":1579724797,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(CoreDescriptor,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(CoreDescriptor,String,Properties,ZkController).mjava","sourceNew":"  public CloudDescriptor(CoreDescriptor cd, String coreName, Properties props) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","sourceOld":"  public CloudDescriptor(CoreDescriptor cd, String coreName, Properties props, ZkController zkController) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n    // The configSet comes from ZK, not from CD's properties like it does in standalone.\n    // But we want to put it on CD because CD has getConfigSet() which is sensible; don't want that to return null.\n    if (zkController != null) { // there's a test where we pass null 'cause it wanted a dummy instance.  Yuck?\n      try {\n        //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n        String configSetName = zkController.getZkStateReader().readConfigName(collectionName);\n        props.setProperty(CORE_CONFIGSET, configSetName);\n        //noinspection StringEquality\n        assert cd.getConfigSet() == configSetName;\n      } catch (KeeperException ex) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + collectionName + \": \" + ex.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a587c94af1f0093e1c855cd3d5486375336f16e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a587c94af1f0093e1c855cd3d5486375336f16e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a587c94af1f0093e1c855cd3d5486375336f16e"],"2a587c94af1f0093e1c855cd3d5486375336f16e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}