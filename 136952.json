{"path":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","commits":[{"id":"1824b087cfdcde66ff0d86b5e11d8159084ad168","date":1313368962,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\r\n\r\n    // NOTE: 'ssto' is the missing one\r\n    final List<String> fl = Arrays.asList\r\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\r\n    \r\n    final int iters = atLeast(random, 10);\r\n    for (int i = 0; i< iters; i++) {\r\n      \r\n      Collections.shuffle(fl, random);\r\n\r\n      final String singleFl = StringUtils.join(fl.toArray(),',');\r\n      assertQ(\"fl=\" + singleFl,\r\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\r\n              ,\"//result[@numFound='5']\"\r\n              ,\"//result/doc/str[@name='id']\"\r\n              ,\"//result/doc/float[@name='score']\"\r\n              ,\"//result/doc/str[@name='subject']\"\r\n              ,\"//result/doc/int[@name='val_i']\"\r\n              ,\"//result/doc/int[@name='[docid]']\"\r\n              ,\"//result/doc/str[@name='[explain]']\"\r\n              \r\n              ,\"//result/doc[count(*)=6]\"\r\n              );\r\n\r\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\r\n      final StringBuilder info = new StringBuilder();\r\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\r\n      for (String item : fl) {\r\n        params.add(\"fl\");\r\n        params.add(item);\r\n        info.append(\"&fl=\").append(item);\r\n      }\r\n      \r\n      assertQ(info.toString(),\r\n              req((String[])params.toArray(new String[0]))\r\n              ,\"//result[@numFound='5']\"\r\n              ,\"//result/doc/str[@name='id']\"\r\n              ,\"//result/doc/float[@name='score']\"\r\n              ,\"//result/doc/str[@name='subject']\"\r\n              ,\"//result/doc/int[@name='val_i']\"\r\n              ,\"//result/doc/int[@name='[docid]']\"\r\n              ,\"//result/doc/str[@name='[explain]']\"\r\n              \r\n              ,\"//result/doc[count(*)=6]\"\r\n              );\r\n\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\r\n\r\n    // NOTE: 'ssto' is the missing one\r\n    final List<String> fl = Arrays.asList\r\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\r\n    \r\n    final int iters = atLeast(random, 10);\r\n    for (int i = 0; i< iters; i++) {\r\n      \r\n      Collections.shuffle(fl, random);\r\n\r\n      final String singleFl = StringUtils.join(fl.toArray(),',');\r\n      assertQ(\"fl=\" + singleFl,\r\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\r\n              ,\"//result[@numFound='5']\"\r\n              ,\"//result/doc/str[@name='id']\"\r\n              ,\"//result/doc/float[@name='score']\"\r\n              ,\"//result/doc/str[@name='subject']\"\r\n              ,\"//result/doc/int[@name='val_i']\"\r\n              ,\"//result/doc/int[@name='[docid]']\"\r\n              ,\"//result/doc/str[@name='[explain]']\"\r\n              \r\n              ,\"//result/doc[count(*)=6]\"\r\n              );\r\n\r\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\r\n      final StringBuilder info = new StringBuilder();\r\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\r\n      for (String item : fl) {\r\n        params.add(\"fl\");\r\n        params.add(item);\r\n        info.append(\"&fl=\").append(item);\r\n      }\r\n      \r\n      assertQ(info.toString(),\r\n              req((String[])params.toArray(new String[0]))\r\n              ,\"//result[@numFound='5']\"\r\n              ,\"//result/doc/str[@name='id']\"\r\n              ,\"//result/doc/float[@name='score']\"\r\n              ,\"//result/doc/str[@name='subject']\"\r\n              ,\"//result/doc/int[@name='val_i']\"\r\n              ,\"//result/doc/int[@name='[docid]']\"\r\n              ,\"//result/doc/str[@name='[explain]']\"\r\n              \r\n              ,\"//result/doc[count(*)=6]\"\r\n              );\r\n\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<String>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final String singleFl = StringUtils.join(fl.toArray(),',');\n      assertQ(\"fl=\" + singleFl,\n              req(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",singleFl)\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n      final List<String> params = new ArrayList<>((fl.size()*2) + 4);\n      final StringBuilder info = new StringBuilder();\n      params.addAll(Arrays.asList(\"q\",\"*:*\", \"rows\", \"1\"));\n      for (String item : fl) {\n        params.add(\"fl\");\n        params.add(item);\n        info.append(\"&fl=\").append(item);\n      }\n      \n      assertQ(info.toString(),\n              req((String[])params.toArray(new String[0]))\n              ,\"//result[@numFound='5']\"\n              ,\"//result/doc/str[@name='id']\"\n              ,\"//result/doc/float[@name='score']\"\n              ,\"//result/doc/str[@name='subject']\"\n              ,\"//result/doc/int[@name='val_i']\"\n              ,\"//result/doc/int[@name='[docid]']\"\n              ,\"//result/doc/str[@name='[explain]']\"\n              \n              ,\"//result/doc[count(*)=6]\"\n              );\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",String.join(\",\", fl));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n\n","sourceOld":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["1824b087cfdcde66ff0d86b5e11d8159084ad168"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"1824b087cfdcde66ff0d86b5e11d8159084ad168":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["0ac6494315d04f68950d2f00f5436b4861bcd467","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1824b087cfdcde66ff0d86b5e11d8159084ad168"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1824b087cfdcde66ff0d86b5e11d8159084ad168":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}