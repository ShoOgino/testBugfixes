{"path":"modules/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer#r_aditzak().mjava","commits":[{"id":"a4193dd6874631c7088239f186fb6e5b2f02eeb1","date":1283035345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer#r_aditzak().mjava","pathOld":"/dev/null","sourceNew":"                private boolean r_aditzak() {\n            int among_var;\n                    // (, line 49\n                    // [, line 50\n                    ket = cursor;\n                    // substring, line 50\n                    among_var = find_among_b(a_0, 109);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 50\n                    bra = cursor;\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 61\n                            // call RV, line 61\n                            if (!r_RV())\n                            {\n                                return false;\n                            }\n                            // delete, line 61\n                            slice_del();\n                            break;\n                        case 2:\n                            // (, line 63\n                            // call R2, line 63\n                            if (!r_R2())\n                            {\n                                return false;\n                            }\n                            // delete, line 63\n                            slice_del();\n                            break;\n                        case 3:\n                            // (, line 65\n                            // <-, line 65\n                            slice_from(\"atseden\");\n                            break;\n                        case 4:\n                            // (, line 67\n                            // <-, line 67\n                            slice_from(\"arabera\");\n                            break;\n                        case 5:\n                            // (, line 69\n                            // <-, line 69\n                            slice_from(\"baditu\");\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer#r_aditzak().mjava","pathOld":"/dev/null","sourceNew":"                private boolean r_aditzak() {\n            int among_var;\n                    // (, line 49\n                    // [, line 50\n                    ket = cursor;\n                    // substring, line 50\n                    among_var = find_among_b(a_0, 109);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 50\n                    bra = cursor;\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 61\n                            // call RV, line 61\n                            if (!r_RV())\n                            {\n                                return false;\n                            }\n                            // delete, line 61\n                            slice_del();\n                            break;\n                        case 2:\n                            // (, line 63\n                            // call R2, line 63\n                            if (!r_R2())\n                            {\n                                return false;\n                            }\n                            // delete, line 63\n                            slice_del();\n                            break;\n                        case 3:\n                            // (, line 65\n                            // <-, line 65\n                            slice_from(\"atseden\");\n                            break;\n                        case 4:\n                            // (, line 67\n                            // <-, line 67\n                            slice_from(\"arabera\");\n                            break;\n                        case 5:\n                            // (, line 69\n                            // <-, line 69\n                            slice_from(\"baditu\");\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer#r_aditzak().mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer#r_aditzak().mjava","sourceNew":"                private boolean r_aditzak() {\n            int among_var;\n                    // (, line 49\n                    // [, line 50\n                    ket = cursor;\n                    // substring, line 50\n                    among_var = find_among_b(a_0, 109);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 50\n                    bra = cursor;\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 61\n                            // call RV, line 61\n                            if (!r_RV())\n                            {\n                                return false;\n                            }\n                            // delete, line 61\n                            slice_del();\n                            break;\n                        case 2:\n                            // (, line 63\n                            // call R2, line 63\n                            if (!r_R2())\n                            {\n                                return false;\n                            }\n                            // delete, line 63\n                            slice_del();\n                            break;\n                        case 3:\n                            // (, line 65\n                            // <-, line 65\n                            slice_from(\"atseden\");\n                            break;\n                        case 4:\n                            // (, line 67\n                            // <-, line 67\n                            slice_from(\"arabera\");\n                            break;\n                        case 5:\n                            // (, line 69\n                            // <-, line 69\n                            slice_from(\"baditu\");\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":"                private boolean r_aditzak() {\n            int among_var;\n                    // (, line 49\n                    // [, line 50\n                    ket = cursor;\n                    // substring, line 50\n                    among_var = find_among_b(a_0, 109);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 50\n                    bra = cursor;\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 61\n                            // call RV, line 61\n                            if (!r_RV())\n                            {\n                                return false;\n                            }\n                            // delete, line 61\n                            slice_del();\n                            break;\n                        case 2:\n                            // (, line 63\n                            // call R2, line 63\n                            if (!r_R2())\n                            {\n                                return false;\n                            }\n                            // delete, line 63\n                            slice_del();\n                            break;\n                        case 3:\n                            // (, line 65\n                            // <-, line 65\n                            slice_from(\"atseden\");\n                            break;\n                        case 4:\n                            // (, line 67\n                            // <-, line 67\n                            slice_from(\"arabera\");\n                            break;\n                        case 5:\n                            // (, line 69\n                            // <-, line 69\n                            slice_from(\"baditu\");\n                            break;\n                    }\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4193dd6874631c7088239f186fb6e5b2f02eeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a4193dd6874631c7088239f186fb6e5b2f02eeb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a4193dd6874631c7088239f186fb6e5b2f02eeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"a4193dd6874631c7088239f186fb6e5b2f02eeb1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4193dd6874631c7088239f186fb6e5b2f02eeb1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}