{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","sourceNew":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","sourceNew":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", ReplicationHandler.PATH);\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","sourceNew":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", ReplicationHandler.PATH);\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    assertReplicationResponseSucceeded(resp);\n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    assertReplicationResponseSucceeded(resp);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", ReplicationHandler.PATH);\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","sourceNew":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    @SuppressWarnings({\"unchecked\"})\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", ReplicationHandler.PATH);\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    assertReplicationResponseSucceeded(resp);\n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    assertReplicationResponseSucceeded(resp);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", ReplicationHandler.PATH);\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    assertReplicationResponseSucceeded(resp);\n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    assertReplicationResponseSucceeded(resp);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["e98520789adb1d5ad05afb4956eca0944a929688"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}