{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","commits":[{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createColl(String,CloudSolrServer).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":"  protected void createColl(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n    Set<Map.Entry<String,List<Integer>>> collectionInfosEntrySet = collectionInfos.entrySet();\n    for (Map.Entry<String,List<Integer>> entry : collectionInfosEntrySet) {\n      String collection = entry.getKey();\n      List<Integer> list = entry.getValue();\n      checkForCollection(collection, list, null);\n      String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collection);\n      HttpSolrServer collectionClient = new HttpSolrServer(url);\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrClient client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd548b14f1051e707393e77329f80c5e89f69919"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cd548b14f1051e707393e77329f80c5e89f69919"],"bafca15d8e408346a67f4282ad1143b88023893b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"cd548b14f1051e707393e77329f80c5e89f69919":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd548b14f1051e707393e77329f80c5e89f69919"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd548b14f1051e707393e77329f80c5e89f69919":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}