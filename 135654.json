{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}