{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","commits":[{"id":"7cee1a55445d85866e93f8d5b0d0a981aaa26694","date":1379541084,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SimpleBindings otherBindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.LONG));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SortField sf1 = expr.getSortField(bindings, true);\n    \n    // different order\n    SortField sf2 = expr.getSortField(bindings, false);\n    assertFalse(sf1.equals(sf2));\n    \n    // different bindings\n    sf2 = expr.getSortField(otherBindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // different expression\n    Expression other = JavascriptCompiler.compile(\"popularity/2\");\n    sf2 = other.getSortField(bindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // null\n    assertFalse(sf1.equals(null));\n    \n    // same instance:\n    assertEquals(sf1, sf1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","date":1379734663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SimpleBindings otherBindings = new SimpleBindings();\n    otherBindings.add(new SortField(\"_score\", SortField.Type.LONG));\n    otherBindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SortField sf1 = expr.getSortField(bindings, true);\n    \n    // different order\n    SortField sf2 = expr.getSortField(bindings, false);\n    assertFalse(sf1.equals(sf2));\n    \n    // different bindings\n    sf2 = expr.getSortField(otherBindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // different expression\n    Expression other = JavascriptCompiler.compile(\"popularity/2\");\n    sf2 = other.getSortField(bindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // null\n    assertFalse(sf1.equals(null));\n    \n    // same instance:\n    assertEquals(sf1, sf1);\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SimpleBindings otherBindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.LONG));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SortField sf1 = expr.getSortField(bindings, true);\n    \n    // different order\n    SortField sf2 = expr.getSortField(bindings, false);\n    assertFalse(sf1.equals(sf2));\n    \n    // different bindings\n    sf2 = expr.getSortField(otherBindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // different expression\n    Expression other = JavascriptCompiler.compile(\"popularity/2\");\n    sf2 = other.getSortField(bindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // null\n    assertFalse(sf1.equals(null));\n    \n    // same instance:\n    assertEquals(sf1, sf1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSortField#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(\"_score\", DoubleValuesSource.SCORES);\n    bindings.add(\"popularity\", DoubleValuesSource.fromIntField(\"popularity\"));\n    \n    SimpleBindings otherBindings = new SimpleBindings();\n    otherBindings.add(\"_score\", DoubleValuesSource.fromLongField(\"_score\"));\n    otherBindings.add(\"popularity\", DoubleValuesSource.fromIntField(\"popularity\"));\n\n    SortField sf1 = expr.getSortField(bindings, true);\n    \n    // different order\n    SortField sf2 = expr.getSortField(bindings, false);\n    assertFalse(sf1.equals(sf2));\n    \n    // different bindings\n    sf2 = expr.getSortField(otherBindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // different expression\n    Expression other = JavascriptCompiler.compile(\"popularity/2\");\n    sf2 = other.getSortField(bindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // null\n    assertFalse(sf1.equals(null));\n    \n    // same instance:\n    assertEquals(sf1, sf1);\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SimpleBindings otherBindings = new SimpleBindings();\n    otherBindings.add(new SortField(\"_score\", SortField.Type.LONG));\n    otherBindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    SortField sf1 = expr.getSortField(bindings, true);\n    \n    // different order\n    SortField sf2 = expr.getSortField(bindings, false);\n    assertFalse(sf1.equals(sf2));\n    \n    // different bindings\n    sf2 = expr.getSortField(otherBindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // different expression\n    Expression other = JavascriptCompiler.compile(\"popularity/2\");\n    sf2 = other.getSortField(bindings, true);\n    assertFalse(sf1.equals(sf2));\n    \n    // null\n    assertFalse(sf1.equals(null));\n    \n    // same instance:\n    assertEquals(sf1, sf1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["7cee1a55445d85866e93f8d5b0d0a981aaa26694"],"7cee1a55445d85866e93f8d5b0d0a981aaa26694":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27d4663d3f6f21a687874d174b49d55645ce99db":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"]},"commit2Childs":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["27d4663d3f6f21a687874d174b49d55645ce99db"],"7cee1a55445d85866e93f8d5b0d0a981aaa26694":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cee1a55445d85866e93f8d5b0d0a981aaa26694"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}