{"path":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","commits":[{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    // We need to maintain the same major version\n    int createdMajor = SegmentInfos.readLatestCommit(srcDir).getIndexCreatedVersionMajor();\n    new SegmentInfos(createdMajor).commit(destDir);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    // We need to maintain the same major version\n    int createdMajor = SegmentInfos.readLatestCommit(srcDir).getIndexCreatedVersionMajor();\n    new SegmentInfos(createdMajor).commit(destDir);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c77cd17559fe8804f9a6d1e2e494617de0ed2d7","date":1499083945,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    // We need to maintain the same major version\n    int createdMajor = SegmentInfos.readLatestCommit(srcDir).getIndexCreatedVersionMajor();\n    new SegmentInfos(createdMajor).commit(destDir);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    // We need to maintain the same major version\n    int createdMajor = SegmentInfos.readLatestCommit(srcDir).getIndexCreatedVersionMajor();\n    new SegmentInfos(createdMajor).commit(destDir);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/index/FixBrokenOffsets#main(String[]).mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(String[] args) throws IOException {\n    if (args.length < 2) {\n      System.err.println(\"Usage: FixBrokenOffsetse <srcDir> <destDir>\");\n      return;\n    }\n    Path srcPath = Paths.get(args[0]);\n    if (!Files.exists(srcPath)) {\n      throw new RuntimeException(\"srcPath \" + srcPath.toAbsolutePath() + \" doesn't exist\");\n    }\n    Path destPath = Paths.get(args[1]);\n    if (Files.exists(destPath)) {\n      throw new RuntimeException(\"destPath \" + destPath.toAbsolutePath() + \" already exists; please remove it and re-run\");\n    }\n    Directory srcDir = FSDirectory.open(srcPath);\n    DirectoryReader reader = DirectoryReader.open(srcDir);\n\n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] filtered = new CodecReader[leaves.size()];\n    for(int i=0;i<leaves.size();i++) {\n      filtered[i] = SlowCodecReaderWrapper.wrap(new FilterLeafReader(leaves.get(i).reader()) {\n          @Override\n          public Fields getTermVectors(int docID) throws IOException {\n            Fields termVectors = in.getTermVectors(docID);\n            if (termVectors == null) {\n              return null;\n            }\n            return new FilterFields(termVectors) {\n              @Override\n              public Terms terms(String field) throws IOException {\n                return new FilterTerms(super.terms(field)) {\n                  @Override\n                  public TermsEnum iterator() throws IOException {\n                    return new FilterTermsEnum(super.iterator()) {\n                      @Override\n                      public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n                        return new FilterPostingsEnum(super.postings(reuse, flags)) {\n                          int nextLastStartOffset = 0;\n                          int lastStartOffset = 0;\n\n                          @Override\n                          public int nextPosition() throws IOException {\n                            int pos = super.nextPosition();\n                            lastStartOffset = nextLastStartOffset;\n                            nextLastStartOffset = startOffset();\n                            return pos;\n                          }\n                          \n                          @Override\n                          public int startOffset() throws IOException {\n                            int offset = super.startOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                          \n                          @Override\n                          public int endOffset() throws IOException {\n                            int offset = super.endOffset();\n                            if (offset < lastStartOffset) {\n                              offset = lastStartOffset;\n                            }\n                            return offset;\n                          }\n                        };\n                      }\n                    };\n                  }\n                };\n              }\n            };\n          }\n\n          @Override\n          public CacheHelper getCoreCacheHelper() {\n            return null;\n          }\n\n          @Override\n          public CacheHelper getReaderCacheHelper() {\n            return null;\n          }\n        });\n    }\n\n    Directory destDir = FSDirectory.open(destPath);\n    // We need to maintain the same major version\n    int createdMajor = SegmentInfos.readLatestCommit(srcDir).getIndexCreatedVersionMajor();\n    new SegmentInfos(createdMajor).commit(destDir);\n    IndexWriter writer = new IndexWriter(destDir, new IndexWriterConfig());\n    writer.addIndexes(filtered);\n    IOUtils.close(writer, reader, srcDir, destDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["31741cf1390044e38a2ec3127cf302ba841bfd75","5c77cd17559fe8804f9a6d1e2e494617de0ed2d7"],"30c8e5574b55d57947e989443dfde611646530ee":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cc018b79379c67835b40b1259cd3dc931df60944"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d211216c83f01894810543d1c107160a9ae3650b"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"5c77cd17559fe8804f9a6d1e2e494617de0ed2d7":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["d211216c83f01894810543d1c107160a9ae3650b","507e7decdf00981d09a74632ea30299a4ce6ba72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","507e7decdf00981d09a74632ea30299a4ce6ba72"],"d211216c83f01894810543d1c107160a9ae3650b":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["30c8e5574b55d57947e989443dfde611646530ee"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"5c77cd17559fe8804f9a6d1e2e494617de0ed2d7":["cc018b79379c67835b40b1259cd3dc931df60944"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cc018b79379c67835b40b1259cd3dc931df60944","5c77cd17559fe8804f9a6d1e2e494617de0ed2d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}