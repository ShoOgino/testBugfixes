{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":"  @Test\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    expectThrows(SolrException.class, () -> {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n    });\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n    expectThrows(SolrException.class, getResponse::getDelegationToken);\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    expectThrows(SolrException.class, () -> {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n    });\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n    expectThrows(SolrException.class, getResponse::getDelegationToken);\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestDelegationTokenResponse#testGetResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    expectThrows(SolrException.class, () -> {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n    });\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n    expectThrows(SolrException.class, getResponse::getDelegationToken);\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testGetResponse() throws Exception {\n    DelegationTokenRequest.Get getRequest = new DelegationTokenRequest.Get();\n    DelegationTokenResponse.Get getResponse = new DelegationTokenResponse.Get();\n\n    // not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, \"\");\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have Token outerMap\n    final String someToken = \"someToken\";\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"NotToken\", \"urlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // Token is not a map\n    try {\n      delegationTokenResponse(getRequest, getResponse, getMapJson(\"Token\", someToken));\n      getResponse.getDelegationToken();\n      fail(\"Expected SolrException\");\n    } catch (SolrException se) {\n    }\n\n    // doesn't have urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"notUrlString\", someToken));\n    assertNull(getResponse.getDelegationToken());\n\n    // has Token + urlString\n    delegationTokenResponse(getRequest, getResponse, getNestedMapJson(\"Token\", \"urlString\", someToken));\n    assertEquals(someToken, getResponse.getDelegationToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["20be168d828ac40d262f85364d02f15b491dd88b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["8d35c84fdef07284c122012ca4000d3b7285a66e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["8d35c84fdef07284c122012ca4000d3b7285a66e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"20be168d828ac40d262f85364d02f15b491dd88b":["4cba13865da71de3b9b0937fcbc66d726089356d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}