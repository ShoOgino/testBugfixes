{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","commits":[{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppend() throws IOException {\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    int entries = atLeast(500);\n    BytesRef spare = new BytesRef();\n    for (int i = 0; i < entries; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random);\n      spare.copyChars(randomRealisticUnicodeString);\n      list.append(spare);\n      stringList.add(randomRealisticUnicodeString);\n    }\n    for (int i = 0; i < entries; i++) {\n      assertNotNull(list.get(spare, i));\n      assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n          spare.utf8ToString());\n    }\n\n    // check random\n    for (int i = 0; i < entries; i++) {\n      int e = random.nextInt(entries);\n      assertNotNull(list.get(spare, e));\n      assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n          spare.utf8ToString());\n    }\n    for (int i = 0; i < 2; i++) {\n\n      BytesRefIterator iterator = list.iterator();\n      for (String string : stringList) {\n        assertEquals(string, iterator.next().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    int entries = atLeast(500);\n    BytesRef spare = new BytesRef();\n    for (int i = 0; i < entries; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random);\n      spare.copyChars(randomRealisticUnicodeString);\n      list.append(spare);\n      stringList.add(randomRealisticUnicodeString);\n    }\n    for (int i = 0; i < entries; i++) {\n      assertNotNull(list.get(spare, i));\n      assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n          spare.utf8ToString());\n    }\n\n    // check random\n    for (int i = 0; i < entries; i++) {\n      int e = random.nextInt(entries);\n      assertNotNull(list.get(spare, e));\n      assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n          spare.utf8ToString());\n    }\n    for (int i = 0; i < 2; i++) {\n\n      BytesRefIterator iterator = list.iterator();\n      for (String string : stringList) {\n        assertEquals(string, iterator.next().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppend() throws IOException {\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      for (int i = 0; i < entries; i++) {\n        assertNotNull(list.get(spare, i));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n      }\n      \n      // check random\n      for (int i = 0; i < entries; i++) {\n        int e = random.nextInt(entries);\n        assertNotNull(list.get(spare, e));\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(e),\n            spare.utf8ToString());\n      }\n      for (int i = 0; i < 2; i++) {\n        \n        BytesRefIterator iterator = list.iterator();\n        for (String string : stringList) {\n          assertEquals(string, iterator.next().utf8ToString());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}