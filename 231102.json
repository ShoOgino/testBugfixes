{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"h\", \"help\", false, \"Print this message\");\n    options.addOption(\"v\", \"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"-h\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      System.exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      System.exit(0);\n    }\n    \n    return cli;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","sourceOld":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"h\", \"help\", false, \"Print this message\");\n    options.addOption(\"v\", \"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"-h\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      System.exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      System.exit(0);\n    }\n    \n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","sourceOld":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","sourceOld":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","sourceOld":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#processCommandLineArgs(Option[],String[]).mjava","sourceNew":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n\n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n\n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n\n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        CLIO.err(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n\n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  /**\n   * Parses the command-line arguments passed by the user.\n   */\n  public static CommandLine processCommandLineArgs(Option[] customOptions, String[] args) {\n    Options options = new Options();\n    \n    options.addOption(\"help\", false, \"Print this message\");\n    options.addOption(\"verbose\", false, \"Generate verbose log messages\");\n    \n    if (customOptions != null) {\n      for (int i = 0; i < customOptions.length; i++)\n        options.addOption(customOptions[i]);\n    }\n    \n    CommandLine cli = null;\n    try {\n      cli = (new GnuParser()).parse(options, args);\n    } catch (ParseException exp) {\n      boolean hasHelpArg = false;\n      if (args != null && args.length > 0) {\n        for (int z = 0; z < args.length; z++) {\n          if (\"--help\".equals(args[z]) || \"-help\".equals(args[z])) {\n            hasHelpArg = true;\n            break;\n          }\n        }\n      }\n      if (!hasHelpArg) {\n        System.err.println(\"Failed to parse command-line arguments due to: \"\n            + exp.getMessage());\n      }\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(1);\n    }\n    \n    if (cli.hasOption(\"help\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(SolrCLI.class.getName(), options);\n      exit(0);\n    }\n    \n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["709714c6ee47950678dd2d2ef4e0473886909226"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4ca20be81c9284c840498143264e583ccbb8525a","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["4ca20be81c9284c840498143264e583ccbb8525a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4ca20be81c9284c840498143264e583ccbb8525a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"709714c6ee47950678dd2d2ef4e0473886909226":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}