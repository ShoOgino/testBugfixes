{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":["8d6c98c690b593cea727f68742684c979ead1a0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}