{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","commits":[{"id":"b9626938d906e220bc834fca668189e7cdf4985d","date":1498723309,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermContext that will give an overall df and ttf\n    // equal to 1\n    TermContext context = new TermContext(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n          context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermContext that will give an overall df and ttf\n    // equal to 1\n    TermContext context = new TermContext(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n          context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermContext that will give an overall df and ttf\n    // equal to 1\n    TermContext context = new TermContext(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n          context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermStates that will give an overall df and ttf\n    // equal to 1\n    TermStates termStates = new TermStates(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - termStates.docFreq(); // we want the total df and ttf to be 1\n          termStates.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, termStates);\n  }\n\n","sourceOld":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermContext that will give an overall df and ttf\n    // equal to 1\n    TermContext context = new TermContext(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n          context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/NearestFuzzyQuery#newTermQuery(IndexReader,Term).mjava","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermStates that will give an overall df and ttf\n    // equal to 1\n    TermStates termStates = new TermStates(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - termStates.docFreq(); // we want the total df and ttf to be 1\n          termStates.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, termStates);\n  }\n\n","sourceOld":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    // we build an artificial TermContext that will give an overall df and ttf\n    // equal to 1\n    TermContext context = new TermContext(reader.getContext());\n    for (LeafReaderContext leafContext : reader.leaves()) {\n      Terms terms = leafContext.reader().terms(term.field());\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n          context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n        }\n      }\n    }\n    return new TermQuery(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","a6e9f769521480a623f897c0d59089b919fa4239"],"b9626938d906e220bc834fca668189e7cdf4985d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6e9f769521480a623f897c0d59089b919fa4239":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9626938d906e220bc834fca668189e7cdf4985d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b9626938d906e220bc834fca668189e7cdf4985d":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9626938d906e220bc834fca668189e7cdf4985d","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}