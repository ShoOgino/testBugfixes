{"path":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","commits":[{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/StoredDocument#asIndexable().mjava","sourceNew":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  * @return a new instance of Document representation of this StoredDocument\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n     \n      add(newField);\n    }\n }\n\n","sourceOld":"  public Document asIndexable() {\n    Document doc = new Document();\n    \n    for (StorableField field : fields) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n      \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n      \n      doc.add(newField);\n    }\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"247f702b944ff0da1ba56a06fc13bd3eeefd2c01","date":1345138682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","sourceNew":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n     \n      add(newField);\n    }\n }\n\n","sourceOld":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  * @return a new instance of Document representation of this StoredDocument\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n     \n      add(newField);\n    }\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n     \n      add(newField);\n    }\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca4cbe98ea0b116331982aa8fa63384da90b2b2c","date":1391170591,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","sourceNew":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.numericValue();\n      }\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.binaryValue();\n      }\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.readerValue();\n      }\n     \n      add(newField);\n    }\n  }\n\n","sourceOld":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.numericValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.binaryValue();\n      if (newField.fieldsData == null) \n        newField.fieldsData = field.readerValue();\n     \n      add(newField);\n    }\n }\n\n","bugFix":["409324b31a1419d7c05a38211168cf317e39be77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#Document(StoredDocument).mjava","sourceNew":null,"sourceOld":"  /**\n  * Creates a Document from StoredDocument so it that can be used e.g. for another\n  * round of indexing.\n  *\n  */\n  public Document(StoredDocument storedDoc) {\n    for (StorableField field : storedDoc.getFields()) {\n      Field newField = new Field(field.name(), (FieldType) field.fieldType());\n     \n      newField.fieldsData = field.stringValue();\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.numericValue();\n      }\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.binaryValue();\n      }\n      if (newField.fieldsData == null) {\n        newField.fieldsData = field.readerValue();\n      }\n     \n      add(newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"ca4cbe98ea0b116331982aa8fa63384da90b2b2c":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["409324b31a1419d7c05a38211168cf317e39be77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ca4cbe98ea0b116331982aa8fa63384da90b2b2c"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"1d028314cced5858683a1bb4741423d0f934257b":["ca4cbe98ea0b116331982aa8fa63384da90b2b2c"],"ca4cbe98ea0b116331982aa8fa63384da90b2b2c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}