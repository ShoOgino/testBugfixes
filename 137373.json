{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"469904587e47b677b125b4bb303304e1ef04e961","date":1393861559,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,AnalyticsComponent.COMPONENT_NAME,AnalyticsComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private void loadSearchComponents()\n  {\n    Map<String, SearchComponent> instances = createInstances(SearchComponent.standard_components);\n    for (Map.Entry<String, SearchComponent> e : instances.entrySet()) e.getValue().setName(e.getKey());\n    searchComponents.init(instances, this);\n\n    for (String name : searchComponents.keySet()) {\n      if (searchComponents.isLoaded(name) && searchComponents.get(name) instanceof HighlightComponent) {\n        if (!HighlightComponent.COMPONENT_NAME.equals(name)) {\n          searchComponents.put(HighlightComponent.COMPONENT_NAME, searchComponents.getRegistry().get(name));\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private void loadSearchComponents()\n  {\n    Map<String, SearchComponent> instances = createInstances(SearchComponent.standard_components);\n    for (Map.Entry<String, SearchComponent> e : instances.entrySet()) e.getValue().setName(e.getKey());\n    searchComponents.init(instances, this);\n\n    for (String name : searchComponents.keySet()) {\n      if (searchComponents.isLoaded(name) && searchComponents.get(name) instanceof HighlightComponent) {\n        if (!HighlightComponent.COMPONENT_NAME.equals(name)) {\n          searchComponents.put(HighlightComponent.COMPONENT_NAME, searchComponents.getRegistry().get(name));\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);\n    addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);\n\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private void loadSearchComponents() {\n    Map<String, SearchComponent> instances = createInstances(SearchComponent.standard_components);\n    for (Map.Entry<String, SearchComponent> e : instances.entrySet()) e.getValue().setName(e.getKey());\n    searchComponents.init(instances, this);\n\n    for (String name : searchComponents.keySet()) {\n      if (searchComponents.isLoaded(name) && searchComponents.get(name) instanceof HighlightComponent) {\n        if (!HighlightComponent.COMPONENT_NAME.equals(name)) {\n          searchComponents.put(HighlightComponent.COMPONENT_NAME, searchComponents.getRegistry().get(name));\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private void loadSearchComponents()\n  {\n    Map<String, SearchComponent> instances = createInstances(SearchComponent.standard_components);\n    for (Map.Entry<String, SearchComponent> e : instances.entrySet()) e.getValue().setName(e.getKey());\n    searchComponents.init(instances, this);\n\n    for (String name : searchComponents.keySet()) {\n      if (searchComponents.isLoaded(name) && searchComponents.get(name) instanceof HighlightComponent) {\n        if (!HighlightComponent.COMPONENT_NAME.equals(name)) {\n          searchComponents.put(HighlightComponent.COMPONENT_NAME, searchComponents.getRegistry().get(name));\n        }\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["469904587e47b677b125b4bb303304e1ef04e961"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"469904587e47b677b125b4bb303304e1ef04e961":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0f719faa74f7213d4a395510dbc1f1b7cb178484","9aea0485ecacb6734c17da2d02569816c23a69c1"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["bd0ef6574805f3cb9880e0983b7548a6aa933508","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"469904587e47b677b125b4bb303304e1ef04e961":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["469904587e47b677b125b4bb303304e1ef04e961","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}