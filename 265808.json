{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap norm = new NormalizeCharMap();\n    norm.add(\"a\", \"一二\");\n    norm.add(\"b\", \"二三\");\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56584ae6fa4912e4dd6e818a7da3799cf807234f","date":1339586560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":["680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, CharReader.get(reader));\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n    \n    analyzer.close();\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cjk/TestCJKAnalyzer#testChangedOffsets().mjava","sourceNew":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n    \n    analyzer.close();\n  }\n\n","sourceOld":"  /** test that offsets are correct when mappingcharfilter is previously applied */\n  public void testChangedOffsets() throws IOException {\n    final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add(\"a\", \"一二\");\n    builder.add(\"b\", \"二三\");\n    final NormalizeCharMap norm = builder.build();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new StandardTokenizer();\n        return new TokenStreamComponents(tokenizer, new CJKBigramFilter(tokenizer));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MappingCharFilter(norm, reader);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"一二\", \"二二\", \"二三\" },\n        new int[] { 0, 0, 1 },\n        new int[] { 1, 1, 2 });\n    \n    // note: offsets are strange since this is how the charfilter maps them... \n    // before bigramming, the 4 tokens look like:\n    //   { 0, 0, 1, 1 },\n    //   { 0, 1, 1, 2 }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["fc706b1e03a539d44d99998108feb684bb44cbb2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}