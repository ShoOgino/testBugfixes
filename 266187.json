{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#fromJSON(byte[],int).mjava","commits":[{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#fromJSON(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an instance from the JSON bytes read from zookeeper. Generally this should\n   * only be done by a ZkStateReader.\n   *\n   * @param bytes The bytes read via a getData request to zookeeper (possibly null)\n   * @param zNodeVersion the version of the data in zookeeper that this instance corresponds to\n   * @return A new immutable Aliases object\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static Aliases fromJSON(byte[] bytes, int zNodeVersion) {\n    Map<String, Map> aliasMap;\n    if (bytes == null || bytes.length == 0) {\n      aliasMap = Collections.emptyMap();\n    } else {\n      aliasMap = (Map<String, Map>) Utils.fromJSON(bytes);\n    }\n\n    Map colAliases = aliasMap.getOrDefault(COLLECTION, Collections.emptyMap());\n    colAliases = convertMapOfCommaDelimitedToMapOfList(colAliases); // also unmodifiable\n\n    Map<String, Map<String, String>> colMeta = aliasMap.getOrDefault(COLLECTION_METADATA, Collections.emptyMap());\n    colMeta.replaceAll((k, metaMap) -> Collections.unmodifiableMap(metaMap));\n\n    return new Aliases(colAliases, colMeta, zNodeVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#fromJSON(byte[],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#fromJSON(byte[],int).mjava","sourceNew":"  /**\n   * Create an instance from the JSON bytes read from zookeeper. Generally this should\n   * only be done by a ZkStateReader.\n   *\n   * @param bytes The bytes read via a getData request to zookeeper (possibly null)\n   * @param zNodeVersion the version of the data in zookeeper that this instance corresponds to\n   * @return A new immutable Aliases object\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Aliases fromJSON(byte[] bytes, int zNodeVersion) {\n    Map<String, Map> aliasMap;\n    if (bytes == null || bytes.length == 0) {\n      aliasMap = Collections.emptyMap();\n    } else {\n      aliasMap = (Map<String, Map>) Utils.fromJSON(bytes);\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map colAliases = aliasMap.getOrDefault(COLLECTION, Collections.emptyMap());\n    colAliases = convertMapOfCommaDelimitedToMapOfList(colAliases); // also unmodifiable\n\n    Map<String, Map<String, String>> colMeta = aliasMap.getOrDefault(COLLECTION_METADATA, Collections.emptyMap());\n    colMeta.replaceAll((k, metaMap) -> Collections.unmodifiableMap(metaMap));\n\n    return new Aliases(colAliases, colMeta, zNodeVersion);\n  }\n\n","sourceOld":"  /**\n   * Create an instance from the JSON bytes read from zookeeper. Generally this should\n   * only be done by a ZkStateReader.\n   *\n   * @param bytes The bytes read via a getData request to zookeeper (possibly null)\n   * @param zNodeVersion the version of the data in zookeeper that this instance corresponds to\n   * @return A new immutable Aliases object\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static Aliases fromJSON(byte[] bytes, int zNodeVersion) {\n    Map<String, Map> aliasMap;\n    if (bytes == null || bytes.length == 0) {\n      aliasMap = Collections.emptyMap();\n    } else {\n      aliasMap = (Map<String, Map>) Utils.fromJSON(bytes);\n    }\n\n    Map colAliases = aliasMap.getOrDefault(COLLECTION, Collections.emptyMap());\n    colAliases = convertMapOfCommaDelimitedToMapOfList(colAliases); // also unmodifiable\n\n    Map<String, Map<String, String>> colMeta = aliasMap.getOrDefault(COLLECTION_METADATA, Collections.emptyMap());\n    colMeta.replaceAll((k, metaMap) -> Collections.unmodifiableMap(metaMap));\n\n    return new Aliases(colAliases, colMeta, zNodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"215e40821821b2df2e69355e208532c05ef095a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["215e40821821b2df2e69355e208532c05ef095a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"215e40821821b2df2e69355e208532c05ef095a5":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["215e40821821b2df2e69355e208532c05ef095a5"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}