{"path":"lucene/src/java/org/apache/lucene/search/FieldCache#getTermsIndex(AtomicIndexReader,String,boolean).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getTermsIndex(AtomicIndexReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getTermsIndex(IndexReader,String,boolean).mjava","sourceNew":"  /** Expert: just like {@link\n   *  #getTermsIndex(AtomicIndexReader,String)}, but you can specify\n   *  whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTermsIndex getTermsIndex (AtomicIndexReader reader, String field, boolean fasterButMoreRAM)\n  throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link\n   *  #getTermsIndex(IndexReader,String)}, but you can specify\n   *  whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTermsIndex getTermsIndex (IndexReader reader, String field, boolean fasterButMoreRAM)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getTermsIndex(AtomicReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getTermsIndex(AtomicIndexReader,String,boolean).mjava","sourceNew":"  /** Expert: just like {@link\n   *  #getTermsIndex(AtomicReader,String)}, but you can specify\n   *  whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTermsIndex getTermsIndex (AtomicReader reader, String field, boolean fasterButMoreRAM)\n  throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link\n   *  #getTermsIndex(AtomicIndexReader,String)}, but you can specify\n   *  whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTermsIndex getTermsIndex (AtomicIndexReader reader, String field, boolean fasterButMoreRAM)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}