{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBitsUpTo(int,FST.BytesReader).mjava","commits":[{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBitsUpTo(int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#countBitsUpTo(long[],int,int).mjava","sourceNew":"  /**\n   * Counts the bits set up to the given bit zero-based index, exclusive.\n   * <br>In other words, how many 1s there are up to the bit at the given index excluded.\n   * <br>Example: bitIndex 10 means the third bit on the right of the second byte.\n   *\n   * @param bitIndex The bit zero-based index, exclusive. It must be greater than or equal to 0, and less than or equal\n   *                 to {@code number of bit-table bytes * Byte.SIZE}.\n   * @param reader   The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBitsUpTo(int bitIndex, FST.BytesReader reader) throws IOException {\n    assert bitIndex >= 0 : \"bitIndex=\" + bitIndex;\n    int bitCount = 0;\n    for (int i = bitIndex >> 6; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += Long.bitCount(read8Bytes(reader));\n    }\n    int remainingBits;\n    if ((remainingBits = bitIndex & (Long.SIZE - 1)) != 0) {\n      int numRemainingBytes = (remainingBits + (Byte.SIZE - 1)) >> 3;\n      // Prepare a mask with 1s on the right up to bitIndex exclusive.\n      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.\n      // Count the bits set only within the mask part, so up to bitIndex exclusive.\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader) & mask);\n    }\n    return bitCount;\n  }\n\n","sourceOld":"  /**\n   * Counts the bits set up to the given bit zero-based index, exclusive.\n   * <br>In other words, how many 1s there are up to the bit at the given index excluded.\n   * <br>Example: bitIndex 66 means the third bit on the right of the second long.\n   *\n   * @param bits     The bits stored in an array of long for efficiency.\n   * @param numLongs The number of longs in {@code bits} to consider.\n   * @param bitIndex The bit zero-based index, exclusive. It must be greater than or equal to 0,\n   *                 and less than or equal to {@code numLongs * Long.SIZE}.\n   */\n  public static int countBitsUpTo(long[] bits, int numLongs, int bitIndex) {\n    assert numLongs >= 0 && numLongs <= bits.length && bitIndex >= 0 && bitIndex <= numLongs * Long.SIZE\n        : \"bitIndex=\" + bitIndex + \" numLongs=\" + numLongs + \" bits.length=\" + bits.length;\n    int bitCount = 0;\n    int lastLong = bitIndex / Long.SIZE;\n    for (int i = 0; i < lastLong; i++) {\n      // Count the bits set for all plain longs.\n      bitCount += Long.bitCount(bits[i]);\n    }\n    if (lastLong < numLongs) {\n      // Prepare a mask with 1s on the right up to bitIndex exclusive.\n      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.\n      // Count the bits set only within the mask part, so up to bitIndex exclusive.\n      bitCount += Long.bitCount(bits[lastLong] & mask);\n    }\n    return bitCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4028f65e476b6d429265cd35d71dc37de33a161","date":1586777845,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBitsUpTo(int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BitTableUtil#countBitsUpTo(int,FST.BytesReader).mjava","sourceNew":"  /**\n   * Counts the bits set up to the given bit zero-based index, exclusive.\n   * <br>In other words, how many 1s there are up to the bit at the given index excluded.\n   * <br>Example: bitIndex 10 means the third bit on the right of the second byte.\n   *\n   * @param bitIndex The bit zero-based index, exclusive. It must be greater than or equal to 0, and less than or equal\n   *                 to {@code number of bit-table bytes * Byte.SIZE}.\n   * @param reader   The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBitsUpTo(int bitIndex, FST.BytesReader reader) throws IOException {\n    assert bitIndex >= 0 : \"bitIndex=\" + bitIndex;\n    int bitCount = 0;\n    for (int i = bitIndex >> 6; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += bitCount8Bytes(reader);\n    }\n    int remainingBits;\n    if ((remainingBits = bitIndex & (Long.SIZE - 1)) != 0) {\n      int numRemainingBytes = (remainingBits + (Byte.SIZE - 1)) >> 3;\n      // Prepare a mask with 1s on the right up to bitIndex exclusive.\n      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.\n      // Count the bits set only within the mask part, so up to bitIndex exclusive.\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader) & mask);\n    }\n    return bitCount;\n  }\n\n","sourceOld":"  /**\n   * Counts the bits set up to the given bit zero-based index, exclusive.\n   * <br>In other words, how many 1s there are up to the bit at the given index excluded.\n   * <br>Example: bitIndex 10 means the third bit on the right of the second byte.\n   *\n   * @param bitIndex The bit zero-based index, exclusive. It must be greater than or equal to 0, and less than or equal\n   *                 to {@code number of bit-table bytes * Byte.SIZE}.\n   * @param reader   The {@link FST.BytesReader} to read. It must be positioned at the beginning of the bit-table.\n   */\n  static int countBitsUpTo(int bitIndex, FST.BytesReader reader) throws IOException {\n    assert bitIndex >= 0 : \"bitIndex=\" + bitIndex;\n    int bitCount = 0;\n    for (int i = bitIndex >> 6; i > 0; i--) {\n      // Count the bits set for all plain longs.\n      bitCount += Long.bitCount(read8Bytes(reader));\n    }\n    int remainingBits;\n    if ((remainingBits = bitIndex & (Long.SIZE - 1)) != 0) {\n      int numRemainingBytes = (remainingBits + (Byte.SIZE - 1)) >> 3;\n      // Prepare a mask with 1s on the right up to bitIndex exclusive.\n      long mask = (1L << bitIndex) - 1L; // Shifts are mod 64.\n      // Count the bits set only within the mask part, so up to bitIndex exclusive.\n      bitCount += Long.bitCount(readUpTo8Bytes(numRemainingBytes, reader) & mask);\n    }\n    return bitCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4028f65e476b6d429265cd35d71dc37de33a161":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4028f65e476b6d429265cd35d71dc37de33a161"]},"commit2Childs":{"b4028f65e476b6d429265cd35d71dc37de33a161":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["b4028f65e476b6d429265cd35d71dc37de33a161"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}