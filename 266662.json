{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getDenseScorer(LeafReader,Weight,float,ScoreMode).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getDenseScorer(LeafReader,Weight,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getDenseScorer(LeafReader,Weight,float,ScoreMode).mjava","sourceNew":"    /** Scorer used for WITHIN and DISJOINT **/\n    private Scorer getDenseScorer(LeafReader reader, Weight weight, final float boost, ScoreMode scoreMode) throws IOException {\n      final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n      final long[] cost;\n      if (values.getDocCount() == reader.maxDoc()) {\n        cost = new long[]{values.size()};\n        // In this case we can spare one visit to the tree, all documents\n        // are potential matches\n        result.set(0, reader.maxDoc());\n        // Remove false positives\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n      } else {\n        cost = new long[]{0};\n        // Get potential  documents.\n        final FixedBitSet excluded = new FixedBitSet(reader.maxDoc());\n        values.intersect(getDenseVisitor(query, result, excluded, cost));\n        result.andNot(excluded);\n        // Remove false positives, we only care about the inner nodes as intersecting\n        // leaf nodes have been already taken into account. Unfortunately this\n        // process still reads the leaf nodes.\n        values.intersect(getShallowInverseDenseVisitor(query, result));\n      }\n      assert cost[0] > 0;\n      final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** Scorer used for WITHIN and DISJOINT **/\n    private Scorer getDenseScorer(LeafReader reader, Weight weight, final float boost, ScoreMode scoreMode) throws IOException {\n      final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n      final long[] cost;\n      if (values.getDocCount() == reader.maxDoc()) {\n        cost = new long[]{values.size()};\n        // In this case we can spare one visit to the tree, all documents\n        // are potential matches\n        result.set(0, reader.maxDoc());\n        // Remove false positives\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n      } else {\n        cost = new long[]{0};\n        // Get potential  documents.\n        final FixedBitSet excluded = new FixedBitSet(reader.maxDoc());\n        values.intersect(getDenseVisitor(query, result, excluded, cost));\n        result.andNot(excluded);\n        // Remove false positives, we only care about the inner nodes as intersecting\n        // leaf nodes have been already taken into account. Unfortunately this\n        // process still reads the leaf nodes.\n        values.intersect(getShallowInverseDenseVisitor(query, result));\n      }\n      assert cost[0] > 0;\n      final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb33f7f48bf40ff978c9494feddc80c8701678","date":1600408258,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getDenseScorer(LeafReader,Weight,float,ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getDenseScorer(LeafReader,Weight,float,ScoreMode).mjava","sourceNew":"    /** Scorer used for WITHIN and DISJOINT **/\n    private Scorer getDenseScorer(LeafReader reader, Weight weight, final float boost, ScoreMode scoreMode) throws IOException {\n      final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n      final long[] cost;\n      if (values.getDocCount() == reader.maxDoc()) {\n        cost = new long[]{values.size()};\n        // In this case we can spare one visit to the tree, all documents\n        // are potential matches\n        result.set(0, reader.maxDoc());\n        // Remove false positives\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n      } else {\n        cost = new long[]{0};\n        // Get potential  documents.\n        final FixedBitSet excluded = new FixedBitSet(reader.maxDoc());\n        values.intersect(getDenseVisitor(query, result, excluded, cost));\n        result.andNot(excluded);\n        // Remove false positives, we only care about the inner nodes as intersecting\n        // leaf nodes have been already taken into account. Unfortunately this\n        // process still reads the leaf nodes.\n        values.intersect(getShallowInverseDenseVisitor(query, result));\n      }\n      assert cost[0] > 0 || result.cardinality() == 0;\n      final DocIdSetIterator iterator = cost[0] == 0 ? DocIdSetIterator.empty() : new BitSetIterator(result, cost[0]);\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** Scorer used for WITHIN and DISJOINT **/\n    private Scorer getDenseScorer(LeafReader reader, Weight weight, final float boost, ScoreMode scoreMode) throws IOException {\n      final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n      final long[] cost;\n      if (values.getDocCount() == reader.maxDoc()) {\n        cost = new long[]{values.size()};\n        // In this case we can spare one visit to the tree, all documents\n        // are potential matches\n        result.set(0, reader.maxDoc());\n        // Remove false positives\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n      } else {\n        cost = new long[]{0};\n        // Get potential  documents.\n        final FixedBitSet excluded = new FixedBitSet(reader.maxDoc());\n        values.intersect(getDenseVisitor(query, result, excluded, cost));\n        result.andNot(excluded);\n        // Remove false positives, we only care about the inner nodes as intersecting\n        // leaf nodes have been already taken into account. Unfortunately this\n        // process still reads the leaf nodes.\n        values.intersect(getShallowInverseDenseVisitor(query, result));\n      }\n      assert cost[0] > 0;\n      final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73bb33f7f48bf40ff978c9494feddc80c8701678"]},"commit2Childs":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["73bb33f7f48bf40ff978c9494feddc80c8701678"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}