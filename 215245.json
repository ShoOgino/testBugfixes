{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      fromDocTerms.get(doc, spare);\n      collectorTerms.add(spare);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTerms.get(doc, spare);\n      collectorTerms.add(spare);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      fromDocTerms.get(doc, spare);\n      collectorTerms.add(spare);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTerms.get(doc, spare);\n      collectorTerms.add(spare);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      collectorTerms.add(fromDocTerms.getTerm(doc, spare));\n    }\n\n","bugFix":["3cd7782b032787117c986a2278d05b25056b2eba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = fromDocTerms.get(doc);\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTerms.get(doc, spare);\n      collectorTerms.add(spare);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","date":1449514606,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = docValues.get(doc);\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = fromDocTerms.get(doc);\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.docID() < doc) {\n        docValues.advance(doc);\n      }\n      BytesRef term;\n      if (docValues.docID() == doc) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = docValues.get(doc);\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.docID() < doc) {\n        docValues.advance(doc);\n      }\n      BytesRef term;\n      if (docValues.docID() == doc) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = docValues.get(doc);\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.docID() < doc) {\n        docValues.advance(doc);\n      }\n      BytesRef term;\n      if (docValues.docID() == doc) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final BytesRef term = docValues.get(doc);\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      BytesRef term;\n      if (docValues.advanceExact(doc)) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.docID() < doc) {\n        docValues.advance(doc);\n      }\n      BytesRef term;\n      if (docValues.docID() == doc) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.SV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      BytesRef term;\n      if (docValues.advanceExact(doc)) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.docID() < doc) {\n        docValues.advance(doc);\n      }\n      BytesRef term;\n      if (docValues.docID() == doc) {\n        term = docValues.binaryValue();\n      } else {\n        term = new BytesRef(BytesRef.EMPTY_BYTES);\n      }\n      collectorTerms.add(term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2dd9934a49477c83301120ba51827d91eb3606d5","7530de27b87b961b51f01bd1299b7004d46e8823"],"2dd9934a49477c83301120ba51827d91eb3606d5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2dd9934a49477c83301120ba51827d91eb3606d5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2dd9934a49477c83301120ba51827d91eb3606d5","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}