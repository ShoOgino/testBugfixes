{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermFreqVector(int,String).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {\n    // Check if this field is invalid or has no stored term vector\n    ensureOpen();\n    FieldInfo fi = core.fieldInfos.fieldInfo(field);\n    if (fi == null || !fi.storeTermVector) \n      return null;\n    \n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null)\n      return null;\n    \n    return termVectorsReader.get(docNumber, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1514b41e236336b1aae6b4ab4493995ef80a321e","date":1324465707,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1514b41e236336b1aae6b4ab4493995ef80a321e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1514b41e236336b1aae6b4ab4493995ef80a321e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1514b41e236336b1aae6b4ab4493995ef80a321e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1514b41e236336b1aae6b4ab4493995ef80a321e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}