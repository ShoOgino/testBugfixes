{"path":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","pathOld":"/dev/null","sourceNew":"    /** Creates a new instance of DisjunctionMaxScorer\r\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\r\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\r\n        super(similarity);\r\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca9e1c07be7f899d56eb37b44a2e4ca252744a52","date":1134440386,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","sourceNew":"    /** Creates a new instance of DisjunctionMaxScorer\r\n     * @param tieBreakerMultiplier Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result.\r\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\r\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\r\n        super(similarity);\r\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    }\r\n\n","sourceOld":"    /** Creates a new instance of DisjunctionMaxScorer\r\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\r\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\r\n        super(similarity);\r\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","sourceNew":"    /** Creates a new instance of DisjunctionMaxScorer\n     * @param tieBreakerMultiplier Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result.\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\n        super(similarity);\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\n    }\n\n","sourceOld":"    /** Creates a new instance of DisjunctionMaxScorer\r\n     * @param tieBreakerMultiplier Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result.\r\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\r\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\r\n        super(similarity);\r\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity).mjava","sourceNew":null,"sourceOld":"    /** Creates a new instance of DisjunctionMaxScorer\n     * @param tieBreakerMultiplier Multiplier applied to non-maximum-scoring subqueries for a document as they are summed into the result.\n     * @param similarity -- not used since our definition involves neither coord nor terms directly */\n    public DisjunctionMaxScorer(float tieBreakerMultiplier, Similarity similarity) {\n        super(similarity);\n        this.tieBreakerMultiplier = tieBreakerMultiplier;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["2123bddbd65dea198cac380540636ce43a880403"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}