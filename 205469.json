{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber, upperNumber;\n    \n    if (lowerNumericNode != null) {\n      lowerNumber = lowerNumericNode.getValue();\n    } else {\n      lowerNumber = null;\n    }\n    \n    if (upperNumericNode != null) {\n      upperNumber = upperNumericNode.getValue();\n    } else {\n      upperNumber = null;\n    }\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericField.DataType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber, upperNumber;\n    \n    if (lowerNumericNode != null) {\n      lowerNumber = lowerNumericNode.getValue();\n    } else {\n      lowerNumber = null;\n    }\n    \n    if (upperNumericNode != null) {\n      upperNumber = upperNumericNode.getValue();\n    } else {\n      upperNumber = null;\n    }\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericField.DataType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericField.DataType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber, upperNumber;\n    \n    if (lowerNumericNode != null) {\n      lowerNumber = lowerNumericNode.getValue();\n    } else {\n      lowerNumber = null;\n    }\n    \n    if (upperNumericNode != null) {\n      upperNumber = upperNumericNode.getValue();\n    } else {\n      upperNumber = null;\n    }\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericField.DataType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericField.DataType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}