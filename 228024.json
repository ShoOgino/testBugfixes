{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","commits":[{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2434ed0b85e169536d867d4445ae92599339bdad","date":1403868554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 1, 1, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78ae724e55b07e7d158110151c0a7247cd54b460"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["2434ed0b85e169536d867d4445ae92599339bdad","dc2bafa00000be70227a04c29e3f885ff41e531d"],"bafca15d8e408346a67f4282ad1143b88023893b":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"2434ed0b85e169536d867d4445ae92599339bdad":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["2434ed0b85e169536d867d4445ae92599339bdad"],"78ae724e55b07e7d158110151c0a7247cd54b460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["78ae724e55b07e7d158110151c0a7247cd54b460"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","78ae724e55b07e7d158110151c0a7247cd54b460"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"2434ed0b85e169536d867d4445ae92599339bdad":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["d9a47902d6207303f5ed3e7aaca62ca33433af66","bafca15d8e408346a67f4282ad1143b88023893b"],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb2511ababf862ea11e10761c70ee560cd84510","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["2434ed0b85e169536d867d4445ae92599339bdad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}