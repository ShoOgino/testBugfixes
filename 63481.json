{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","commits":[{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"/dev/null","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"/dev/null","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"/dev/null","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws KeeperException, InterruptedException {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = MiniSolrCloudCluster.getOpenOverseer(overseers).getStateUpdateQueue();\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#createCollection(String,int).mjava","sourceNew":"    /**\n     * Create a collection.\n     * Note there's a similar but slightly different {@link OverseerTest#createCollection(String, int)}.\n     */\n    public void createCollection(String collection, int numShards) throws Exception {\n      // Create collection znode before having ClusterStateUpdater create state.json below it or it will fail.\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = MiniSolrCloudCluster.getOpenOverseer(overseers).getStateUpdateQueue();\n      q.offer(Utils.toJSON(m));\n    }\n\n","sourceOld":"    public void createCollection(String collection, int numShards) throws Exception {\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", collection,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, numShards+\"\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = MiniSolrCloudCluster.getOpenOverseer(overseers).getStateUpdateQueue();\n      q.offer(Utils.toJSON(m));\n\n    }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["28288370235ed02234a64753cdbf0c6ec096304a"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}