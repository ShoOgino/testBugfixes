{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","commits":[{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader#OrdsFieldReader(OrdsBlockTreeTermsReader,FieldInfo,long,Output,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  OrdsFieldReader(OrdsBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms,\n                  Output rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                  long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes.bytes,\n                                          rootCode.bytes.offset,\n                                          rootCode.bytes.length)).readVLong() >>> OrdsBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, OrdsBlockTreeTermsWriter.FST_OUTPUTS);\n\n      /*\n      if (true) {\n        final String dotFileName = \"/tmp/\" + parent.segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n      }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}