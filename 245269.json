{"path":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    LightAutomatonProvider myProvider = new LightAutomatonProvider() {\n      // automaton that matches quick or brown\n      private LightAutomaton quickBrownAutomaton = BasicOperations.unionLight(Arrays\n          .asList(BasicAutomata.makeStringLight(\"quick\"),\n          BasicAutomata.makeStringLight(\"brown\"),\n          BasicAutomata.makeStringLight(\"bob\")));\n      \n      @Override\n      public LightAutomaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL, myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL, myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    LightAutomatonProvider myProvider = new LightAutomatonProvider() {\n      // automaton that matches quick or brown\n      private LightAutomaton quickBrownAutomaton = BasicOperations.unionLight(Arrays\n          .asList(BasicAutomata.makeStringLight(\"quick\"),\n          BasicAutomata.makeStringLight(\"brown\"),\n          BasicAutomata.makeStringLight(\"bob\")));\n      \n      @Override\n      public LightAutomaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL, myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL, myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n      myProvider, DEFAULT_MAX_DETERMINIZED_STATES);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL, myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n      myProvider, DEFAULT_MAX_DETERMINIZED_STATES);\n    assertEquals(1, searcher.search(query, 5).totalHits.value);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = Operations.union(Arrays\n          .asList(Automata.makeString(\"quick\"),\n          Automata.makeString(\"brown\"),\n          Automata.makeString(\"bob\")));\n      \n      @Override\n      public Automaton getAutomaton(String name) {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n      myProvider, DEFAULT_MAX_DETERMINIZED_STATES);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["7530de27b87b961b51f01bd1299b7004d46e8823","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}