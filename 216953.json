{"path":"lucene/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","sourceNew":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.termLength();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.termLength();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","sourceNew":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.length();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.termLength();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9684bda54f470eef3b3ad2266a16b96370655fa9","date":1272922666,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilter#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/LengthFilter#incrementToken().mjava","sourceNew":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.length();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose term() is the right len\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    while (input.incrementToken()) {\n      int len = termAtt.length();\n      if (len >= min && len <= max) {\n          return true;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9684bda54f470eef3b3ad2266a16b96370655fa9":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9684bda54f470eef3b3ad2266a16b96370655fa9"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9684bda54f470eef3b3ad2266a16b96370655fa9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9684bda54f470eef3b3ad2266a16b96370655fa9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}