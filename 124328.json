{"path":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","commits":[{"id":"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584","date":1254399783,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"]},"commit2Childs":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}