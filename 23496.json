{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","sourceNew":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx() == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","sourceNew":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx() == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#countFSTArcs(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#main(String...).mjava","sourceNew":"  private static void countFSTArcs(String FSTFilePath) throws IOException {\n    byte[] buf = Files.readAllBytes(Paths.get(FSTFilePath));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int binarySearchArcCount = 0, directAddressingArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING) {\n        directAddressingArcCount ++;\n      } else {\n        binarySearchArcCount ++;\n      }\n    }\n    System.out.println(\"direct addressing arcs = \" + directAddressingArcCount\n        + \", binary search arcs = \" + binarySearchArcCount\n        + \" list arcs = \" + listArcCount);\n  }\n\n","sourceOld":"  public static void main(String... args) throws Exception {\n    byte[] buf = Files.readAllBytes(Paths.get(args[0]));\n    DataInput in = new ByteArrayDataInput(buf);\n    FST<BytesRef> fst = new FST<>(in, ByteSequenceOutputs.getSingleton());\n    BytesRefFSTEnum<BytesRef> fstEnum = new BytesRefFSTEnum<>(fst);\n    int sparseArrayArcCount = 0, directArrayArcCount = 0, listArcCount = 0;\n    while(fstEnum.next() != null) {\n      if (fstEnum.arcs[fstEnum.upto].bytesPerArc() == 0) {\n        listArcCount ++;\n      } else if (fstEnum.arcs[fstEnum.upto].arcIdx() == Integer.MIN_VALUE) {\n        directArrayArcCount ++;\n      } else {\n        sparseArrayArcCount ++;\n      }\n    }\n    System.out.println(\"direct arcs = \" + directArrayArcCount + \", sparse arcs = \" + sparseArrayArcCount +\n                       \" list arcs = \" + listArcCount);\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11","06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}