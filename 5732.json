{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testInvalidArguments().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testInvalidArguments().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#testInvalidArguments().mjava","sourceNew":"  public void testInvalidArguments() throws Exception {\n    int numResults = 5;\n    TopDocsCollector<ScoreDoc> tdc = doSearch(numResults);\n    \n    // start < 0\n    assertEquals(0, tdc.topDocs(-1).scoreDocs.length);\n    \n    // start > pq.size()\n    assertEquals(0, tdc.topDocs(numResults + 1).scoreDocs.length);\n    \n    // start == pq.size()\n    assertEquals(0, tdc.topDocs(numResults).scoreDocs.length);\n    \n    // howMany < 0\n    assertEquals(0, tdc.topDocs(0, -1).scoreDocs.length);\n    \n    // howMany == 0\n    assertEquals(0, tdc.topDocs(0, 0).scoreDocs.length);\n    \n  }\n\n","sourceOld":"  public void testInvalidArguments() throws Exception {\n    int numResults = 5;\n    TopDocsCollector<ScoreDoc> tdc = doSearch(numResults);\n    \n    // start < 0\n    assertEquals(0, tdc.topDocs(-1).scoreDocs.length);\n    \n    // start > pq.size()\n    assertEquals(0, tdc.topDocs(numResults + 1).scoreDocs.length);\n    \n    // start == pq.size()\n    assertEquals(0, tdc.topDocs(numResults).scoreDocs.length);\n    \n    // howMany < 0\n    assertEquals(0, tdc.topDocs(0, -1).scoreDocs.length);\n    \n    // howMany == 0\n    assertEquals(0, tdc.topDocs(0, 0).scoreDocs.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82136c301d51855046f13cc7dc01f35df55013d","date":1567692874,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testInvalidArguments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testInvalidArguments().mjava","sourceNew":"  public void testInvalidArguments() throws Exception {\n    int numResults = 5;\n    TopDocsCollector<ScoreDoc> tdc = doSearch(numResults);\n    \n    // start < 0\n    IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> {\n      tdc.topDocs(-1);\n    });\n\n    assertEquals(\"Expected value of starting position is between 0 and 5, got -1\", exception.getMessage());\n\n    // start == pq.size()\n    assertEquals(0, tdc.topDocs(numResults).scoreDocs.length);\n    \n    // howMany < 0\n    exception = expectThrows(IllegalArgumentException.class, () -> {\n      tdc.topDocs(0, -1);\n    });\n\n    assertEquals(\"Number of hits requested must be greater than 0 but value was -1\", exception.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidArguments() throws Exception {\n    int numResults = 5;\n    TopDocsCollector<ScoreDoc> tdc = doSearch(numResults);\n    \n    // start < 0\n    assertEquals(0, tdc.topDocs(-1).scoreDocs.length);\n    \n    // start > pq.size()\n    assertEquals(0, tdc.topDocs(numResults + 1).scoreDocs.length);\n    \n    // start == pq.size()\n    assertEquals(0, tdc.topDocs(numResults).scoreDocs.length);\n    \n    // howMany < 0\n    assertEquals(0, tdc.topDocs(0, -1).scoreDocs.length);\n    \n    // howMany == 0\n    assertEquals(0, tdc.topDocs(0, 0).scoreDocs.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e82136c301d51855046f13cc7dc01f35df55013d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e82136c301d51855046f13cc7dc01f35df55013d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e82136c301d51855046f13cc7dc01f35df55013d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e82136c301d51855046f13cc7dc01f35df55013d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}