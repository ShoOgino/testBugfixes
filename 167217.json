{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","sourceNew":"    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map<Entry,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fe9f050095f650614a0107d08e5ad67158c4b2d","date":1287063846,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry[T]).mjava","sourceNew":"    public Object get(IndexReader reader, Entry key, boolean setDocsWithField) throws IOException {\n      Map<Entry,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key, setDocsWithField);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public Object get(IndexReader reader, Entry<T> key) throws IOException {\n      Map<Entry<T>,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry<T>,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.creator != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      \n      // Validate new entries\n      if( key.creator.shouldValidate() ) {\n        key.creator.validate( (T)value, reader);\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fe9f050095f650614a0107d08e5ad67158c4b2d":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["6fe9f050095f650614a0107d08e5ad67158c4b2d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fe9f050095f650614a0107d08e5ad67158c4b2d"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","6fe9f050095f650614a0107d08e5ad67158c4b2d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"6fe9f050095f650614a0107d08e5ad67158c4b2d":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["6fe9f050095f650614a0107d08e5ad67158c4b2d","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["29ef99d61cda9641b6250bf9567329a6e65f901d","382fe3a6ca9745891afebda9b9a57cc158305545","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}