{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7","date":1338503231,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55561c30c3f4bcb0eaa3d228d46127942dd304a2","date":1347207123,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(DocumentsWriterPerThread.FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","date":1349855720,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(DocumentsWriterPerThread.FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedDeletesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedDeletesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedDeletesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedDeletesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedDeletesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedDeletesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedDeletesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedDeletesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedDeletesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedDeletesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedDeletesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedDeletesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedDeletesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedDeletesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedDeletesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedDeletesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7":["55561c30c3f4bcb0eaa3d228d46127942dd304a2"],"55561c30c3f4bcb0eaa3d228d46127942dd304a2":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["19b128c23e9f1b66a9f8518e95ec99fd965d0bb7"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"19b128c23e9f1b66a9f8518e95ec99fd965d0bb7":["55561c30c3f4bcb0eaa3d228d46127942dd304a2"],"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"55561c30c3f4bcb0eaa3d228d46127942dd304a2":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}