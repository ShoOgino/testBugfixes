{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","pathOld":"/dev/null","sourceNew":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      Configuration conf = new Configuration();\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      FileSystem fs;\n      try {\n        URI uri = new URI(hdfsUri);\n        fs = FileSystem.newInstance(uri, conf);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n      }\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[(int)800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c51d60d4f34c66a3ee711805d96a5fbe0a83740","date":1372986050,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","sourceNew":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[(int)800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      Configuration conf = new Configuration();\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      FileSystem fs;\n      try {\n        URI uri = new URI(hdfsUri);\n        fs = FileSystem.newInstance(uri, conf);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n      }\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[(int)800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","pathOld":"/dev/null","sourceNew":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[(int)800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","sourceNew":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[(int)800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testCorruptLog().mjava","sourceNew":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  //\n  // test that a corrupt tlog doesn't stop us from coming up\n  //\n  @Test\n  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n\n      FSDataOutputStream dos = fs.create(new Path(logDir, files[files.length-1]), (short)1);\n      dos.write(new byte[800]);  // zero out file\n      dos.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      resetExceptionIgnores();\n\n      // just make sure it responds\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      //\n      // Now test that the bad log file doesn't mess up retrieving latest versions\n      //\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      // This currently skips the bad log file and also returns the version of the clearIndex (del *:*)\n      // assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\"), \"/versions==[106,105,104]\");\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // This messes up some other tests (on windows) if we don't remove the bad log.\n      // This *should* hopefully just be because the tests are too fragile and not because of real bugs - but it should be investigated further.\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"]},"commit2Childs":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["37a0f60745e53927c4c876cfe5b5a58170f0646c","add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}