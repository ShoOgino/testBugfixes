{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testDelimiterAdd().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testDelimiterAdd().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testDelimiterAdd().mjava","sourceNew":"  @Test \n  public void testDelimiterAdd() {\n    // Test that the add() that takes a string and a delimiter\n    // works correctly. Note that unlike the constructor test above,\n    // we can't expect the capacity to grow to exactly the length of\n    // the given category, so we do not test this.\n    CategoryPath p = new CategoryPath(0, 0);\n    p.add(\"\", '/');\n    assertEquals(0, p.length());\n    assertEquals(\"\", p.toString('@'), \"\");\n    p.clear();\n    p.add(\"hello\", '/');\n    assertEquals(p.length(), 1);\n    assertEquals(p.toString('@'), \"hello\");\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.clear();\n    p.add(\"how/are/you/doing?\", '/');\n    assertEquals(p.length(), 4);\n    assertEquals(p.toString('@'), \"how@are@you@doing?\");\n    // See that this is really an add, not replace:\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.add(\"how/are/you/doing\", '/');\n    assertEquals(p.length(), 6);\n    assertEquals(p.toString('@'), \"hi@there@how@are@you@doing\");\n  }\n\n","sourceOld":"  @Test \n  public void testDelimiterAdd() {\n    // Test that the add() that takes a string and a delimiter\n    // works correctly. Note that unlike the constructor test above,\n    // we can't expect the capacity to grow to exactly the length of\n    // the given category, so we do not test this.\n    CategoryPath p = new CategoryPath(0, 0);\n    p.add(\"\", '/');\n    assertEquals(0, p.length());\n    assertEquals(\"\", p.toString('@'), \"\");\n    p.clear();\n    p.add(\"hello\", '/');\n    assertEquals(p.length(), 1);\n    assertEquals(p.toString('@'), \"hello\");\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.clear();\n    p.add(\"how/are/you/doing?\", '/');\n    assertEquals(p.length(), 4);\n    assertEquals(p.toString('@'), \"how@are@you@doing?\");\n    // See that this is really an add, not replace:\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.add(\"how/are/you/doing\", '/');\n    assertEquals(p.length(), 6);\n    assertEquals(p.toString('@'), \"hi@there@how@are@you@doing\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testDelimiterAdd().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testDelimiterAdd() {\n    // Test that the add() that takes a string and a delimiter\n    // works correctly. Note that unlike the constructor test above,\n    // we can't expect the capacity to grow to exactly the length of\n    // the given category, so we do not test this.\n    CategoryPath p = new CategoryPath(0, 0);\n    p.add(\"\", '/');\n    assertEquals(0, p.length());\n    assertEquals(\"\", p.toString('@'), \"\");\n    p.clear();\n    p.add(\"hello\", '/');\n    assertEquals(p.length(), 1);\n    assertEquals(p.toString('@'), \"hello\");\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.clear();\n    p.add(\"how/are/you/doing?\", '/');\n    assertEquals(p.length(), 4);\n    assertEquals(p.toString('@'), \"how@are@you@doing?\");\n    // See that this is really an add, not replace:\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.add(\"how/are/you/doing\", '/');\n    assertEquals(p.length(), 6);\n    assertEquals(p.toString('@'), \"hi@there@how@are@you@doing\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testDelimiterAdd().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testDelimiterAdd() {\n    // Test that the add() that takes a string and a delimiter\n    // works correctly. Note that unlike the constructor test above,\n    // we can't expect the capacity to grow to exactly the length of\n    // the given category, so we do not test this.\n    CategoryPath p = new CategoryPath(0, 0);\n    p.add(\"\", '/');\n    assertEquals(0, p.length());\n    assertEquals(\"\", p.toString('@'), \"\");\n    p.clear();\n    p.add(\"hello\", '/');\n    assertEquals(p.length(), 1);\n    assertEquals(p.toString('@'), \"hello\");\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.clear();\n    p.add(\"how/are/you/doing?\", '/');\n    assertEquals(p.length(), 4);\n    assertEquals(p.toString('@'), \"how@are@you@doing?\");\n    // See that this is really an add, not replace:\n    p.clear();\n    p.add(\"hi/there\", '/');\n    assertEquals(p.length(), 2);\n    assertEquals(p.toString('@'), \"hi@there\");\n    p.add(\"how/are/you/doing\", '/');\n    assertEquals(p.length(), 6);\n    assertEquals(p.toString('@'), \"hi@there@how@are@you@doing\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}