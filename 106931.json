{"path":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","commits":[{"id":"3a1fc1d353283abc6df64b7a678f1f280c9b9730","date":1127396338,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterTokens() throws Exception {\n    final Token tok = new Token(\"accents\", 2, 7, \"wrd\");\n    tok.setPositionIncrement(3);\n\n    SnowballFilter filter = new SnowballFilter(\n        new TokenStream() {\n          public Token next() {\n            return tok;\n          }\n        },\n        \"English\"\n    );\n\n    Token newtok = filter.next();\n\n    assertEquals(\"accent\", newtok.termText());\n    assertEquals(2, newtok.startOffset());\n    assertEquals(7, newtok.endOffset());\n    assertEquals(\"wrd\", newtok.type());\n    assertEquals(3, newtok.getPositionIncrement());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","sourceNew":"  public void testFilterTokens() throws Exception {\n    final Token tok = new Token(2, 7, \"wrd\");\n    tok.setTermBuffer(\"accents\");\n    tok.setPositionIncrement(3);\n    Payload tokPayload = new Payload(new byte[]{0,1,2,3});\n    tok.setPayload(tokPayload);\n    int tokFlags = 77;\n    tok.setFlags(tokFlags);\n\n    SnowballFilter filter = new SnowballFilter(\n        new TokenStream() {\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            return tok;\n          }\n        },\n        \"English\"\n    );\n\n    final Token reusableToken = new Token();\n    Token nextToken = filter.next(reusableToken);\n\n    assertEquals(\"accent\", nextToken.term());\n    assertEquals(2, nextToken.startOffset());\n    assertEquals(7, nextToken.endOffset());\n    assertEquals(\"wrd\", nextToken.type());\n    assertEquals(3, nextToken.getPositionIncrement());\n    assertEquals(tokFlags, nextToken.getFlags());\n    assertEquals(tokPayload, nextToken.getPayload());\n  }\n\n","sourceOld":"  public void testFilterTokens() throws Exception {\n    final Token tok = new Token(\"accents\", 2, 7, \"wrd\");\n    tok.setPositionIncrement(3);\n\n    SnowballFilter filter = new SnowballFilter(\n        new TokenStream() {\n          public Token next() {\n            return tok;\n          }\n        },\n        \"English\"\n    );\n\n    Token newtok = filter.next();\n\n    assertEquals(\"accent\", newtok.termText());\n    assertEquals(2, newtok.startOffset());\n    assertEquals(7, newtok.endOffset());\n    assertEquals(\"wrd\", newtok.type());\n    assertEquals(3, newtok.getPositionIncrement());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","sourceNew":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = (FlagsAttribute) filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","sourceOld":"  public void testFilterTokens() throws Exception {\n    final Token tok = new Token(2, 7, \"wrd\");\n    tok.setTermBuffer(\"accents\");\n    tok.setPositionIncrement(3);\n    Payload tokPayload = new Payload(new byte[]{0,1,2,3});\n    tok.setPayload(tokPayload);\n    int tokFlags = 77;\n    tok.setFlags(tokFlags);\n\n    SnowballFilter filter = new SnowballFilter(\n        new TokenStream() {\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            return tok;\n          }\n        },\n        \"English\"\n    );\n\n    final Token reusableToken = new Token();\n    Token nextToken = filter.next(reusableToken);\n\n    assertEquals(\"accent\", nextToken.term());\n    assertEquals(2, nextToken.startOffset());\n    assertEquals(7, nextToken.endOffset());\n    assertEquals(\"wrd\", nextToken.type());\n    assertEquals(3, nextToken.getPositionIncrement());\n    assertEquals(tokFlags, nextToken.getFlags());\n    assertEquals(tokPayload, nextToken.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","sourceNew":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","sourceOld":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = (FlagsAttribute) filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","sourceNew":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","sourceOld":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40ff39db4a2b90a440b97f2a7d7eda344f004ef","date":1264074978,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball#testFilterTokens().mjava","sourceNew":null,"sourceOld":"  public void testFilterTokens() throws Exception {\n    SnowballFilter filter = new SnowballFilter(new TestTokenStream(), \"English\");\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = filter.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = filter.getAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = filter.getAttribute(PositionIncrementAttribute.class);\n    FlagsAttribute flagsAtt = filter.getAttribute(FlagsAttribute.class);\n    \n    filter.incrementToken();\n\n    assertEquals(\"accent\", termAtt.term());\n    assertEquals(2, offsetAtt.startOffset());\n    assertEquals(7, offsetAtt.endOffset());\n    assertEquals(\"wrd\", typeAtt.type());\n    assertEquals(3, posIncAtt.getPositionIncrement());\n    assertEquals(77, flagsAtt.getFlags());\n    assertEquals(new Payload(new byte[]{0,1,2,3}), payloadAtt.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["3a1fc1d353283abc6df64b7a678f1f280c9b9730"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"3a1fc1d353283abc6df64b7a678f1f280c9b9730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a1fc1d353283abc6df64b7a678f1f280c9b9730"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["d40ff39db4a2b90a440b97f2a7d7eda344f004ef"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"3a1fc1d353283abc6df64b7a678f1f280c9b9730":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"d40ff39db4a2b90a440b97f2a7d7eda344f004ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}