{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses_Lucene().mjava","commits":[{"id":"a2be0a2886c76942ff986465eabde7b858895dc9","date":1555349228,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses_Lucene().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = BooleanQuery.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    // this should trip the lucene level global BooleanQuery.getMaxClauseCount() limit,\n    // causing a parsing error, before Solr even get's a chance to enforce it's lower level limit\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(BooleanQuery.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    // but should still work as a filter query since TermsQuery can be used...\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses_Lucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testManyClauses_Lucene().mjava","sourceNew":"  @Test\n  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = IndexSearcher.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    // this should trip the lucene level global BooleanQuery.getMaxClauseCount() limit,\n    // causing a parsing error, before Solr even get's a chance to enforce it's lower level limit\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(IndexSearcher.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    // but should still work as a filter query since TermsQuery can be used...\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","sourceOld":"  @Test\n  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = BooleanQuery.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; // 10 terms\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    // this should trip the lucene level global BooleanQuery.getMaxClauseCount() limit,\n    // causing a parsing error, before Solr even get's a chance to enforce it's lower level limit\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(BooleanQuery.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    // but should still work as a filter query since TermsQuery can be used...\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2be0a2886c76942ff986465eabde7b858895dc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["a2be0a2886c76942ff986465eabde7b858895dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"a2be0a2886c76942ff986465eabde7b858895dc9":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2be0a2886c76942ff986465eabde7b858895dc9"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}