{"path":"src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        put(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        adjustTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        put(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        adjustTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        put(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        adjustTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}