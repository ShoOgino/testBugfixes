{"path":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","commits":[{"id":"d1475fdbacd73c160adc96a10aadc123d489b583","date":1246052926,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopen() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // TODO: doesn't currently work going from segment -> multi\n    // assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67c235d01c1c73de7adf247bea37221dd735dcd4","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b686cf6ff271c64958ed15ae4d092773448309cd","date":1247773595,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n  }\n\n","sourceOld":"  public void testReopen() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // TODO: doesn't currently work going from segment -> multi\n    // assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67c235d01c1c73de7adf247bea37221dd735dcd4","date":1253647387,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n  }\n\n","bugFix":["d1475fdbacd73c160adc96a10aadc123d489b583"],"bugIntro":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d1475fdbacd73c160adc96a10aadc123d489b583":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67c235d01c1c73de7adf247bea37221dd735dcd4":["b686cf6ff271c64958ed15ae4d092773448309cd"],"b686cf6ff271c64958ed15ae4d092773448309cd":["d1475fdbacd73c160adc96a10aadc123d489b583"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["67c235d01c1c73de7adf247bea37221dd735dcd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1475fdbacd73c160adc96a10aadc123d489b583":["b686cf6ff271c64958ed15ae4d092773448309cd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d1475fdbacd73c160adc96a10aadc123d489b583"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67c235d01c1c73de7adf247bea37221dd735dcd4":["ad94625fb8d088209f46650c8097196fec67f00c"],"b686cf6ff271c64958ed15ae4d092773448309cd":["67c235d01c1c73de7adf247bea37221dd735dcd4"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}