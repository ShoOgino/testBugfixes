{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testMergeCalledOnTwoFormats().mjava","commits":[{"id":"132f1575a9078b618f9e1c35ac94f06444006662","date":1475595294,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testMergeCalledOnTwoFormats().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingPostingsFormatWrapper pf1 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n    MergeRecordingPostingsFormatWrapper pf2 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        switch (field) {\n          case \"f1\":\n          case \"f2\":\n            return pf1;\n\n          case \"f3\":\n          case \"f4\":\n            return pf2;\n\n          default:\n            return super.getPostingsFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f1\", \"val1\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val2\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 3)); // Points are not indexed as postings and should not appear in the merge fields\n    doc.add(new StringField(\"f4\", \"val4\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new StringField(\"f1\", \"val5\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val6\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 7));\n    doc.add(new StringField(\"f4\", \"val8\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, pf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"f1\", \"f2\")), new HashSet<>(pf1.fieldNames));\n    assertEquals(1, pf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"f4\"), pf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c2c0e5b14f85c854b18545f05a3158cca0fcea2","date":1475662243,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testMergeCalledOnTwoFormats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testMergeCalledOnTwoFormats().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingPostingsFormatWrapper pf1 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n    MergeRecordingPostingsFormatWrapper pf2 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        switch (field) {\n          case \"f1\":\n          case \"f2\":\n            return pf1;\n\n          case \"f3\":\n          case \"f4\":\n            return pf2;\n\n          default:\n            return super.getPostingsFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f1\", \"val1\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val2\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 3)); // Points are not indexed as postings and should not appear in the merge fields\n    doc.add(new StringField(\"f4\", \"val4\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new StringField(\"f1\", \"val5\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val6\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 7));\n    doc.add(new StringField(\"f4\", \"val8\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, pf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"f1\", \"f2\")), new HashSet<>(pf1.fieldNames));\n    assertEquals(1, pf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"f4\"), pf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingPostingsFormatWrapper pf1 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n    MergeRecordingPostingsFormatWrapper pf2 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        switch (field) {\n          case \"f1\":\n          case \"f2\":\n            return pf1;\n\n          case \"f3\":\n          case \"f4\":\n            return pf2;\n\n          default:\n            return super.getPostingsFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f1\", \"val1\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val2\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 3)); // Points are not indexed as postings and should not appear in the merge fields\n    doc.add(new StringField(\"f4\", \"val4\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new StringField(\"f1\", \"val5\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val6\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 7));\n    doc.add(new StringField(\"f4\", \"val8\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, pf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"f1\", \"f2\")), new HashSet<>(pf1.fieldNames));\n    assertEquals(1, pf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"f4\"), pf2.fieldNames);\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testMergeCalledOnTwoFormats().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingPostingsFormatWrapper pf1 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n    MergeRecordingPostingsFormatWrapper pf2 = new MergeRecordingPostingsFormatWrapper(TestUtil.getDefaultPostingsFormat());\n\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        switch (field) {\n          case \"f1\":\n          case \"f2\":\n            return pf1;\n\n          case \"f3\":\n          case \"f4\":\n            return pf2;\n\n          default:\n            return super.getPostingsFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f1\", \"val1\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val2\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 3)); // Points are not indexed as postings and should not appear in the merge fields\n    doc.add(new StringField(\"f4\", \"val4\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new StringField(\"f1\", \"val5\", Field.Store.NO));\n    doc.add(new StringField(\"f2\", \"val6\", Field.Store.YES));\n    doc.add(new IntPoint(\"f3\", 7));\n    doc.add(new StringField(\"f4\", \"val8\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, pf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"f1\", \"f2\")), new HashSet<>(pf1.fieldNames));\n    assertEquals(1, pf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"f4\"), pf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c2c0e5b14f85c854b18545f05a3158cca0fcea2":["132f1575a9078b618f9e1c35ac94f06444006662"],"132f1575a9078b618f9e1c35ac94f06444006662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c2c0e5b14f85c854b18545f05a3158cca0fcea2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c2c0e5b14f85c854b18545f05a3158cca0fcea2"]},"commit2Childs":{"9c2c0e5b14f85c854b18545f05a3158cca0fcea2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"132f1575a9078b618f9e1c35ac94f06444006662":["9c2c0e5b14f85c854b18545f05a3158cca0fcea2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["132f1575a9078b618f9e1c35ac94f06444006662","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}