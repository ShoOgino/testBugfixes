{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    numStoredFields++;\n\n    fieldsBuffer.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsBuffer.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsBuffer.writeVInt(bytes.length);\n      fieldsBuffer.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsBuffer.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsBuffer.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsBuffer.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsBuffer.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsBuffer.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["22a2e66dfda83847e80095b8693c660742ab3e9c","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}