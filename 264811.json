{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    public boolean isPass(Object inputVal) {\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    public boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"/dev/null","sourceNew":"    public boolean isPass(Object inputVal) {\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      ValidateInfo validator = getValidator(name);\n      if (validator == LazyValidator.INST) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    public boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      ValidateInfo validator = getValidator(name);\n      if (validator == LazyValidator.INST) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    public boolean isPass(Object inputVal) {\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      ValidateInfo validator = getValidator(name);\n      if (validator == LazyValidator.INST) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    public boolean isPass(Object inputVal) {\n      return op.match(val, validate(name, inputVal, false)) == PASS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      Suggestion.ConditionType validator = Suggestion.getTagType(name);\n      if (validator == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      ValidateInfo validator = getValidator(name);\n      if (validator == LazyValidator.INST) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      Suggestion.ConditionType validator = Suggestion.getTagType(name);\n      if (validator == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computationType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computationType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computedType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (computationType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computationType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (computedType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computedType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (computationType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      if (computedType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(type);\n      if (varType == Suggestion.ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":"    boolean isPass(Object inputVal) {\n      return isPass(inputVal, null);\n    }\n\n","sourceOld":"    boolean isPass(Object inputVal) {\n      if (computedType != null) {\n        throw new IllegalStateException(\"This is supposed to be called only from a Condition with no computed value or a SealedCondition\");\n\n      }\n      if (inputVal instanceof ReplicaCount) inputVal = ((ReplicaCount) inputVal).getVal(getClause().type);\n      if (varType == ConditionType.LAZY) { // we don't know the type\n        return op.match(parseString(val), parseString(inputVal)) == PASS;\n      } else {\n        return op.match(val, validate(name, inputVal, false)) == PASS;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Condition#isPass(Object).mjava","sourceNew":null,"sourceOld":"    boolean isPass(Object inputVal) {\n      return isPass(inputVal, null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","7811b56f2d9e37eb839450d346535c87f1f504c2"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78231225260fb5b3bf9920f203d71477d5501c65":["9837f40c922407d857991971de6def18eda0857b"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["27639bb5e041490ce599065875dd2f6d8beef62a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7811b56f2d9e37eb839450d346535c87f1f504c2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"9837f40c922407d857991971de6def18eda0857b":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"98f11c416d30e556e0004a9a84960702d12d35b1":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"27639bb5e041490ce599065875dd2f6d8beef62a":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}