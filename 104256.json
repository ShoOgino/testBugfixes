{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"187d1494fb1ccc3d96d5ddc25fcfb0dae22ca1e8","date":1534496190,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","sourceNew":"  @Test\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"648627dd57e08f78d7b6e3b59b1f43530995a69a","date":1535068798,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testDeleteWithCollection().mjava","sourceNew":null,"sourceOld":"  @Test\n  //Commented 14-Oct-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testDeleteWithCollection() throws IOException, SolrServerException, InterruptedException {\n    String prefix = \"testDeleteWithCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    // delete the co-located collection first\n    CollectionAdminRequest.deleteCollection(xyz).process(solrClient);\n    // deleting the with collection should succeed now\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n\n    xyz = xyz + \"_2\";\n    abc = abc + \"_2\";\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n    // sanity check\n    try {\n      CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n      fail(\"Deleting collection: \" + abc + \" should have failed with an exception. Instead response was: \" + response.getResponse());\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"is co-located with collection\"));\n    }\n\n    CollectionAdminRequest.modifyCollection(xyz, null)\n        .unsetAttribute(\"withCollection\")\n        .process(solrClient);\n    TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n      if (c1.getStr(\"withCollection\") == null) break;\n      Thread.sleep(200);\n    }\n    DocCollection c1 = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(xyz);\n    assertNull(c1.getStr(\"withCollection\"));\n    CollectionAdminRequest.deleteCollection(abc).process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"648627dd57e08f78d7b6e3b59b1f43530995a69a":["187d1494fb1ccc3d96d5ddc25fcfb0dae22ca1e8"],"3f504512a03d978990cbff30db0522b354e846db":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"187d1494fb1ccc3d96d5ddc25fcfb0dae22ca1e8":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["db96734b79e26d948b59f68bd4564c4836a71acf"],"648627dd57e08f78d7b6e3b59b1f43530995a69a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"db96734b79e26d948b59f68bd4564c4836a71acf":["3f504512a03d978990cbff30db0522b354e846db"],"187d1494fb1ccc3d96d5ddc25fcfb0dae22ca1e8":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["187d1494fb1ccc3d96d5ddc25fcfb0dae22ca1e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}