{"path":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getLexSorted().mjava","commits":[{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":2,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getLexSorted().mjava","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getSorted().mjava","sourceNew":"  ShardFacetCount[] getLexSorted() {\n    ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);\n    Arrays.sort(arr, new Comparator<ShardFacetCount>() {\n      public int compare(ShardFacetCount o1, ShardFacetCount o2) {\n        return o1.name.compareTo(o2.name);\n      }\n    });\n    countSorted = arr;\n    return arr;\n  }\n\n","sourceOld":"  ShardFacetCount[] getSorted() {\n    ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);\n    Arrays.sort(arr, new Comparator<ShardFacetCount>() {\n      public int compare(ShardFacetCount o1, ShardFacetCount o2) {\n        if (o2.count < o1.count) return -1;\n        else if (o1.count < o2.count) return 1;\n        // TODO: handle tiebreaks for types other than strings\n        return o1.name.compareTo(o2.name);\n      }\n    });\n    countSorted = arr;\n    return arr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1161f19bd84204b140d97fea16ff621e86ce7ab4","date":1235924971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getLexSorted().mjava","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getLexSorted().mjava","sourceNew":"  ShardFacetCount[] getLexSorted() {\n    ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);\n    Arrays.sort(arr, new Comparator<ShardFacetCount>() {\n      public int compare(ShardFacetCount o1, ShardFacetCount o2) {\n        return o1.indexed.compareTo(o2.indexed);\n      }\n    });\n    countSorted = arr;\n    return arr;\n  }\n\n","sourceOld":"  ShardFacetCount[] getLexSorted() {\n    ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);\n    Arrays.sort(arr, new Comparator<ShardFacetCount>() {\n      public int compare(ShardFacetCount o1, ShardFacetCount o2) {\n        return o1.name.compareTo(o2.name);\n      }\n    });\n    countSorted = arr;\n    return arr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#getLexSorted().mjava","sourceNew":null,"sourceOld":"  ShardFacetCount[] getLexSorted() {\n    ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);\n    Arrays.sort(arr, new Comparator<ShardFacetCount>() {\n      public int compare(ShardFacetCount o1, ShardFacetCount o2) {\n        return o1.indexed.compareTo(o2.indexed);\n      }\n    });\n    countSorted = arr;\n    return arr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"718ab708b1705aae7831111fcddfc834665eee61":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"718ab708b1705aae7831111fcddfc834665eee61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["718ab708b1705aae7831111fcddfc834665eee61"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["718ab708b1705aae7831111fcddfc834665eee61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}