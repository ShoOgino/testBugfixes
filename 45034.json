{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateFeedFromRequest().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateFeedFromRequest().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateFeedFromRequest().mjava","sourceNew":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createFeedFromRequest(HttpServletRequest)'\n     */\n    public void testCreateFeedFromRequest() throws ParseException, IOException, FeedHandlerException {\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        assertNotNull(feed.getId());\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        /*\n         * Test for not registered service\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), \"some other service\");\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (FeedHandlerException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_NOT_FOUND,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        this.requestMockControl.reset();\n        /*\n         * Test for IOException\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.reader.close();\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (IOException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        \n        \n        \n    }\n\n","sourceOld":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createFeedFromRequest(HttpServletRequest)'\n     */\n    public void testCreateFeedFromRequest() throws ParseException, IOException, FeedHandlerException {\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        assertNotNull(feed.getId());\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        /*\n         * Test for not registered service\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), \"some other service\");\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (FeedHandlerException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_NOT_FOUND,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        this.requestMockControl.reset();\n        /*\n         * Test for IOException\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.reader.close();\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (IOException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateFeedFromRequest().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createFeedFromRequest(HttpServletRequest)'\n     */\n    public void testCreateFeedFromRequest() throws ParseException, IOException, FeedHandlerException {\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        assertNotNull(feed.getId());\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        /*\n         * Test for not registered service\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), \"some other service\");\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (FeedHandlerException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_NOT_FOUND,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        this.requestMockControl.reset();\n        /*\n         * Test for IOException\n         */\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(\"service\"), this.serviceName);\n        this.reader.close();\n        this.requestMockControl.expectAndReturn(this.mockRequest.getReader(),this.reader);\n        this.requestMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n        ServerBaseFeed feed = handler.createFeedFromRequest(this.mockRequest);\n        \n        fail(\" exception expected\");\n        }catch (IOException e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n        }\n        this.requestMockControl.verify();\n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}