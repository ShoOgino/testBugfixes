{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.client.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f","date":1491987818,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":["2df5da9b9a665127f75b19af580e9df62caced1d","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if(isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10","date":1495727205,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    return request(request, collection, null);\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    return request(request, collection, null);\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    return request(request, collection, null);\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    return request(request, collection, null);\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n          throws SolrServerException, IOException {\n    return request(request, collection, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a66009e1f5c17a77d75a6381cacdf9c893b2d8f":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}