{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d73ddcbdd6b1c591c457f8f92dadab410cb4e966","date":1421917979,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if(configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"707fc23d793376ed98be0bd2f100d32dd5a9c0df","date":1422324604,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if(configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"707fc23d793376ed98be0bd2f100d32dd5a9c0df","date":1422324604,"type":6,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","sourceNew":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if(configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d73ddcbdd6b1c591c457f8f92dadab410cb4e966":["9279b175e5e66258442d2123a50f052219a9cc1b"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["d73ddcbdd6b1c591c457f8f92dadab410cb4e966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"9279b175e5e66258442d2123a50f052219a9cc1b":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"]},"commit2Childs":{"d73ddcbdd6b1c591c457f8f92dadab410cb4e966":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","9279b175e5e66258442d2123a50f052219a9cc1b"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["d73ddcbdd6b1c591c457f8f92dadab410cb4e966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}