{"path":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi#plugins(Supplier[SolrZkClient]).mjava","commits":[{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi#plugins(Supplier[SolrZkClient]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, Utils.NEW_LINKED_HASHMAP_FUN);\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5143a137c6366836cdc47feaad23a1f86ba50c3b","date":1599311985,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi#plugins(Supplier[SolrZkClient]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi#plugins(Supplier[SolrZkClient]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, o -> new LinkedHashMap<>());\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, Utils.NEW_LINKED_HASHMAP_FUN);\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5143a137c6366836cdc47feaad23a1f86ba50c3b":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5143a137c6366836cdc47feaad23a1f86ba50c3b"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["5143a137c6366836cdc47feaad23a1f86ba50c3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"5143a137c6366836cdc47feaad23a1f86ba50c3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}