{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.getPolicy().clauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> tmpRow = fromRow.removeReplica(coll, shard);\n      if (tmpRow.first() == null) {\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(tmpRow.first());\n      }\n      int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.first().violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, tmpRow.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    String coll = hints.get(Hint.COLL);\n    String shard = hints.get(Hint.SHARD);\n    for (int i = 0; i < getMatrix().size(); i++) {\n      Row fromRow = getMatrix().get(i);\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      fromRow = pair.first();\n      if(fromRow == null){\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(fromRow);\n      }\n      if (fromRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(i);\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n                return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                    COLLECTION_PROP, coll,\n                    SHARD_ID_PROP, shard,\n                    NODE, fromRow.node,\n                    REPLICA, pair.second().name,\n                    \"target\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c9a458cd4ceff8755128274a56cc87271cb3d9","date":1493722297,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, pair.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> tmpRow = fromRow.removeReplica(coll, shard);\n      if (tmpRow.first() == null) {\n        //no such replica available\n        continue;\n      }\n\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(tmpRow.first());\n      }\n      int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.first().violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, tmpRow.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070f4513c7b9fb42b83f9c863b917c96c58397f2","date":1494234201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      final int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; j--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, pair.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; i--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, pair.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      final int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; j--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return new CollectionAdminRequest.MoveReplica(\n                coll,\n                pair.second().name,\n                targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      final int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; j--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return Utils.makeMap(\"operation\", MOVEREPLICA.toLower(),\n                COLLECTION_PROP, coll,\n                SHARD_ID_PROP, shard,\n                NODE, fromRow.node,\n                REPLICA, pair.second().name,\n                \"targetNode\", targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedRow(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs)) {\n          getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n          getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n          return new CollectionAdminRequest.MoveReplica(\n              coll,\n              pair.second().name,\n              targetRow.node);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) {\n          clause.test(tmpRow);\n        }\n      }\n      final int i = getMatrix().indexOf(fromRow);\n      if (tmpRow.violations.isEmpty()) {\n        for (int j = getMatrix().size() - 1; j > i; j--) {\n          Row targetRow = getMatrix().get(j);\n          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n          targetRow = targetRow.addReplica(coll, shard);\n          targetRow.violations.clear();\n          for (Clause clause : session.expandedClauses) {\n            if (strict || clause.strict) clause.test(targetRow);\n          }\n          if (targetRow.violations.isEmpty()) {\n            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n            return new CollectionAdminRequest.MoveReplica(\n                coll,\n                pair.second().name,\n                targetRow.node);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78c807c3692e5b227a71538672d87d78c3cd9ba","date":1495764154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedRow(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      String coll = fromReplica.first().collection;\n      String shard = fromReplica.first().shard;\n      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedRow(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs)) {\n          getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());\n          getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));\n          return new CollectionAdminRequest.MoveReplica(\n              coll,\n              pair.second().name,\n              targetRow.node);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedRow(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"070f4513c7b9fb42b83f9c863b917c96c58397f2":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["86fff6c123a5a1d38adb665dd045347219798da9"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["f78c807c3692e5b227a71538672d87d78c3cd9ba"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"070f4513c7b9fb42b83f9c863b917c96c58397f2":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["f78c807c3692e5b227a71538672d87d78c3cd9ba"],"86fff6c123a5a1d38adb665dd045347219798da9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}