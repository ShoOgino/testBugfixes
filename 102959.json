{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        baseWeight.normalize(norm, boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        Weight[] weights = new Weight[drillDowns.length + 1];\n        weights[0] = baseWeight;\n        System.arraycopy(drillDowns, 0, weights, 1, drillDowns.length);\n        return getCacheHelper(context, weights);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee9b4ce4f719b4add29b7e03f76700b506bedb63","date":1509707319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        List<Weight> weights = new ArrayList<>();\n        weights.add(baseWeight);\n        weights.addAll(Arrays.asList(drillDowns));\n        return getCacheHelper(context, weights);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        Weight[] weights = new Weight[drillDowns.length + 1];\n        weights[0] = baseWeight;\n        System.arraycopy(drillDowns, 0, weights, 1, drillDowns.length);\n        return getCacheHelper(context, weights);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        List<Weight> weights = new ArrayList<>();\n        weights.add(baseWeight);\n        weights.addAll(Arrays.asList(drillDowns));\n        return getCacheHelper(context, weights);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        List<Weight> weights = new ArrayList<>();\n        weights.add(baseWeight);\n        weights.addAll(Arrays.asList(drillDowns));\n        return getCacheHelper(context, weights);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["706a7a3396c030cc66dda92a0492eb492131c4c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}