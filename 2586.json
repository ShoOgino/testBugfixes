{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfoPerCommit> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfoPerCommit info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfoPerCommit> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfoPerCommit info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfoPerCommit> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfoPerCommit info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67bcec391f8e94564afde5a0f0e6538d07a96255","date":1393593793,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last, IndexWriter writer) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info, writer) > maxMergeSizeForForcedMerge || sizeDocs(info, writer) > maxMergeDocs) {\n        if (verbose(writer)) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\", writer);\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1), writer))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start), writer))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"027bee21e09164c9ee230395405076d1e0034b30":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["027bee21e09164c9ee230395405076d1e0034b30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}