{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    State oldState = state; // capture test execution state\n    state = State.TEARDOWN; // set the state for subsequent tests\n    \n    // NOTE: with junit 4.7, we don't get a reproduceWith because our Watchman\n    // does not know if something fails in tearDown. so we ensure this happens ourselves for now.\n    // we can remove this if we upgrade to 4.8\n    Throwable problem = null;\n    \n    try {\n      if (!testsFailed) {\n        // Note: we allow a test to go straight from SETUP -> TEARDOWN (without ever entering the RANTEST state)\n        // because if you assume() inside setUp(), it skips the test and the TestWatchman has no way to know...\n        assertTrue(\"ensure your setUp() calls super.setUp()!!!\", oldState == State.RANTEST || oldState == State.SETUP);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      testsFailed = true;\n      reportAdditionalFailureInfo();\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    State oldState = state; // capture test execution state\n    state = State.TEARDOWN; // set the state for subsequent tests\n    \n    // NOTE: with junit 4.7, we don't get a reproduceWith because our Watchman\n    // does not know if something fails in tearDown. so we ensure this happens ourselves for now.\n    // we can remove this if we upgrade to 4.8\n    Throwable problem = null;\n    \n    try {\n      if (!testsFailed) {\n        // Note: we allow a test to go straight from SETUP -> TEARDOWN (without ever entering the RANTEST state)\n        // because if you assume() inside setUp(), it skips the test and the TestWatchman has no way to know...\n        assertTrue(\"ensure your setUp() calls super.setUp()!!!\", oldState == State.RANTEST || oldState == State.SETUP);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      testsFailed = true;\n      reportAdditionalFailureInfo();\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclassing only. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    teardownCalled = true;\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    State oldState = state; // capture test execution state\n    state = State.TEARDOWN; // set the state for subsequent tests\n    \n    // NOTE: with junit 4.7, we don't get a reproduceWith because our Watchman\n    // does not know if something fails in tearDown. so we ensure this happens ourselves for now.\n    // we can remove this if we upgrade to 4.8\n    Throwable problem = null;\n    \n    try {\n      if (!testsFailed) {\n        // Note: we allow a test to go straight from SETUP -> TEARDOWN (without ever entering the RANTEST state)\n        // because if you assume() inside setUp(), it skips the test and the TestWatchman has no way to know...\n        assertTrue(\"ensure your setUp() calls super.setUp()!!!\", oldState == State.RANTEST || oldState == State.SETUP);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      testsFailed = true;\n      reportAdditionalFailureInfo();\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n  }\n\n","sourceOld":"  /**\n   * For subclassing only. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    teardownCalled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldTermVectorOptions.clear();\n    fieldNamesSeen.clear();\n  }\n\n","sourceOld":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e307596810ed3e15021a60f46fdebab6783c295","date":1398787006,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldToType.clear();\n  }\n\n","sourceOld":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldTermVectorOptions.clear();\n    fieldNamesSeen.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldToType.clear();\n  }\n\n","sourceOld":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldToType.clear();\n  }\n\n","sourceOld":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b7c6630218ed9693cdb8643276513f9f0043f4","date":1406648084,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldToType.clear();\n\n    // Test is supposed to call this itself, but we do this defensively in case it forgot:\n    restoreIndexWriterMaxDocs();\n  }\n\n","sourceOld":"  /**\n   * For subclasses to override. Overrides must call {@code super.tearDown()}.\n   */\n  @After\n  public void tearDown() throws Exception {\n    parentChainCallRule.teardownCalled = true;\n    fieldToType.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["5da0b42730b6b99b31389ef94cb97384e83b9ede","3e307596810ed3e15021a60f46fdebab6783c295"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["5da0b42730b6b99b31389ef94cb97384e83b9ede","3394716f52b34ab259ad5247e7595d9f9db6e935"],"1e6d0f38037e0125421d8e737992d511b5567b26":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["1e6d0f38037e0125421d8e737992d511b5567b26"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e307596810ed3e15021a60f46fdebab6783c295":["52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"52c7e49be259508735752fba88085255014a6ecf":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6b7c6630218ed9693cdb8643276513f9f0043f4"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d6b7c6630218ed9693cdb8643276513f9f0043f4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"1e6d0f38037e0125421d8e737992d511b5567b26":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"3e307596810ed3e15021a60f46fdebab6783c295":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e6d0f38037e0125421d8e737992d511b5567b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52c7e49be259508735752fba88085255014a6ecf":["3e307596810ed3e15021a60f46fdebab6783c295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}