{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":null,"sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}