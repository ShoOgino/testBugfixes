{"path":"lucene/src/java/org/apache/lucene/search/FilteredTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FilteredTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** On the first call to {@link #next} or if {@link #accept} returns\n   * {@link AcceptStatus#YES_AND_SEEK} or {@link AcceptStatus#NO_AND_SEEK},\n   * this method will be called to eventually seek the underlying TermsEnum\n   * to a new position.\n   * On the first call, {@code currentTerm} will be {@code null}, later\n   * calls will provide the term the underlying enum is positioned at.\n   * This method returns per default only one time the initial seek term\n   * and then {@code null}, so no repositioning is ever done.\n   * <p>Override this method, if you want a more sophisticated TermsEnum,\n   * that repositions the iterator during enumeration.\n   * If this method always returns {@code null} the enum is empty.\n   * <p><em>Please note:</em> This method should always provide a greater term\n   * than the last enumerated term, else the behaviour of this enum\n   * violates the contract for TermsEnums.\n   */\n  protected BytesRef nextSeekTerm(final BytesRef currentTerm) throws IOException {\n    final BytesRef t = initialSeekTerm;\n    initialSeekTerm = null;\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef5cb5bb242392bf1b62f64e8645c090d51cc77a","date":1316168618,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FilteredTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FilteredTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  /** On the first call to {@link #next} or if {@link #accept} returns\n   * {@link AcceptStatus#YES_AND_SEEK} or {@link AcceptStatus#NO_AND_SEEK},\n   * this method will be called to eventually seek the underlying TermsEnum\n   * to a new position.\n   * On the first call, {@code currentTerm} will be {@code null}, later\n   * calls will provide the term the underlying enum is positioned at.\n   * This method returns per default only one time the initial seek term\n   * and then {@code null}, so no repositioning is ever done.\n   * <p>Override this method, if you want a more sophisticated TermsEnum,\n   * that repositions the iterator during enumeration.\n   * If this method always returns {@code null} the enum is empty.\n   * <p><em>Please note:</em> This method should always provide a greater term\n   * than the last enumerated term, else the behaviour of this enum\n   * violates the contract for TermsEnums.\n   */\n  protected BytesRef nextSeekTerm(final BytesRef currentTerm) throws IOException {\n    final BytesRef t = initialSeekTerm;\n    initialSeekTerm = null;\n    return t;\n  }\n\n","sourceOld":"  /** On the first call to {@link #next} or if {@link #accept} returns\n   * {@link AcceptStatus#YES_AND_SEEK} or {@link AcceptStatus#NO_AND_SEEK},\n   * this method will be called to eventually seek the underlying TermsEnum\n   * to a new position.\n   * On the first call, {@code currentTerm} will be {@code null}, later\n   * calls will provide the term the underlying enum is positioned at.\n   * This method returns per default only one time the initial seek term\n   * and then {@code null}, so no repositioning is ever done.\n   * <p>Override this method, if you want a more sophisticated TermsEnum,\n   * that repositions the iterator during enumeration.\n   * If this method always returns {@code null} the enum is empty.\n   * <p><em>Please note:</em> This method should always provide a greater term\n   * than the last enumerated term, else the behaviour of this enum\n   * violates the contract for TermsEnums.\n   */\n  protected BytesRef nextSeekTerm(final BytesRef currentTerm) throws IOException {\n    final BytesRef t = initialSeekTerm;\n    initialSeekTerm = null;\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef5cb5bb242392bf1b62f64e8645c090d51cc77a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef5cb5bb242392bf1b62f64e8645c090d51cc77a"]},"commit2Childs":{"ef5cb5bb242392bf1b62f64e8645c090d51cc77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ef5cb5bb242392bf1b62f64e8645c090d51cc77a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}