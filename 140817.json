{"path":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"\tprivate NamedList checkEngine(CarrotClusteringEngine engine,\n\t\t\tint expectedNumClusters, SolrParams clusteringParams) throws IOException {\n\t\t// Get all documents to cluster\n\t\tRefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\t\tMatchAllDocsQuery query = new MatchAllDocsQuery();\n\t\tDocList docList;\n\t\ttry {\n\t\t\tSolrIndexSearcher searcher = ref.get();\n\t\t\tdocList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n\t\t\t\t\tnumberOfDocs);\n\t\t\tassertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n\t\t} finally {\n\t\t\tref.decref();\n\t\t}\n\n\t\tModifiableSolrParams solrParams = new ModifiableSolrParams();\n\t\tsolrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n\t\tsolrParams.add(clusteringParams);\n\n\t\t// Perform clustering\n\t\tNamedList results = engine.cluster(query, docList, solrParams);\n\t\tassertEquals(\"number of clusters\", expectedNumClusters, results.size());\n\t\tcheckClusters(results, false);\n\t\treturn results;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","sourceNew":"\tprivate List checkEngine(CarrotClusteringEngine engine,\n\t\t\tint expectedNumClusters, SolrParams clusteringParams) throws IOException {\n\t\t// Get all documents to cluster\n\t\tRefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\t\tMatchAllDocsQuery query = new MatchAllDocsQuery();\n\t\tDocList docList;\n\t\ttry {\n\t\t\tSolrIndexSearcher searcher = ref.get();\n\t\t\tdocList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n\t\t\t\t\tnumberOfDocs);\n\t\t\tassertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n\t\t} finally {\n\t\t\tref.decref();\n\t\t}\n\n\t\tModifiableSolrParams solrParams = new ModifiableSolrParams();\n\t\tsolrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n\t\tsolrParams.add(clusteringParams);\n\n\t\t// Perform clustering\n                LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n\t\tList results = (List)engine.cluster(query, docList, req);\n                req.close();\n\t\tassertEquals(\"number of clusters\", expectedNumClusters, results.size());\n\t\tcheckClusters(results, false);\n\t\treturn results;\n\t}\n\n","sourceOld":"\tprivate NamedList checkEngine(CarrotClusteringEngine engine,\n\t\t\tint expectedNumClusters, SolrParams clusteringParams) throws IOException {\n\t\t// Get all documents to cluster\n\t\tRefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\t\tMatchAllDocsQuery query = new MatchAllDocsQuery();\n\t\tDocList docList;\n\t\ttry {\n\t\t\tSolrIndexSearcher searcher = ref.get();\n\t\t\tdocList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n\t\t\t\t\tnumberOfDocs);\n\t\t\tassertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n\t\t} finally {\n\t\t\tref.decref();\n\t\t}\n\n\t\tModifiableSolrParams solrParams = new ModifiableSolrParams();\n\t\tsolrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n\t\tsolrParams.add(clusteringParams);\n\n\t\t// Perform clustering\n\t\tNamedList results = engine.cluster(query, docList, solrParams);\n\t\tassertEquals(\"number of clusters\", expectedNumClusters, results.size());\n\t\tcheckClusters(results, false);\n\t\treturn results;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","sourceNew":"  private List checkEngine(CarrotClusteringEngine engine,\n                           int expectedNumClusters, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n    } finally {\n      ref.decref();\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n    solrParams.add(clusteringParams);\n\n    // Perform clustering\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n    List results = (List) engine.cluster(query, docList, req);\n    req.close();\n    assertEquals(\"number of clusters\", expectedNumClusters, results.size());\n    checkClusters(results, false);\n    return results;\n  }\n\n","sourceOld":"\tprivate List checkEngine(CarrotClusteringEngine engine,\n\t\t\tint expectedNumClusters, SolrParams clusteringParams) throws IOException {\n\t\t// Get all documents to cluster\n\t\tRefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n\t\tMatchAllDocsQuery query = new MatchAllDocsQuery();\n\t\tDocList docList;\n\t\ttry {\n\t\t\tSolrIndexSearcher searcher = ref.get();\n\t\t\tdocList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n\t\t\t\t\tnumberOfDocs);\n\t\t\tassertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n\t\t} finally {\n\t\t\tref.decref();\n\t\t}\n\n\t\tModifiableSolrParams solrParams = new ModifiableSolrParams();\n\t\tsolrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n\t\tsolrParams.add(clusteringParams);\n\n\t\t// Perform clustering\n                LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n\t\tList results = (List)engine.cluster(query, docList, req);\n                req.close();\n\t\tassertEquals(\"number of clusters\", expectedNumClusters, results.size());\n\t\tcheckClusters(results, false);\n\t\treturn results;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c9bc7c61bddaf04f5dbf85f69baec5209200d1","date":1262615339,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","sourceNew":"  private List checkEngine(CarrotClusteringEngine engine,\n                            int expectedNumClusters, SolrParams clusteringParams) throws IOException {\n    return checkEngine(engine, numberOfDocs, expectedNumClusters, new MatchAllDocsQuery(), clusteringParams);\n  }\n\n","sourceOld":"  private List checkEngine(CarrotClusteringEngine engine,\n                           int expectedNumClusters, SolrParams clusteringParams) throws IOException {\n    // Get all documents to cluster\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    DocList docList;\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      docList = searcher.getDocList(query, (Query) null, new Sort(), 0,\n              numberOfDocs);\n      assertEquals(\"docList size\", this.numberOfDocs, docList.matches());\n    } finally {\n      ref.decref();\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CarrotParams.PRODUCE_SUMMARY, \"true\");\n    solrParams.add(clusteringParams);\n\n    // Perform clustering\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), solrParams);\n    List results = (List) engine.cluster(query, docList, req);\n    req.close();\n    assertEquals(\"number of clusters\", expectedNumClusters, results.size());\n    checkClusters(results, false);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkEngine(CarrotClusteringEngine,int,SolrParams).mjava","sourceNew":"  private List checkEngine(CarrotClusteringEngine engine,\n                            int expectedNumClusters, SolrParams clusteringParams) throws IOException {\n    return checkEngine(engine, numberOfDocs, expectedNumClusters, new MatchAllDocsQuery(), clusteringParams);\n  }\n\n","sourceOld":"  private List checkEngine(CarrotClusteringEngine engine,\n                            int expectedNumClusters, SolrParams clusteringParams) throws IOException {\n    return checkEngine(engine, numberOfDocs, expectedNumClusters, new MatchAllDocsQuery(), clusteringParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["ad94625fb8d088209f46650c8097196fec67f00c"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}