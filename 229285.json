{"path":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment, false);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a7d0b384f0022c5a29e562b809ebf73991d7e6","date":1082489615,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment, false);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment, false);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79fc67d5cdece593cd3b3b6c7ef195ee2625522c","date":1091970333,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment, false);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = new SegmentReader(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ba3aee3f425e35d39d108f6eeb1b39150d898b4","date":1104356321,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n      assertTrue(stored != null);\n      System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getIndexedFieldNames(true);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dd7f4a3061725bd1ac0004b3245a36eb103e57","date":1115306523,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n      assertTrue(stored != null);\n      System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(stored.size() == 2);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }                                                \n  }    \n\n","sourceOld":"  public void testMerge() {                             \n    //System.out.println(\"----------------TestMerge------------------\");\n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    try {\n      int docsMerged = merger.merge();\n      merger.closeReaders();\n      assertTrue(docsMerged == 2);\n      //Should be able to open a new SegmentReader against the new directory\n      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n      assertTrue(mergedReader != null);\n      assertTrue(mergedReader.numDocs() == 2);\n      Document newDoc1 = mergedReader.document(0);\n      assertTrue(newDoc1 != null);\n      //There are 2 unstored fields on the document\n      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n      Document newDoc2 = mergedReader.document(1);\n      assertTrue(newDoc2 != null);\n      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n      \n      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      assertTrue(termDocs != null);\n      assertTrue(termDocs.next() == true);\n      \n      Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n      assertTrue(stored != null);\n      //System.out.println(\"stored size: \" + stored.size());\n      assertTrue(stored.size() == 2);\n      \n      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      //System.out.println(\"Terms size: \" + terms.length);\n      assertTrue(terms.length == 3);\n      int [] freqs = vector.getTermFrequencies();\n      assertTrue(freqs != null);\n      //System.out.println(\"Freqs size: \" + freqs.length);\n      assertTrue(vector instanceof TermPositionVector == true);\n      \n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n      }                                                \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    //System.out.println(\"---------------------end TestMerge-------------------\");\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(stored.size() == 2);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(stored.size() == 2);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }                                                \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 4 fields that were indexed with term vector\",stored.size() == 4);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(stored.size() == 2);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 4 fields that were indexed with term vector\",stored.size() == 4);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 4 fields that were indexed with term vector\",stored.size() == 4);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 4 fields that were indexed with term vector\",stored.size() == 4);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true));\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection<String> stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection<String> stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection<String> stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["e0c804f7aa477229414a7e12882af490c241f64d"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59dd7f4a3061725bd1ac0004b3245a36eb103e57":["4ba3aee3f425e35d39d108f6eeb1b39150d898b4"],"8a5cfde941b2f8208d739344fef3821381885618":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"4ba3aee3f425e35d39d108f6eeb1b39150d898b4":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0c804f7aa477229414a7e12882af490c241f64d":["8a5cfde941b2f8208d739344fef3821381885618"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["59dd7f4a3061725bd1ac0004b3245a36eb103e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["4ba3aee3f425e35d39d108f6eeb1b39150d898b4"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["8a5cfde941b2f8208d739344fef3821381885618"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"59dd7f4a3061725bd1ac0004b3245a36eb103e57":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"4ba3aee3f425e35d39d108f6eeb1b39150d898b4":["59dd7f4a3061725bd1ac0004b3245a36eb103e57"],"8a5cfde941b2f8208d739344fef3821381885618":["e0c804f7aa477229414a7e12882af490c241f64d"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"e0c804f7aa477229414a7e12882af490c241f64d":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}