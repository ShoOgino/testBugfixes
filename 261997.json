{"path":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Modifier().mjava","commits":[{"id":"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c","date":1110211682,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Modifier().mjava","pathOld":"/dev/null","sourceNew":"  final public int Modifier() throws ParseException {\n  int ret = MOD_NONE;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOT:\n    case PLUS:\n    case MINUS:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case PLUS:\n        jj_consume_token(PLUS);\n              ret = MOD_REQ;\n        break;\n      case MINUS:\n        jj_consume_token(MINUS);\n                 ret = MOD_NOT;\n        break;\n      case NOT:\n        jj_consume_token(NOT);\n               ret = MOD_NOT;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      break;\n    default:\n      jj_la1[3] = jj_gen;\n      ;\n    }\n    {if (true) return ret;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Modifier().mjava","pathOld":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Modifier().mjava","sourceNew":"  final public int Modifier() throws ParseException {\n  int ret = MOD_NONE;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOT:\n    case PLUS:\n    case MINUS:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case PLUS:\n        jj_consume_token(PLUS);\n              ret = MOD_REQ;\n        break;\n      case MINUS:\n        jj_consume_token(MINUS);\n                 ret = MOD_NOT;\n        break;\n      case NOT:\n        jj_consume_token(NOT);\n               ret = MOD_NOT;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      break;\n    default:\n      jj_la1[3] = jj_gen;\n      ;\n    }\n    {if (true) return ret;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public int Modifier() throws ParseException {\n  int ret = MOD_NONE;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOT:\n    case PLUS:\n    case MINUS:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case PLUS:\n        jj_consume_token(PLUS);\n              ret = MOD_REQ;\n        break;\n      case MINUS:\n        jj_consume_token(MINUS);\n                 ret = MOD_NOT;\n        break;\n      case NOT:\n        jj_consume_token(NOT);\n               ret = MOD_NOT;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      break;\n    default:\n      jj_la1[3] = jj_gen;\n      ;\n    }\n    {if (true) return ret;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}