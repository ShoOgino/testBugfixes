{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactDocScorer(stats, field, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactDocScorer(stats, field, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactDocScorer(stats, field, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee1513e4ee2237693ff50a460d78dff5246c3d34","date":1311330418,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      // TODO should we reuse the DocsEnum here? \n      final DocsEnum docs = termsEnum.docs(context.reader.getLiveDocs(), null);\n      assert docs != null;\n      return new TermScorer(this, docs, createDocScorer(context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getLiveDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactDocScorer(stats, field, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      // TODO should we reuse the DocsEnum here? \n      final DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, createDocScorer(context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      // TODO should we reuse the DocsEnum here? \n      final DocsEnum docs = termsEnum.docs(context.reader.getLiveDocs(), null);\n      assert docs != null;\n      return new TermScorer(this, docs, createDocScorer(context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","ee1513e4ee2237693ff50a460d78dff5246c3d34"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}