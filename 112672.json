{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happend if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happend if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happend if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happend if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d17b3f44db4f491a77b01caba0517e55ee39a9","date":1530194036,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id : this.tlogs.peekLast().id+\" != \"+subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id : this.tlogs.peekLast().id+\" != \"+subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id : this.tlogs.peekLast().id+\" != \"+subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#forwardSeek(CdcrLogReader).mjava","sourceNew":null,"sourceOld":"    /**\n     * Expert: Fast forward this log reader with a log subreader. The subreader will be closed after calling this\n     * method. In order to avoid unexpected results, the log\n     * subreader must be created from this reader with the method {@link #getSubReader()}.\n     */\n    public void forwardSeek(CdcrLogReader subReader) {\n      // If a subreader has a null tlog reader, does nothing\n      // This can happened if a subreader is instantiated from a non-initialised parent reader, or if the subreader\n      // has been closed.\n      if (subReader.tlogReader == null) {\n        return;\n      }\n\n      tlogReader.close(); // close the existing reader, a new one will be created\n      while (this.tlogs.peekLast().id < subReader.tlogs.peekLast().id) {\n        tlogs.removeLast();\n        currentTlog = tlogs.peekLast();\n      }\n      assert this.tlogs.peekLast().id == subReader.tlogs.peekLast().id : this.tlogs.peekLast().id+\" != \"+subReader.tlogs.peekLast().id;\n      this.pointer.set(currentTlog.tlogFile);\n      this.lastPositionInTLog = subReader.lastPositionInTLog;\n      this.numRecordsReadInCurrentTlog = subReader.numRecordsReadInCurrentTlog;\n      this.lastVersion = subReader.lastVersion;\n      this.nextToLastVersion = subReader.nextToLastVersion;\n      this.tlogReader = currentTlog.getReader(subReader.tlogReader.currentPos());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50d17b3f44db4f491a77b01caba0517e55ee39a9":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d470c8182e92b264680e34081b75e70a9f2b3c89","50d17b3f44db4f491a77b01caba0517e55ee39a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["50d17b3f44db4f491a77b01caba0517e55ee39a9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["86290366cefc1b9d4eced13b430858c4a4c0421d","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d470c8182e92b264680e34081b75e70a9f2b3c89","50d17b3f44db4f491a77b01caba0517e55ee39a9"]},"commit2Childs":{"50d17b3f44db4f491a77b01caba0517e55ee39a9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["50d17b3f44db4f491a77b01caba0517e55ee39a9","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}