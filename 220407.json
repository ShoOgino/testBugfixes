{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}