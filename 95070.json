{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        try {\n          writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4f0befec2c0666a2f1879aaa34f396573a0216c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n        try {\n          writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        try {\n          writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6bd8835962cbb4c0301df9c429140117fbb6c37","date":1440540942,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          System.out.println(toString(baos));\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n        try {\n          writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfbf2a9a7a6995bfd0c443f68104fde68b448f9a","date":1440874565,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n          t.printStackTrace(System.out);\n          System.out.println(toString(baos));\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Exception e) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n          e.printStackTrace(System.out);\n          System.out.println(toString(baos));\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (IOException e) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n            e.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"609beaebbd985152a9285cb621655acb0ffd830e","date":1440927343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          hitException = true;\n          System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n          t.printStackTrace(System.out);\n          System.out.println(toString(baos));\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a50560e4d207d12c5540f83e76c92bc02a727c96","date":1454840659,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n          iwc.setInfoStream(new PrintStreamInfoStream(new PrintStream(baos, true, \"UTF8\")));\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f0befec2c0666a2f1879aaa34f396573a0216c4","date":1454957645,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n            printStream.println(\"TEST: AccessDeniedException on init witer\");\n            t.printStackTrace(printStream);\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (LockObtainFailedException e) {\n          // lock obtain timed out\n          // NOTE: we should at some point\n          // consider this a failure?  The lock\n          // obtains, across IndexReader &\n          // IndexWriters should be \"fair\" (ie\n          // FIFO).\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4636d93693f8d76e3d5f6940b31bde2540d7354","date":1524737410,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          if (Constants.WINDOWS && dir.checkPendingDeletions()) {\n            // on windows we can potentially have pending deletes here if this happens we step out like in the catch clause\n            // tests using this also assumes no mock window FS\n            break;\n          }\n          writer = new IndexWriter(dir, iwc);\n\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n            printStream.println(\"TEST: AccessDeniedException on init writer\");\n            t.printStackTrace(printStream);\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n            printStream.println(\"TEST: AccessDeniedException on init witer\");\n            t.printStackTrace(printStream);\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          writer = null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase.WriterThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          writer = new IndexWriter(dir, iwc);\n\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n            printStream.println(\"TEST: AccessDeniedException on init writer\");\n            t.printStackTrace(printStream);\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      IndexWriter writer = null;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      for(int i=0;i<this.numIteration;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: WriterThread iter=\" + i);\n        }\n\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n\n        // We only print the IW infoStream output on exc, below:\n        PrintStream printStream;\n        try {\n          printStream = new PrintStream(baos, true, \"UTF8\");\n        } catch (UnsupportedEncodingException uee) {\n          // shouldn't happen\n          throw new RuntimeException(uee);\n        }\n\n        iwc.setInfoStream(new PrintStreamInfoStream(printStream));\n\n        printStream.println(\"\\nTEST: WriterThread iter=\" + i);\n        iwc.setOpenMode(OpenMode.APPEND);\n        try {\n          if (Constants.WINDOWS && dir.checkPendingDeletions()) {\n            // on windows we can potentially have pending deletes here if this happens we step out like in the catch clause\n            // tests using this also assumes no mock window FS\n            break;\n          }\n          writer = new IndexWriter(dir, iwc);\n\n        } catch (Throwable t) {\n          if (Constants.WINDOWS && t instanceof AccessDeniedException) {\n            // LUCENE-6684: suppress this: on Windows, a file in the curious \"pending delete\" state can\n            // cause this exc on IW init, where one thread/process deleted an old\n            // segments_N, but the delete hasn't finished yet because other threads/processes\n            // still have it open\n            printStream.println(\"TEST: AccessDeniedException on init writer\");\n            t.printStackTrace(printStream);\n          } else {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n          }\n          break;\n        }\n        if (writer != null) {\n          try {\n            addDoc(writer);\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n          try {\n            writer.close();\n          } catch (Throwable t) {\n            hitException = true;\n            System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + t.toString());\n            t.printStackTrace(System.out);\n            System.out.println(toString(baos));\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"609beaebbd985152a9285cb621655acb0ffd830e":["bfbf2a9a7a6995bfd0c443f68104fde68b448f9a"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["609beaebbd985152a9285cb621655acb0ffd830e","a50560e4d207d12c5540f83e76c92bc02a727c96"],"a50560e4d207d12c5540f83e76c92bc02a727c96":["609beaebbd985152a9285cb621655acb0ffd830e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f0befec2c0666a2f1879aaa34f396573a0216c4":["a50560e4d207d12c5540f83e76c92bc02a727c96"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"d6bd8835962cbb4c0301df9c429140117fbb6c37":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"bfbf2a9a7a6995bfd0c443f68104fde68b448f9a":["d6bd8835962cbb4c0301df9c429140117fbb6c37"],"c4636d93693f8d76e3d5f6940b31bde2540d7354":["4f0befec2c0666a2f1879aaa34f396573a0216c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["c4636d93693f8d76e3d5f6940b31bde2540d7354"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"609beaebbd985152a9285cb621655acb0ffd830e":["dd75f58072bba84066e89d61bd7028de1bd5b632","a50560e4d207d12c5540f83e76c92bc02a727c96"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a50560e4d207d12c5540f83e76c92bc02a727c96":["dd75f58072bba84066e89d61bd7028de1bd5b632","4f0befec2c0666a2f1879aaa34f396573a0216c4"],"4f0befec2c0666a2f1879aaa34f396573a0216c4":["c4636d93693f8d76e3d5f6940b31bde2540d7354"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["d6bd8835962cbb4c0301df9c429140117fbb6c37"],"d6bd8835962cbb4c0301df9c429140117fbb6c37":["bfbf2a9a7a6995bfd0c443f68104fde68b448f9a"],"bfbf2a9a7a6995bfd0c443f68104fde68b448f9a":["609beaebbd985152a9285cb621655acb0ffd830e"],"c4636d93693f8d76e3d5f6940b31bde2540d7354":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c5e84aa7f651de6493590da495bcbe46d32cf038":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}