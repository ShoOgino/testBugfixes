{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#init(TupleStream,TupleStream,StreamEqualitor).mjava","commits":[{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#init(TupleStream,TupleStream,StreamEqualitor).mjava","pathOld":"/dev/null","sourceNew":"  private void init(TupleStream streamA, TupleStream streamB, StreamEqualitor eq) throws IOException {\n    this.streamA = new PushBackStream(streamA);\n    this.streamB = new PushBackStream(new UniqueStream(streamB, eq));\n    this.originalStreamB = streamB; // hold onto this for toExpression\n    this.eq = eq;\n\n    // streamA and streamB must both be sorted so that comp can be derived from\n    if(!eq.isDerivedFrom(streamA.getStreamSort()) || !eq.isDerivedFrom(streamB.getStreamSort())){\n      throw new IOException(\"Invalid IntersectStream - both substream comparators (sort) must be a superset of this stream's equalitor.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}