{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","commits":[{"id":"780b011e6e552810161e3c859b4bc270f655f47e","date":1360554192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert allowNull || v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","sourceNew":null,"sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","sourceNew":null,"sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"780b011e6e552810161e3c859b4bc270f655f47e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","780b011e6e552810161e3c859b4bc270f655f47e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["780b011e6e552810161e3c859b4bc270f655f47e","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"780b011e6e552810161e3c859b4bc270f655f47e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}