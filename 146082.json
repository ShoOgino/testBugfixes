{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","sourceOld":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        final LeafReader atomicView;\n        if (unsortedReaders.size() == 1) {\n          atomicView = unsortedReaders.get(0);\n        } else {\n          final IndexReader multiReader = new MultiReader(unsortedReaders.toArray(new LeafReader[unsortedReaders.size()]));\n          atomicView = SlowCompositeReaderWrapper.wrap(multiReader);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb141d31bad018fca450f2166f0981b8f4c16e89","date":1419362004,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(sortedView);\n      }\n    }\n\n","sourceOld":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","sourceOld":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(sortedView);\n      }\n    }\n\n","bugFix":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","fb141d31bad018fca450f2166f0981b8f4c16e89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"    @Override\n    public List<CodecReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting \" + unsortedReaders);\n          for (LeafReader leaf : unsortedReaders) {\n            String sortDescription = getSortDescription(leaf);\n            if (sortDescription == null) {\n              sortDescription = \"not sorted\";\n            }\n            infoStream.message(\"SMP\", \"seg=\" + leaf + \" \" + sortDescription);\n          }\n        }\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      if (docMap == null) {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"readers already sorted, omitting sort\");\n        }\n        return unsortedReaders;\n      } else {\n        if (infoStream.isEnabled(\"SMP\")) {\n          infoStream.message(\"SMP\", \"sorting readers by \" + sort);\n        }\n        return Collections.singletonList(SlowCodecReaderWrapper.wrap(sortedView));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb141d31bad018fca450f2166f0981b8f4c16e89":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["505bff044e47a553f461b6f4484d1d08faf4ac85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["505bff044e47a553f461b6f4484d1d08faf4ac85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["fb141d31bad018fca450f2166f0981b8f4c16e89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["505bff044e47a553f461b6f4484d1d08faf4ac85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["505bff044e47a553f461b6f4484d1d08faf4ac85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"fb141d31bad018fca450f2166f0981b8f4c16e89":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["fb141d31bad018fca450f2166f0981b8f4c16e89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}