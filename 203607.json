{"path":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81530aec3dade54d134a5bbf27fb31a590def317","date":1389812586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n    if (missingValue != null) {\n      buffer.append(\" missingValue=\");\n      buffer.append(missingValue);\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n    if (missingValue != null) {\n      buffer.append(\" missingValue=\");\n      buffer.append(missingValue);\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81530aec3dade54d134a5bbf27fb31a590def317":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["59a0020b413d44dd79d85d7a66ed5004265fb453","81530aec3dade54d134a5bbf27fb31a590def317"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"81530aec3dade54d134a5bbf27fb31a590def317":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["81530aec3dade54d134a5bbf27fb31a590def317","37a0f60745e53927c4c876cfe5b5a58170f0646c","27ab7b234eab0cbc020836989b96ed430e1065bb"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}