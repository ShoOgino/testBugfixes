{"path":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void pauseAllThreads() {\n    pauseThreads++;\n    if (1 == pauseThreads) {\n      while(!allThreadsIdle()) {\n        try {\n          wait();\n        } catch (InterruptedException e) {\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8560794cda5bcd510c60e38ed553e9c5a6204983","date":1196807382,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  synchronized void pauseAllThreads() {\n    pauseThreads++;\n    if (1 == pauseThreads) {\n      while(!allThreadsIdle()) {\n        try {\n          wait();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void pauseAllThreads() {\n    pauseThreads++;\n    if (1 == pauseThreads) {\n      while(!allThreadsIdle()) {\n        try {\n          wait();\n        } catch (InterruptedException e) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return aborting;\n  }\n\n","sourceOld":"  synchronized void pauseAllThreads() {\n    pauseThreads++;\n    if (1 == pauseThreads) {\n      while(!allThreadsIdle()) {\n        try {\n          wait();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","8560794cda5bcd510c60e38ed553e9c5a6204983"],"bugIntro":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d","date":1202734547,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return abortCount > 0;\n  }\n\n","sourceOld":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return aborting;\n  }\n\n","bugFix":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    return aborting;\n  }\n\n","sourceOld":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return abortCount > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n\n    return aborting;\n  }\n\n","sourceOld":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    return aborting;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n\n    return aborting;\n  }\n\n","sourceOld":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n\n    return aborting;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#pauseAllThreads().mjava","sourceNew":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n\n    return aborting;\n  }\n\n","sourceOld":"  // Returns true if an abort is in progress\n  synchronized boolean pauseAllThreads() {\n    pauseThreads++;\n    while(!allThreadsIdle()) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n\n    return aborting;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8560794cda5bcd510c60e38ed553e9c5a6204983":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"8560794cda5bcd510c60e38ed553e9c5a6204983":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"5350389bf83287111f7760b9e3db3af8e3648474":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}