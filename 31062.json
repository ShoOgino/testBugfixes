{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","commits":[{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"/dev/null","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\"};\n    String[] fields = {\"b\", \"t\"};\n    int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:two\", q.toString());\n\n    try {\n      int[] flags2 = {MultiFieldQueryParser.REQUIRED_FIELD};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"497366d9491b581aca93e5134d95505e501aa58d","date":1128546088,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\"};\n    String[] fields = {\"b\", \"t\"};\n    int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:two\", q.toString());\n\n    try {\n      int[] flags2 = {MultiFieldQueryParser.REQUIRED_FIELD};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(queries, fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws ParseException {\n    String[] queries = {\"one\", \"two\", \"three\"};\n    String[] fields = {\"f1\", \"f2\", \"f3\"};\n    BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"497366d9491b581aca93e5134d95505e501aa58d":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["497366d9491b581aca93e5134d95505e501aa58d"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"497366d9491b581aca93e5134d95505e501aa58d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["497366d9491b581aca93e5134d95505e501aa58d"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}