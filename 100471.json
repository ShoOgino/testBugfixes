{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionList(ClusterState,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionList(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c2f5223cebd58879933670af3e599b10d7e8f1a","date":1422450178,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c2f5223cebd58879933670af3e599b10d7e8f1a":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c2f5223cebd58879933670af3e599b10d7e8f1a"]},"commit2Childs":{"4c2f5223cebd58879933670af3e599b10d7e8f1a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c2f5223cebd58879933670af3e599b10d7e8f1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}