{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' separated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * separate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * A constructor called with a '|' separated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * separate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["7602e63987582091a0e432f8d8f7619d2206fab7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7602e63987582091a0e432f8d8f7619d2206fab7":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7602e63987582091a0e432f8d8f7619d2206fab7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7602e63987582091a0e432f8d8f7619d2206fab7":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}