{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}