{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen[number]);\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed004bd98627df9d3b3a1a9ec80423e8d456bdb3","date":1306370077,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10acb7e55ffd7d041a1028653d0defa4a50bfec3","date":1323041492,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) {\n    if (hasSeparateNorms(number)) {\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ed004bd98627df9d3b3a1a9ec80423e8d456bdb3","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["1224a4027481acce15495b03bce9b48b93b42722","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ed004bd98627df9d3b3a1a9ec80423e8d456bdb3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6267e1ce56c2eec111425690cd04e251b6f14952","6267e1ce56c2eec111425690cd04e251b6f14952"],"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["ed004bd98627df9d3b3a1a9ec80423e8d456bdb3"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["6267e1ce56c2eec111425690cd04e251b6f14952","1224a4027481acce15495b03bce9b48b93b42722"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","ed004bd98627df9d3b3a1a9ec80423e8d456bdb3"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ed004bd98627df9d3b3a1a9ec80423e8d456bdb3","10acb7e55ffd7d041a1028653d0defa4a50bfec3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ed004bd98627df9d3b3a1a9ec80423e8d456bdb3"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ed004bd98627df9d3b3a1a9ec80423e8d456bdb3","a3776dccca01c11e7046323cfad46a3b4a471233"],"ed004bd98627df9d3b3a1a9ec80423e8d456bdb3":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","10acb7e55ffd7d041a1028653d0defa4a50bfec3","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3615ce4a1f785ae1b779244de52c6a7d99227e60","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"6267e1ce56c2eec111425690cd04e251b6f14952":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1224a4027481acce15495b03bce9b48b93b42722":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}