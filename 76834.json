{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doSolrRequest(String token, int expectedStatusCode, HttpSolrClient client, int trials)\n  throws Exception {\n    int lastStatusCode = 0;\n    for (int i = 0; i < trials; ++i) {\n      lastStatusCode = getStatusCode(token, null, null, client);\n      if (lastStatusCode == expectedStatusCode) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    assertEquals(\"Did not receieve excepted status code\", expectedStatusCode, lastStatusCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2ea5b19328a5a1b04e714b1406d740794da8419"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doSolrRequest(String token, int expectedStatusCode, HttpSolrClient client, int trials)\n  throws Exception {\n    int lastStatusCode = 0;\n    for (int i = 0; i < trials; ++i) {\n      lastStatusCode = getStatusCode(token, null, null, client);\n      if (lastStatusCode == expectedStatusCode) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    assertEquals(\"Did not receieve excepted status code\", expectedStatusCode, lastStatusCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doSolrRequest(String token, int expectedStatusCode, HttpSolrClient client, int trials)\n  throws Exception {\n    int lastStatusCode = 0;\n    for (int i = 0; i < trials; ++i) {\n      lastStatusCode = getStatusCode(token, null, null, client);\n      if (lastStatusCode == expectedStatusCode) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    assertEquals(\"Did not receieve excepted status code\", expectedStatusCode, lastStatusCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ea5b19328a5a1b04e714b1406d740794da8419","date":1573661505,"type":3,"author":"Istvan Farkas","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens#doSolrRequest(String,int,HttpSolrClient,int).mjava","sourceNew":"  private void doSolrRequest(String token, int expectedStatusCode, HttpSolrClient client, int trials)\n  throws Exception {\n    int lastStatusCode = 0;\n    for (int i = 0; i < trials; ++i) {\n      lastStatusCode = getStatusCode(token, null, null, client);\n      if (lastStatusCode == expectedStatusCode) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    assertEquals(\"Did not receive expected status code\", expectedStatusCode, lastStatusCode);\n  }\n\n","sourceOld":"  private void doSolrRequest(String token, int expectedStatusCode, HttpSolrClient client, int trials)\n  throws Exception {\n    int lastStatusCode = 0;\n    for (int i = 0; i < trials; ++i) {\n      lastStatusCode = getStatusCode(token, null, null, client);\n      if (lastStatusCode == expectedStatusCode) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    assertEquals(\"Did not receieve excepted status code\", expectedStatusCode, lastStatusCode);\n  }\n\n","bugFix":["20be168d828ac40d262f85364d02f15b491dd88b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ea5b19328a5a1b04e714b1406d740794da8419":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2ea5b19328a5a1b04e714b1406d740794da8419"]},"commit2Childs":{"d2ea5b19328a5a1b04e714b1406d740794da8419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"20be168d828ac40d262f85364d02f15b491dd88b":["d2ea5b19328a5a1b04e714b1406d740794da8419","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}