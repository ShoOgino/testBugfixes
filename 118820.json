{"path":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","commits":[{"id":"5e0eba829d8047c176db6cee2c2c2e6f37e2925d","date":1575525998,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved OS: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved OS: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d94deac68514af4c985eabd56d9bb95ce27467b9","date":1576085774,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-14025: Velocity's SecureUberspector addresses this\")\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved OS: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","bugFix":["5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-14025: Velocity's SecureUberspector addresses this\")\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved OS: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testTemplateSandbox().mjava","sourceNew":null,"sourceOld":"  @Test\n  @Ignore(\"SOLR-14025: Velocity's SecureUberspector addresses this\")\n  public void testTemplateSandbox() throws Exception {\n    assumeTrue(\"This test only works with security manager\", System.getSecurityManager() != null);\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    nl.add(\"template.base.dir\", getFile(\"velocity\").getAbsolutePath());\n    vrw.init(nl);\n    SolrQueryRequest req = req(VelocityResponseWriter.TEMPLATE,\"outside_the_box\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    StringWriter buf = new StringWriter();\n    try {\n      vrw.write(buf, req, rsp);\n      fail(\"template broke outside the box, retrieved: \" + buf);\n    } catch (MethodInvocationException e) {\n      assertNotNull(e.getCause());\n      assertEquals(AccessControlException.class, e.getCause().getClass());\n      // expected failure, can't get outside the box\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["a90f561fc609ec007ba18b10dea9191dbbd71831","d94deac68514af4c985eabd56d9bb95ce27467b9"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"a90f561fc609ec007ba18b10dea9191dbbd71831":["df724d84dab24a0cc54bec95a8680867adc7f171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a90f561fc609ec007ba18b10dea9191dbbd71831","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["df724d84dab24a0cc54bec95a8680867adc7f171","b659435fdb2401d91fa87bb3df798ae41a8046cd"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["a90f561fc609ec007ba18b10dea9191dbbd71831","d94deac68514af4c985eabd56d9bb95ce27467b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}