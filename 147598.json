{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#testPullReplicaDisconnectsFromZooKeeper().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#testPullReplicaDisconnectsFromZooKeeper().mjava","pathOld":"/dev/null","sourceNew":"  public void testPullReplicaDisconnectsFromZooKeeper() throws Exception {\n    int numShards = 1;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, 1, 0, 1)\n      .setMaxShardsPerNode(1)\n      .process(cluster.getSolrClient());\n    addDocs(10);\n    DocCollection docCollection = assertNumberOfReplicas(numShards, 0, numShards, false, true);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(10, pullReplicaClient);\n    }\n    addDocs(20);\n    JettySolrRunner jetty = getJettyForReplica(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    cluster.expireZkSession(jetty);\n    addDocs(30);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(40);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 1));\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(40, pullReplicaClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#testPullReplicaDisconnectsFromZooKeeper().mjava","pathOld":"/dev/null","sourceNew":"  public void testPullReplicaDisconnectsFromZooKeeper() throws Exception {\n    int numShards = 1;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, 1, 0, 1)\n      .setMaxShardsPerNode(1)\n      .process(cluster.getSolrClient());\n    addDocs(10);\n    DocCollection docCollection = assertNumberOfReplicas(numShards, 0, numShards, false, true);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(10, pullReplicaClient);\n    }\n    addDocs(20);\n    JettySolrRunner jetty = getJettyForReplica(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    cluster.expireZkSession(jetty);\n    addDocs(30);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(40);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 1));\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(40, pullReplicaClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#testPullReplicaDisconnectsFromZooKeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#testPullReplicaDisconnectsFromZooKeeper().mjava","sourceNew":"  public void testPullReplicaDisconnectsFromZooKeeper() throws Exception {\n    int numShards = 1;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, 1, 0, 1)\n      .process(cluster.getSolrClient());\n    addDocs(10);\n    DocCollection docCollection = assertNumberOfReplicas(numShards, 0, numShards, false, true);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(10, pullReplicaClient);\n    }\n    addDocs(20);\n    JettySolrRunner jetty = getJettyForReplica(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    cluster.expireZkSession(jetty);\n    addDocs(30);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(40);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 1));\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(40, pullReplicaClient);\n    }\n  }\n\n","sourceOld":"  public void testPullReplicaDisconnectsFromZooKeeper() throws Exception {\n    int numShards = 1;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, 1, 0, 1)\n      .setMaxShardsPerNode(1)\n      .process(cluster.getSolrClient());\n    addDocs(10);\n    DocCollection docCollection = assertNumberOfReplicas(numShards, 0, numShards, false, true);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(10, pullReplicaClient);\n    }\n    addDocs(20);\n    JettySolrRunner jetty = getJettyForReplica(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    cluster.expireZkSession(jetty);\n    addDocs(30);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 0));\n    addDocs(40);\n    waitForState(\"Expecting node to be disconnected\", collectionName, activeReplicaCount(1, 0, 1));\n    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {\n      assertNumDocs(40, pullReplicaClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}