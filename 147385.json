{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/PagedBytes#fill(BytesRef,long,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/PagedBytes#fill(BytesRef,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a slice out of the byte array. */\n  public void fill(BytesRef b, long start, int length) {\n    assert length >= 0: \"length=\" + length;\n    final int index = (int) (start >> blockBits);\n    final int offset = (int) (start & blockMask);\n    b.length = length;\n    if (blockSize - offset >= length) {\n      // Within block\n      b.bytes = blocks.get(index);\n      b.offset = offset;\n    } else {\n      // Split\n      byte[] buffer = threadBuffers.get();\n      if (buffer == null) {\n        buffer = new byte[length];\n        threadBuffers.set(buffer);\n      } else if (buffer.length < length) {\n        buffer = ArrayUtil.grow(buffer, length);\n        threadBuffers.set(buffer);\n      }\n      b.bytes = buffer;\n      b.offset = 0;\n      System.arraycopy(blocks.get(index), offset, buffer, 0, blockSize-offset);\n      System.arraycopy(blocks.get(1+index), 0, buffer, blockSize-offset, length-(blockSize-offset));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/PagedBytes#fill(BytesRef,long,int).mjava","sourceNew":null,"sourceOld":"  /** Get a slice out of the byte array. */\n  public void fill(BytesRef b, long start, int length) {\n    assert length >= 0: \"length=\" + length;\n    final int index = (int) (start >> blockBits);\n    final int offset = (int) (start & blockMask);\n    b.length = length;\n    if (blockSize - offset >= length) {\n      // Within block\n      b.bytes = blocks.get(index);\n      b.offset = offset;\n    } else {\n      // Split\n      byte[] buffer = threadBuffers.get();\n      if (buffer == null) {\n        buffer = new byte[length];\n        threadBuffers.set(buffer);\n      } else if (buffer.length < length) {\n        buffer = ArrayUtil.grow(buffer, length);\n        threadBuffers.set(buffer);\n      }\n      b.bytes = buffer;\n      b.offset = 0;\n      System.arraycopy(blocks.get(index), offset, buffer, 0, blockSize-offset);\n      System.arraycopy(blocks.get(1+index), 0, buffer, blockSize-offset, length-(blockSize-offset));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}