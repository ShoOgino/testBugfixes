{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42adde674c3832964de02a512782c0d752a1ff7","date":1347295064,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return sequence number\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @return sequence number\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @param nStringSequence\n   * @return sequence number\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#getSeq(String).mjava","sourceNew":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @return sequence number\n   */\n  public static int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Returns int given String of form n_0000000001 or n_0000000003, etc.\n   * \n   * @return sequence number\n   */\n  private int getSeq(String nStringSequence) {\n    int seq = 0;\n    Matcher m = LEADER_SEQ.matcher(nStringSequence);\n    if (m.matches()) {\n      seq = Integer.parseInt(m.group(1));\n    } else {\n      throw new IllegalStateException(\"Could not find regex match in:\"\n          + nStringSequence);\n    }\n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a6378064655e76cd7b908b1cab4ce425b384b508"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["f42adde674c3832964de02a512782c0d752a1ff7"],"f42adde674c3832964de02a512782c0d752a1ff7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f42adde674c3832964de02a512782c0d752a1ff7":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f42adde674c3832964de02a512782c0d752a1ff7","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}