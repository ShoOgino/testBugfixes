{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Deletes the feed with the given feed id Feed action will be not buffered.\n     * Call to this method forces the index to be written.\n     * All entries referencing the given feed id will be deleted as well!\n     * @param feedId -\n     *            the id of the feed to delete\n     * @throws StorageException -\n     *             if the feed can not be deleted\n     */\n    public void deleteFeed(final String feedId) throws StorageException {\n        this.readLock.lock();\n        try {\n            this.deletedDocumentQueue.add(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,feedId));\n            this.forceWriteTerms.add(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                    feedId));\n\n            storageModified();\n        } finally {\n            this.readLock.unlock();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","sourceNew":"    /**\n     * Deletes the feed with the given feed id Feed action will be not buffered.\n     * Call to this method forces the index to be written.\n     * All entries referencing the given feed id will be deleted as well!\n     * @param feedId -\n     *            the id of the feed to delete\n     * @throws StorageException -\n     *             if the feed can not be deleted\n     */\n    public void deleteFeed(final String feedId) throws StorageException {\n        this.lock.lock();\n        try {\n            this.deletedDocumentQueue.add(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,feedId));\n            this.forceWriteTerms.add(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                    feedId));\n\n            storageModified();\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Deletes the feed with the given feed id Feed action will be not buffered.\n     * Call to this method forces the index to be written.\n     * All entries referencing the given feed id will be deleted as well!\n     * @param feedId -\n     *            the id of the feed to delete\n     * @throws StorageException -\n     *             if the feed can not be deleted\n     */\n    public void deleteFeed(final String feedId) throws StorageException {\n        this.readLock.lock();\n        try {\n            this.deletedDocumentQueue.add(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,feedId));\n            this.forceWriteTerms.add(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                    feedId));\n\n            storageModified();\n        } finally {\n            this.readLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteFeed(String).mjava","sourceNew":"    /**\n     * Deletes the feed with the given feed id Feed action will be not buffered.\n     * Call to this method forces the index to be written.\n     * All entries referencing the given feed id will be deleted as well!\n     * @param feedId -\n     *            the id of the feed to delete\n     * @throws StorageException -\n     *             if the feed can not be deleted\n     */\n    public void deleteFeed(final String feedId) throws StorageException {\n        this.lock.lock();\n        try {\n            this.deletedDocumentQueue.add(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,feedId));\n            this.forceWriteTerms.add(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                    feedId));\n\n            storageModified();\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Deletes the feed with the given feed id Feed action will be not buffered.\n     * Call to this method forces the index to be written.\n     * All entries referencing the given feed id will be deleted as well!\n     * @param feedId -\n     *            the id of the feed to delete\n     * @throws StorageException -\n     *             if the feed can not be deleted\n     */\n    public void deleteFeed(final String feedId) throws StorageException {\n        this.lock.lock();\n        try {\n            this.deletedDocumentQueue.add(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,feedId));\n            this.forceWriteTerms.add(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                    feedId));\n\n            storageModified();\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}