{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","commits":[{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","sourceNew":null,"sourceOld":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","sourceNew":null,"sourceOld":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(facetSearchParams, indexReader, taxoReader);\n    sfa.setComplementThreshold(doComplement ? OldFacetsAccumulator.FORCE_COMPLEMENT : OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}