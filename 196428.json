{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isLoggable(Level.INFO);\n\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b25548d261afcf52a3ad2f48029de74fdfa668","date":1217398156,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isLoggable(Level.INFO);\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isLoggable(Level.INFO);\n\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isLoggable(Level.INFO);\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n      this.cacheList[i].warm(this, old.cacheList[i]);\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"50b25548d261afcf52a3ad2f48029de74fdfa668":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["50b25548d261afcf52a3ad2f48029de74fdfa668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["50b25548d261afcf52a3ad2f48029de74fdfa668"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"50b25548d261afcf52a3ad2f48029de74fdfa668":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}