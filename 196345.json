{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCachingLimit() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n      Collection<String> names = cores.getCoreNames();\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cores.getCore(\"collection1\");\n      SolrCore core2 = cores.getCore(\"collectionLazy3\");\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      SolrCore core3 = cores.getCore(\"collectionLazy2\");\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n\n\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(\"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cores.getCore(\"collectionLazy6\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(\"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cores.getCore(\"collectionLazy7\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(\"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cores.getCore(\"collectionLazy8\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(\"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cores.getCore(\"collectionLazy9\");\n      checkInCores(\"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores( \"collectionLazy2\",\"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core2 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core3 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n      Collection<String> names = cores.getCoreNames();\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cores.getCore(\"collection1\");\n      SolrCore core2 = cores.getCore(\"collectionLazy3\");\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      SolrCore core3 = cores.getCore(\"collectionLazy2\");\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n\n\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(\"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cores.getCore(\"collectionLazy6\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(\"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cores.getCore(\"collectionLazy7\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(\"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cores.getCore(\"collectionLazy8\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(\"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cores.getCore(\"collectionLazy9\");\n      checkInCores(\"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores( \"collectionLazy2\",\"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core2 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core3 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n      Collection<String> names = cores.getCoreNames();\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cores.getCore(\"collection1\");\n      SolrCore core2 = cores.getCore(\"collectionLazy3\");\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      SolrCore core3 = cores.getCore(\"collectionLazy2\");\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n\n\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(\"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cores.getCore(\"collectionLazy6\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(\"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cores.getCore(\"collectionLazy7\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(\"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cores.getCore(\"collectionLazy8\");\n      checkInCores(\"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(\"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cores.getCore(\"collectionLazy9\");\n      checkInCores(\"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores( \"collectionLazy2\",\"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d9daa29108c4330a5533a5cddaa9a95e7eb3061","date":1355669188,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\",  \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc,\"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core2 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core3 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\",  \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc,\"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core2 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core3 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\",  \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc,\"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, \"collection7\", \"collection8\", \"collection9\");\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, \"collection8\", \"collection9\");\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, \"collection3\", \"collection9\");\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy6\", \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collectionLazy6\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\");\n      checkNotInCores(cc, \"collectionLazy7\", \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core7 = cc.getCore(\"collectionLazy7\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy5\",\n          \"collectionLazy6\", \"collectionLazy7\");\n      checkNotInCores(cc, \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core8 = cc.getCore(\"collectionLazy8\");\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\",\n          \"collectionLazy7\", \"collectionLazy8\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy9\");\n\n      SolrCore core9 = cc.getCore(\"collectionLazy9\");\n      checkInCores(cc, \"collection1\", \"collectionLazy4\", \"collectionLazy5\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n      checkNotInCores(cc, \"collectionLazy2\", \"collectionLazy3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, \"collection7\", \"collection8\", \"collection9\");\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, \"collection8\", \"collection9\");\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, \"collection3\", \"collection9\");\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, \"collection7\", \"collection8\", \"collection9\");\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, \"collection8\", \"collection9\");\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, \"collection3\", \"collection9\");\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, \"collection7\", \"collection8\", \"collection9\");\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, \"collection8\", \"collection9\");\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, \"collection3\", \"collection9\");\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b1e01b66a1c90a549873dd7b2a68ca52f62930","date":1533640901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)\n      MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      handler.handleRequest(makeReq(core1, CommonParams.QT, \"/admin/metrics\"), resp);\n      NamedList values = resp.getValues();\n      assertNotNull(values.get(\"metrics\"));\n      values = (NamedList) values.get(\"metrics\");\n      NamedList nl = (NamedList) values.get(\"solr.core.collection2\");\n      assertNotNull(nl);\n      Object o = nl.get(\"REPLICATION./replication.indexPath\");\n      assertNotNull(o);\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"576125e6a2121b67122c3ad3176f170e1905367b","date":1589248529,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)\n      try (MetricsHandler handler = new MetricsHandler(h.getCoreContainer())) {\n\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(makeReq(core1, CommonParams.QT, \"/admin/metrics\"), resp);\n        NamedList values = resp.getValues();\n        assertNotNull(values.get(\"metrics\"));\n        values = (NamedList) values.get(\"metrics\");\n        NamedList nl = (NamedList) values.get(\"solr.core.collection2\");\n        assertNotNull(nl);\n        Object o = nl.get(\"REPLICATION./replication.indexPath\");\n        assertNotNull(o);\n      }\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)\n      MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      handler.handleRequest(makeReq(core1, CommonParams.QT, \"/admin/metrics\"), resp);\n      NamedList values = resp.getValues();\n      assertNotNull(values.get(\"metrics\"));\n      values = (NamedList) values.get(\"metrics\");\n      NamedList nl = (NamedList) values.get(\"solr.core.collection2\");\n      assertNotNull(nl);\n      Object o = nl.get(\"REPLICATION./replication.indexPath\");\n      assertNotNull(o);\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testCachingLimit().mjava","sourceNew":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)\n      try (MetricsHandler handler = new MetricsHandler(h.getCoreContainer())) {\n\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(makeReq(core1, CommonParams.QT, \"/admin/metrics\"), resp);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList values = resp.getValues();\n        assertNotNull(values.get(\"metrics\"));\n        values = (NamedList) values.get(\"metrics\");\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = (NamedList) values.get(\"solr.core.collection2\");\n        assertNotNull(nl);\n        Object o = nl.get(\"REPLICATION./replication.indexPath\");\n        assertNotNull(o);\n      }\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCachingLimit() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // First check that all the cores that should be loaded at startup actually are.\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.\n      SolrCore core1 = cc.getCore(\"collection1\");\n      SolrCore core3 = cc.getCore(\"collection3\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n      SolrCore core2 = cc.getCore(\"collection2\");\n      SolrCore core5 = cc.getCore(\"collection5\");\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection6\", \"collection7\", \"collection8\", \"collection9\"));\n\n      // map should be full up, add one more and verify\n      SolrCore core6 = cc.getCore(\"collection6\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\");\n      checkNotInCores(cc, Arrays.asList(\"collection7\", \"collection8\", \"collection9\"));\n\n      SolrCore core7 = cc.getCore(\"collection7\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection3\", \"collection4\", \"collection5\",\n          \"collection6\", \"collection7\");\n      checkNotInCores(cc, Arrays.asList(\"collection8\", \"collection9\"));\n\n      SolrCore core8 = cc.getCore(\"collection8\");\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\", \"collection6\",\n          \"collection7\", \"collection8\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection9\"));\n\n      SolrCore core9 = cc.getCore(\"collection9\");\n      checkInCores(cc, \"collection1\", \"collection4\", \"collection5\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)\n      try (MetricsHandler handler = new MetricsHandler(h.getCoreContainer())) {\n\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(makeReq(core1, CommonParams.QT, \"/admin/metrics\"), resp);\n        NamedList values = resp.getValues();\n        assertNotNull(values.get(\"metrics\"));\n        values = (NamedList) values.get(\"metrics\");\n        NamedList nl = (NamedList) values.get(\"solr.core.collection2\");\n        assertNotNull(nl);\n        Object o = nl.get(\"REPLICATION./replication.indexPath\");\n        assertNotNull(o);\n      }\n\n\n      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the\n      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n      core6.close();\n      core7.close();\n      core8.close();\n      core9.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"30c8e5574b55d57947e989443dfde611646530ee":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"e98520789adb1d5ad05afb4956eca0944a929688":["576125e6a2121b67122c3ad3176f170e1905367b"],"576125e6a2121b67122c3ad3176f170e1905367b":["89b1e01b66a1c90a549873dd7b2a68ca52f62930"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a837c064b67fa63a9394136e31218b908cdcf783"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"89b1e01b66a1c90a549873dd7b2a68ca52f62930":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","89b1e01b66a1c90a549873dd7b2a68ca52f62930"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"576125e6a2121b67122c3ad3176f170e1905367b":["e98520789adb1d5ad05afb4956eca0944a929688"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"a837c064b67fa63a9394136e31218b908cdcf783":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"89b1e01b66a1c90a549873dd7b2a68ca52f62930":["576125e6a2121b67122c3ad3176f170e1905367b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}