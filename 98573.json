{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new Lucene40SkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads, false);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new Lucene40SkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads, false);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b05bfc12b2525ff33528806e03283a44d6fe7d3","date":1336132926,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","sourceNew":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new Lucene3xSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new Lucene40SkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads, false);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f","a44b232879361a7ace3520b5b313094a9a35e044"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermDocs#skipTo(int).mjava","sourceNew":null,"sourceOld":"  /** Optimized implementation. */\n  public boolean skipTo(int target) throws IOException {\n    // don't skip if the target is close (within skipInterval docs away)\n    if ((target - skipInterval) >= doc && df >= skipInterval) {                      // optimized case\n      if (skipListReader == null)\n        skipListReader = new Lucene3xSkipListReader((IndexInput) freqStream.clone(), maxSkipLevels, skipInterval); // lazily clone\n\n      if (!haveSkipped) {                          // lazily initialize skip stream\n        skipListReader.init(skipPointer, freqBasePointer, proxBasePointer, df, currentFieldStoresPayloads);\n        haveSkipped = true;\n      }\n\n      int newCount = skipListReader.skipTo(target); \n      if (newCount > count) {\n        freqStream.seek(skipListReader.getFreqPointer());\n        skipProx(skipListReader.getProxPointer(), skipListReader.getPayloadLength());\n\n        doc = skipListReader.getDoc();\n        count = newCount;\n      }      \n    }\n\n    // done skipping, now just scan\n    do {\n      if (!next())\n        return false;\n    } while (target > doc);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["9b05bfc12b2525ff33528806e03283a44d6fe7d3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b05bfc12b2525ff33528806e03283a44d6fe7d3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9b05bfc12b2525ff33528806e03283a44d6fe7d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9b05bfc12b2525ff33528806e03283a44d6fe7d3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}