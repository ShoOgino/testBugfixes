{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    int minXOfs = 0;\n    int minYOfs = 0;\n    int maxXOfs = 0;\n    int maxYOfs = 0;\n    for (int d = 1; d < 3; ++d) {\n      // check minX\n      int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n        minXOfs = d;\n      }\n      // check maxX\n      aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n        maxXOfs = d;\n      }\n      // check minY\n      aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n      bOfs = d * 2 * LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n        minYOfs = d;\n      }\n      // check maxY\n      aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n        maxYOfs = d;\n      }\n    }\n    minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n    maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n    minYOfs *= 2 * LatLonPoint.BYTES;\n    maxYOfs *= 2 * LatLonPoint.BYTES;\n\n    Relation r = relateRangeBBoxToQuery(minXOfs, minYOfs, minTriangle, maxXOfs, maxYOfs, maxTriangle);\n\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    int minXOfs = 0;\n    int minYOfs = 0;\n    int maxXOfs = 0;\n    int maxYOfs = 0;\n    for (int d = 1; d < 3; ++d) {\n      // check minX\n      int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n        minXOfs = d;\n      }\n      // check maxX\n      aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n        maxXOfs = d;\n      }\n      // check minY\n      aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n      bOfs = d * 2 * LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n        minYOfs = d;\n      }\n      // check maxY\n      aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n      if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n        maxYOfs = d;\n      }\n    }\n    minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n    maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n    minYOfs *= 2 * LatLonPoint.BYTES;\n    maxYOfs *= 2 * LatLonPoint.BYTES;\n\n    Relation r = relateRangeBBoxToQuery(minXOfs, minYOfs, minTriangle, maxXOfs, maxYOfs, maxTriangle);\n\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e8251ad51618827e557dd369f16921a666914b5":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e8251ad51618827e557dd369f16921a666914b5"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["e48f589a9604e11db23a025a27efbf3d14ab4e3b","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"5e8251ad51618827e557dd369f16921a666914b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}