{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = IndexReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = IndexReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = IndexReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = IndexReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = IndexReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = new IndexSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.shutdown();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.shutdown();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.shutdown();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.shutdown();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnClose().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer then\n   * add a bunch of docs, making sure reader does not see\n   * these docs until writer is closed.\n   */\n  public void testCommitOnClose() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 14; i++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      DirectoryReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for(int i=0;i<3;i++) {\n        for(int j=0;j<11;j++) {\n          TestIndexWriter.addDoc(writer);\n        }\n        IndexReader r = DirectoryReader.open(dir);\n        searcher = newSearcher(r);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        r.close();\n        assertTrue(\"reader should have still been current\", reader.isCurrent());\n      }\n\n      // Now, close the writer:\n      writer.close();\n      assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n      r.close();\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}