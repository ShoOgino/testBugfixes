{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","commits":[{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), null);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["718607d99d02778db3280e64975663762c94170d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), null);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718607d99d02778db3280e64975663762c94170d","date":1354986964,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), null);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":["34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), null);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34efe37e5314525b1f3e373269e95bcdec2ceb2f","date":1357610514,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":["b5f7137bd9491c6596681b1f56e481e17964e581","718607d99d02778db3280e64975663762c94170d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d0ce568448269aad19a317e537eefc0993934c9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ce568448269aad19a317e537eefc0993934c9d","date":1361139215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getNewIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0fcdcf196523675146a4df3193e91413533857ab"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","718607d99d02778db3280e64975663762c94170d"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","d0ce568448269aad19a317e537eefc0993934c9d"],"46d8ada1fff8d18cb197c38c7983225162599948":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","2acf500f78aa12b92e371fd89c719291986b6b90"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"0fcdcf196523675146a4df3193e91413533857ab":["d0ce568448269aad19a317e537eefc0993934c9d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["2acf500f78aa12b92e371fd89c719291986b6b90","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"34efe37e5314525b1f3e373269e95bcdec2ceb2f":["718607d99d02778db3280e64975663762c94170d"],"718607d99d02778db3280e64975663762c94170d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"d0ce568448269aad19a317e537eefc0993934c9d":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","09c8567c25c02eeeb3e719841606a1269f3538ca","d0ce568448269aad19a317e537eefc0993934c9d"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","718607d99d02778db3280e64975663762c94170d"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d9405f486872f1e416304dfe389741f4ee2f8a4d","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"0fcdcf196523675146a4df3193e91413533857ab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"34efe37e5314525b1f3e373269e95bcdec2ceb2f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"718607d99d02778db3280e64975663762c94170d":["407687e67faf6e1f02a211ca078d8e3eed631027","34efe37e5314525b1f3e373269e95bcdec2ceb2f"],"d0ce568448269aad19a317e537eefc0993934c9d":["09c8567c25c02eeeb3e719841606a1269f3538ca","0fcdcf196523675146a4df3193e91413533857ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","09c8567c25c02eeeb3e719841606a1269f3538ca","46d8ada1fff8d18cb197c38c7983225162599948","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}