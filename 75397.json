{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","sourceNew":"  /**\n   * Public version of findIntersections.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","sourceOld":"  /**\n   * Public version of findIntersections.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09149ac46adf9772db58c67d18f37b1c5e109b34","date":1461566431,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","sourceNew":"  /**\n   * Find the intersection points between two planes, given a set of bounds.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points, or null if the planes are numerically identical.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","sourceOld":"  /**\n   * Public version of findIntersections.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","sourceNew":"  /**\n   * Find the intersection points between two planes, given a set of bounds.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points, or null if the planes are numerically identical.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","sourceOld":"  /**\n   * Public version of findIntersections.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#findIntersections(PlanetModel,Plane,Membership...).mjava","sourceNew":"  /**\n   * Find the intersection points between two planes, given a set of bounds.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points, or null if the planes are numerically identical.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","sourceOld":"  /**\n   * Public version of findIntersections.\n   * @param planetModel is the planet model.\n   * @param q is the plane to intersect with.\n   * @param bounds are the bounds to consider to determine legal intersection points.\n   * @return the set of legal intersection points.\n   */\n  public GeoPoint[] findIntersections(final PlanetModel planetModel, final Plane q, final Membership... bounds) {\n    if (isNumericallyIdentical(q)) {\n      return null;\n    }\n    return findIntersections(planetModel, q, bounds, NO_BOUNDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09149ac46adf9772db58c67d18f37b1c5e109b34":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["b4e444678504caf66a8060b1d514383aa4feac0c","09149ac46adf9772db58c67d18f37b1c5e109b34"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["b4e444678504caf66a8060b1d514383aa4feac0c","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"]},"commit2Childs":{"09149ac46adf9772db58c67d18f37b1c5e109b34":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"b4e444678504caf66a8060b1d514383aa4feac0c":["09149ac46adf9772db58c67d18f37b1c5e109b34","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}