{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}