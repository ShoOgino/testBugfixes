{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5feef8a61b3cf481ea3eb95b284faeb6aa83434c","date":1333098189,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7e9263ec3b8515d17804c44e04d379b80436a65","date":1336932508,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore  - TODO\n    // assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e","date":1337006761,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore  - TODO\n    // assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a8954ce7749d4df8d7288d333126e079af73f12","date":1340166187,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setQueryType(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    \n\n    System.out.println( (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"dirimpl\"));\n\n    \n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    \n\n    System.out.println( (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"dirimpl\"));\n\n    \n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2295e2775c39b05b81f566701b1e7e9475128f2","date":1363552877,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    \n    response = getSolrCore(\"core0\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"data\");\n    \n\n    System.out.println( (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"dirimpl\"));\n\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n    \n    Unload req = new Unload(false);\n    req.setDeleteDataDir(true);\n    req.setCoreName(\"core0\");\n    req.process(coreadmin);\n    \n    dir = new File(dataDir);\n    assertFalse(\"Data directory exists after core unload with deleteDataDir=true : \" + dir, dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    \n\n    System.out.println( (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"dirimpl\"));\n\n    \n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try { \n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    \n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    response = getSolrCore(\"core0\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"data\");\n    \n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n    \n    Unload req = new Unload(false);\n    req.setDeleteDataDir(true);\n    req.setCoreName(\"core0\");\n    req.process(coreadmin);\n    \n    dir = new File(dataDir);\n    assertFalse(\"Data directory exists after core unload with deleteDataDir=true : \" + dir, dir.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    \n    response = getSolrCore(\"core0\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"data\");\n    \n\n    System.out.println( (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"dirimpl\"));\n\n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n    \n    Unload req = new Unload(false);\n    req.setDeleteDataDir(true);\n    req.setCoreName(\"core0\");\n    req.process(coreadmin);\n    \n    dir = new File(dataDir);\n    assertFalse(\"Data directory exists after core unload with deleteDataDir=true : \" + dir, dir.exists());\n  }\n\n","bugFix":["03a23d883b818d258c0eac4c2a49ef05ea534979","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb75838ea3c6b1fa977394f436bfffb53b417bc","date":1418226395,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB1\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"name\", \"BBB1\" );\n    doc.setField( \"type\", \"AAA1\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      ignoreException(\"unknown field\");\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    resetExceptionIgnores();\n\n    // in core0\n    doc = new SolrInputDocument();\n    doc.setField( \"id\", \"BBB1\" );\n    doc.setField( \"name\", \"AAA1\" );\n    doc.setField( \"type\", \"BBB\" );\n    doc.setField( \"core0\", \"AAA1\" );\n\n    up.clear();\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // cross-core join\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name}*:*\" ) ).getResults().size() );  // normal join\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"{!join from=type to=name fromIndex=core0}id:AAA\" ) ).getResults().size() );\n\n    // test that no rewrite happens in core0 (if it does, it will rewrite to BBB1 and nothing will be found in core1)\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}id:BB~\" ) ).getResults().size() );\n\n    // test that query is parsed in the fromCore\n    assertEquals( 2, getSolrCore0().query( new SolrQuery( \"{!join from=type to=name fromIndex=core1}core1:yup\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    // core should still have docs\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try { \n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    \n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    NamedList<Object> response = getSolrCore(\"corefoo\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String indexDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"index\");\n    \n    response = getSolrCore(\"core0\").query(new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\")).get(\"data\");\n    \n    // test delete index on core\n    CoreAdminRequest.unloadCore(\"corefoo\", true, coreadmin);\n    File dir = new File(indexDir);\n    assertFalse(\"Index directory exists after core unload with deleteIndex=true\", dir.exists());\n    \n    Unload req = new Unload(false);\n    req.setDeleteDataDir(true);\n    req.setCoreName(\"core0\");\n    req.process(coreadmin);\n    \n    dir = new File(dataDir);\n    assertFalse(\"Data directory exists after core unload with deleteDataDir=true : \" + dir, dir.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a8954ce7749d4df8d7288d333126e079af73f12":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["f7e9263ec3b8515d17804c44e04d379b80436a65"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["7a8954ce7749d4df8d7288d333126e079af73f12"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2295e2775c39b05b81f566701b1e7e9475128f2":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7e9263ec3b8515d17804c44e04d379b80436a65":["5feef8a61b3cf481ea3eb95b284faeb6aa83434c"],"f2126b84bd093fa3d921582a109a0ee578c28126":["7a8954ce7749d4df8d7288d333126e079af73f12","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"],"5feef8a61b3cf481ea3eb95b284faeb6aa83434c":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7a8954ce7749d4df8d7288d333126e079af73f12":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c26f00b574427b55127e869b935845554afde1fa":["5feef8a61b3cf481ea3eb95b284faeb6aa83434c"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["7a8954ce7749d4df8d7288d333126e079af73f12"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["e2295e2775c39b05b81f566701b1e7e9475128f2","f2126b84bd093fa3d921582a109a0ee578c28126"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f7e9263ec3b8515d17804c44e04d379b80436a65":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"5feef8a61b3cf481ea3eb95b284faeb6aa83434c":["f7e9263ec3b8515d17804c44e04d379b80436a65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}