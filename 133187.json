{"path":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"flush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a05409176bd65129d67a785ee70e881e238a9aef","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}