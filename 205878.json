{"path":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","commits":[{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}