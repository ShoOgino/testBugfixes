{"path":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","commits":[{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n\n    assert liveDocs != null;\n    assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + liveDocs.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = liveDocs.get(docID);\n    if (didDelete) {\n      ((MutableBits) liveDocs).clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n\n    assert liveDocs != null;\n    assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + liveDocs.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = liveDocs.get(docID);\n    if (didDelete) {\n      ((MutableBits) liveDocs).clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    MutableBits mutableBits = getMutableBits();\n    assert mutableBits != null;\n    assert docID >= 0 && docID < mutableBits.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + mutableBits.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = mutableBits.get(docID);\n    if (didDelete) {\n      mutableBits.clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n\n    assert liveDocs != null;\n    assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + liveDocs.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = liveDocs.get(docID);\n    if (didDelete) {\n      ((MutableBits) liveDocs).clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8a3dfca2d8b39c20bdfc87eb7171c06ea9400d","date":1525873214,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    FixedBitSet mutableBits = getMutableBits();\n    assert mutableBits != null;\n    assert docID >= 0 && docID < mutableBits.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + mutableBits.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = mutableBits.get(docID);\n    if (didDelete) {\n      mutableBits.clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    MutableBits mutableBits = getMutableBits();\n    assert mutableBits != null;\n    assert docID >= 0 && docID < mutableBits.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + mutableBits.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = mutableBits.get(docID);\n    if (didDelete) {\n      mutableBits.clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13bce432480722e4f48bce0da3623dab44dd8d9c","date":1525873214,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    FixedBitSet mutableBits = getMutableBits();\n    assert mutableBits != null;\n    assert docID >= 0 && docID < mutableBits.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + mutableBits.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    final boolean didDelete = mutableBits.get(docID);\n    if (didDelete) {\n      mutableBits.clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    FixedBitSet mutableBits = getMutableBits();\n    assert mutableBits != null;\n    assert docID >= 0 && docID < mutableBits.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + mutableBits.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = mutableBits.get(docID);\n    if (didDelete) {\n      mutableBits.clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13bce432480722e4f48bce0da3623dab44dd8d9c":["fb8a3dfca2d8b39c20bdfc87eb7171c06ea9400d"],"fb8a3dfca2d8b39c20bdfc87eb7171c06ea9400d":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13bce432480722e4f48bce0da3623dab44dd8d9c"]},"commit2Childs":{"13bce432480722e4f48bce0da3623dab44dd8d9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb8a3dfca2d8b39c20bdfc87eb7171c06ea9400d":["13bce432480722e4f48bce0da3623dab44dd8d9c"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["fb8a3dfca2d8b39c20bdfc87eb7171c06ea9400d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}