{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}