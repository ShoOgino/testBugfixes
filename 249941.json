{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(), m, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf3dec259855047447dd4d8b00a92ac220a476d1","date":1389889474,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(m)) ;\n  }\n\n","sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(m)) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRole(CollectionAction,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"role\", \"node\");\n    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n    copyIfNotNull(req.getParams(), map,\"role\", \"node\");\n    ZkNodeProps m = new ZkNodeProps(map);\n    if(!KNOWN_ROLES.contains(m.getStr(\"role\"))) throw new SolrException(ErrorCode.BAD_REQUEST,\"Unknown role. Supported roles are ,\"+ KNOWN_ROLES);\n    handleResponse(action.toString().toLowerCase(Locale.ROOT), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf3dec259855047447dd4d8b00a92ac220a476d1":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["bf3dec259855047447dd4d8b00a92ac220a476d1"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"bf3dec259855047447dd4d8b00a92ac220a476d1":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["bf3dec259855047447dd4d8b00a92ac220a476d1"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["9ebd3a557326ef3eab85b73a8cff781f7d801248","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}