{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopy() {\n    final int valueCount = 689;\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","sourceNew":"  public void testCopy() {\n    final int valueCount = _TestUtil.nextInt(random(), 5, 600);\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testCopy() {\n    final int valueCount = 689;\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","sourceNew":"  public void testCopy() {\n    final int valueCount = _TestUtil.nextInt(random(), 5, 600);\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testCopy() {\n    final int valueCount = 689;\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","sourceNew":"  public void testCopy() {\n    final int valueCount = _TestUtil.nextInt(random(), 5, 600);\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testCopy() {\n    final int valueCount = 689;\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testCopy().mjava","sourceNew":"  public void testCopy() {\n    final int valueCount = TestUtil.nextInt(random(), 5, 600);\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testCopy() {\n    final int valueCount = _TestUtil.nextInt(random(), 5, 600);\n    final int off1 = random().nextInt(valueCount);\n    final int off2 = random().nextInt(valueCount);\n    final int len = random().nextInt(Math.min(valueCount - off1, valueCount - off2));\n    final int mem = random().nextInt(1024);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      for (PackedInts.Mutable r1 : createPackedInts(valueCount, bpv)) {\n        for (int i = 0; i < r1.size(); ++i) {\n          r1.set(i, (31L * i - 1023) & mask);\n        }\n        for (PackedInts.Mutable r2 : createPackedInts(valueCount, bpv)) {\n          String msg = \"src=\" + r1 + \", dest=\" + r2 + \", srcPos=\" + off1\n              + \", destPos=\" + off2 + \", len=\" + len + \", mem=\" + mem;\n          PackedInts.copy(r1, off1, r2, off2, len, mem);\n          for (int i = 0; i < r2.size(); ++i) {\n            String m = msg + \", i=\" + i;\n            if (i >= off2 && i < off2 + len) {\n              assertEquals(m, r1.get(i - off2 + off1), r2.get(i));\n            } else {\n              assertEquals(m, 0, r2.get(i));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["747628bb19a950ac2141b16756bdce9a47e94cc2","829d9441b99897377d279219000bb71b50c026be"],"6613659748fe4411a7dcf85266e55db1f95f7315":["829d9441b99897377d279219000bb71b50c026be"],"829d9441b99897377d279219000bb71b50c026be":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["747628bb19a950ac2141b16756bdce9a47e94cc2","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}