{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":2,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["622a708571e534680618b3c5e0c28ac539a47776"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}