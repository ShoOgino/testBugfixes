{"path":"src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader).mjava","commits":[{"id":"9dcc426f9c6e8f551cec9be0fecbc7f2f6191d18","date":1263650855,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @return A Set with the reader's words\n   */\n  public static Set<String> getSnowballWordSet(Reader reader)\n      throws IOException {\n    final Set<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      if (br != null) br.close();\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @return A Set with the reader's words\n   */\n  public static Set<String> getSnowballWordSet(Reader reader)\n      throws IOException {\n    final Set<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      if (br != null) br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @return A Set with the reader's words\n   */\n  public static Set<String> getSnowballWordSet(Reader reader)\n      throws IOException {\n    final Set<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      if (br != null) br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dcc426f9c6e8f551cec9be0fecbc7f2f6191d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9dcc426f9c6e8f551cec9be0fecbc7f2f6191d18"]},"commit2Childs":{"9dcc426f9c6e8f551cec9be0fecbc7f2f6191d18":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcc426f9c6e8f551cec9be0fecbc7f2f6191d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}