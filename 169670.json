{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","pathOld":"/dev/null","sourceNew":"    public Builder add(BooleanClause clause) {\n      add(clause.getQuery(), clause.getOccur());\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","date":1444679002,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","sourceNew":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      add(clause.getQuery(), clause.getOccur());\n      return this;\n    }\n\n","sourceOld":"    public Builder add(BooleanClause clause) {\n      add(clause.getQuery(), clause.getOccur());\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6089087cfc85442f6750324d5038cd5149125454","date":1479700598,"type":3,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","sourceNew":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      if (clauses.size() >= maxClauseCount) {\n        throw new TooManyClauses();\n      }\n      clauses.add(clause);\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      add(clause.getQuery(), clause.getOccur());\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","sourceNew":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      if (clauses.size() >= maxClauseCount) {\n        throw new TooManyClauses();\n      }\n      clauses.add(clause);\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      add(clause.getQuery(), clause.getOccur());\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.Builder#add(BooleanClause).mjava","sourceNew":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws IndexSearcher.TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      // We do the final deep check for max clauses count limit during\n      //<code>IndexSearcher.rewrite</code> but do this check to short\n      // circuit in case a single query holds more than numClauses\n      if (clauses.size() >= IndexSearcher.maxClauseCount) {\n        throw new IndexSearcher.TooManyClauses();\n      }\n      clauses.add(clause);\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Add a new clause to this {@link Builder}. Note that the order in which\n     * clauses are added does not have any impact on matching documents or query\n     * performance.\n     * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n     */\n    public Builder add(BooleanClause clause) {\n      if (clauses.size() >= maxClauseCount) {\n        throw new TooManyClauses();\n      }\n      clauses.add(clause);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6089087cfc85442f6750324d5038cd5149125454":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","6089087cfc85442f6750324d5038cd5149125454"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["6089087cfc85442f6750324d5038cd5149125454"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"6089087cfc85442f6750324d5038cd5149125454":["cd70af1186a18d10a788433cc33be44327a83ce7","36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["6089087cfc85442f6750324d5038cd5149125454","cd70af1186a18d10a788433cc33be44327a83ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}