{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentInfoPerCommit).mjava","sourceNew":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.drop: \" + info);\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","sourceOld":"    public synchronized void drop(SegmentInfoPerCommit info) throws IOException {\n      final ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.drop: \" + info);\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","sourceNew":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","sourceOld":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.drop: \" + info);\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","sourceNew":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","sourceOld":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.drop: \" + info);\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","sourceNew":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","sourceOld":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.drop: \" + info);\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","date":1512420564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","sourceNew":"    public synchronized boolean drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    public synchronized void drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n      }\n    }\n\n","bugFix":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#drop(SegmentCommitInfo).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean drop(SegmentCommitInfo info) throws IOException {\n      final ReadersAndUpdates rld = readerMap.get(info);\n      if (rld != null) {\n        assert info == rld.info;\n        readerMap.remove(info);\n        rld.dropReaders();\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1926100d9b67becc9701c54266fee3ba7878a5f0":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1926100d9b67becc9701c54266fee3ba7878a5f0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}