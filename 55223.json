{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,SolrCore,CoreContainer,boolean).mjava","commits":[{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(String,CoreDescriptor,boolean,boolean,CloudDescriptor,String,String,String,ZkNodeProps,SolrCore,CoreContainer,boolean).mjava","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(String coreName, final CoreDescriptor desc,\n                                boolean recoverReloadedCores, final boolean isLeader,\n                                final CloudDescriptor cloudDesc, final String collection,\n                                final String shardZkNodeName, String shardId, ZkNodeProps leaderProps,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (!afterExpiration && core.isReloaded() && !recoverReloadedCores) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,SolrCore,CoreContainer,boolean).mjava","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        log.info(\"Leader's term larger than core \" + core.getName() + \"; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84f20f331d8001864545c7021812d8c6509c7593"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"84f20f331d8001864545c7021812d8c6509c7593":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["84f20f331d8001864545c7021812d8c6509c7593","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}