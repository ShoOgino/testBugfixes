{"path":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","commits":[{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(Field.Text(\"default\",\"one two\"));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"default\",\"one three\"));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(Field.Text(\"default\",\"two four\"));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74bc2c68d78d1e868b9a1aa031180660cb42176e","date":1097423912,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(Field.Text(\"default\",\"one two\"));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"default\",\"one three\"));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(Field.Text(\"default\",\"two four\"));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n  }\n\n","bugFix":["eafd816608011f66422f3052c37962973582d12a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21a7181c614505c5c57e6c6f60a3aa89695292e0","date":1185834596,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer =\n      new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["b65b4e4fa6ab206814d495da779e247d979fe2f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["21a7181c614505c5c57e6c6f60a3aa89695292e0"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["512366c273bec3211f7d36ef75e58e3d32a06e26","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"eafd816608011f66422f3052c37962973582d12a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21a7181c614505c5c57e6c6f60a3aa89695292e0":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["74bc2c68d78d1e868b9a1aa031180660cb42176e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"74bc2c68d78d1e868b9a1aa031180660cb42176e":["eafd816608011f66422f3052c37962973582d12a"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"eafd816608011f66422f3052c37962973582d12a":["74bc2c68d78d1e868b9a1aa031180660cb42176e"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eafd816608011f66422f3052c37962973582d12a"],"21a7181c614505c5c57e6c6f60a3aa89695292e0":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["21a7181c614505c5c57e6c6f60a3aa89695292e0"],"74bc2c68d78d1e868b9a1aa031180660cb42176e":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}