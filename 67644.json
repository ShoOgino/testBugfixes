{"path":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#mkdirsWithExistsAndPermissionCheck(LocalFileSystem,Path,FsPermission).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#mkdirsWithExistsAndPermissionCheck(LocalFileSystem,Path,FsPermission).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the directory or check permissions if it already exists.\n   *\n   * The semantics of mkdirsWithExistsAndPermissionCheck method is different\n   * from the mkdirs method provided in the Sun's java.io.File class in the\n   * following way:\n   * While creating the non-existent parent directories, this method checks for\n   * the existence of those directories if the mkdir fails at any point (since\n   * that directory might have just been created by some other process).\n   * If both mkdir() and the exists() check fails for any seemingly\n   * non-existent directory, then we signal an error; Sun's mkdir would signal\n   * an error (return false) if a directory it is attempting to create already\n   * exists or the mkdir fails.\n   *\n   * @param localFS local filesystem\n   * @param dir directory to be created or checked\n   * @param expected expected permission\n   * @throws IOException exception making dir and checking\n   */\n  static void mkdirsWithExistsAndPermissionCheck(\n      LocalFileSystem localFS, Path dir, FsPermission expected)\n      throws IOException {\n    File directory = localFS.pathToFile(dir);\n    boolean created = false;\n\n    if (!directory.exists())\n      created = mkdirsWithExistsCheck(directory);\n\n    if (created || !localFS.getFileStatus(dir).getPermission().equals(expected))\n      localFS.setPermission(dir, expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#mkdirsWithExistsAndPermissionCheck(LocalFileSystem,Path,FsPermission).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the directory or check permissions if it already exists.\n   *\n   * The semantics of mkdirsWithExistsAndPermissionCheck method is different\n   * from the mkdirs method provided in the Sun's java.io.File class in the\n   * following way:\n   * While creating the non-existent parent directories, this method checks for\n   * the existence of those directories if the mkdir fails at any point (since\n   * that directory might have just been created by some other process).\n   * If both mkdir() and the exists() check fails for any seemingly\n   * non-existent directory, then we signal an error; Sun's mkdir would signal\n   * an error (return false) if a directory it is attempting to create already\n   * exists or the mkdir fails.\n   *\n   * @param localFS local filesystem\n   * @param dir directory to be created or checked\n   * @param expected expected permission\n   * @throws IOException exception making dir and checking\n   */\n  static void mkdirsWithExistsAndPermissionCheck(\n      LocalFileSystem localFS, Path dir, FsPermission expected)\n      throws IOException {\n    File directory = localFS.pathToFile(dir);\n    boolean created = false;\n\n    if (!directory.exists())\n      created = mkdirsWithExistsCheck(directory);\n\n    if (created || !localFS.getFileStatus(dir).getPermission().equals(expected))\n      localFS.setPermission(dir, expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}