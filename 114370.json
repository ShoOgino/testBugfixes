{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeRangeFacetsUnderLimits(ResponseBuilder).mjava","commits":[{"id":"8ff4734b6c86245e852fe8b6a286716d5e59d415","date":1410194063,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeRangeFacetsUnderLimits(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void removeRangeFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n\n    FacetInfo fi = rb._facetInfo;\n\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n        (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n            fi.rangeFacets;\n\n    if (facet_ranges == null) {\n      return;\n    }\n\n    // go through each facet_range\n    for (Map.Entry<String, SimpleOrderedMap<Object>> entry : facet_ranges) {\n      boolean replace = false;\n      final String field = entry.getKey();\n      int minCount = rb.req.getParams().getFieldInt(field, FacetParams.FACET_MINCOUNT, 0);\n      if (minCount == 0) {\n        continue;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Integer> vals\n          = (NamedList<Integer>) facet_ranges.get(field).get(\"counts\");\n      NamedList newList = new NamedList();\n      for (Map.Entry<String, Integer> pair : vals) {\n        if (pair.getValue() >= minCount) {\n          newList.add(pair.getKey(), pair.getValue());\n        } else {\n          log.trace(\"Removing facet/key: \" + pair.getKey() + \"/\" + pair.getValue().toString() + \" mincount=\" + minCount);\n          replace = true;\n        }\n      }\n      if (replace) {\n        vals.clear();\n        vals.addAll(newList);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeRangeFacetsUnderLimits(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeRangeFacetsUnderLimits(ResponseBuilder).mjava","sourceNew":"  private void removeRangeFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n\n    FacetInfo fi = rb._facetInfo;\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      final String field = entry.getKey();\n      final RangeFacetRequest.DistribRangeFacet rangeFacet = entry.getValue();\n\n      int minCount = rb.req.getParams().getFieldInt(field, FacetParams.FACET_MINCOUNT, 0);\n      if (minCount == 0) {\n        continue;\n      }\n\n      rangeFacet.removeRangeFacetsUnderLimits(minCount);\n    }\n  }\n\n","sourceOld":"  private void removeRangeFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n\n    FacetInfo fi = rb._facetInfo;\n\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n        (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n            fi.rangeFacets;\n\n    if (facet_ranges == null) {\n      return;\n    }\n\n    // go through each facet_range\n    for (Map.Entry<String, SimpleOrderedMap<Object>> entry : facet_ranges) {\n      boolean replace = false;\n      final String field = entry.getKey();\n      int minCount = rb.req.getParams().getFieldInt(field, FacetParams.FACET_MINCOUNT, 0);\n      if (minCount == 0) {\n        continue;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Integer> vals\n          = (NamedList<Integer>) facet_ranges.get(field).get(\"counts\");\n      NamedList newList = new NamedList();\n      for (Map.Entry<String, Integer> pair : vals) {\n        if (pair.getValue() >= minCount) {\n          newList.add(pair.getKey(), pair.getValue());\n        } else {\n          log.trace(\"Removing facet/key: \" + pair.getKey() + \"/\" + pair.getValue().toString() + \" mincount=\" + minCount);\n          replace = true;\n        }\n      }\n      if (replace) {\n        vals.clear();\n        vals.addAll(newList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}