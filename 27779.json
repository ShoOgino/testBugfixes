{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    final SimilarityProvider delegate = search.getSimilarityProvider();\n    search.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"323f871ffe96b871d8c534a614be60751bb023c2":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["323f871ffe96b871d8c534a614be60751bb023c2"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"323f871ffe96b871d8c534a614be60751bb023c2":["790e1fde4caa765b3faaad3fbcd25c6973450336","868da859b43505d9d2a023bfeae6dd0c795f5295"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["323f871ffe96b871d8c534a614be60751bb023c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}