{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":null,"sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":null,"sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["0f080986da691a3bba7b757f43ab72cdc82b57ce","47777586dd4c026834be0b2cc454d527cf8884b3"],"47777586dd4c026834be0b2cc454d527cf8884b3":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47777586dd4c026834be0b2cc454d527cf8884b3"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"47777586dd4c026834be0b2cc454d527cf8884b3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}