{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b04413d237e43414609f041f50db04d553d686f","date":1515761310,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6642fcae5e9ca4249b7fe454fcf7f8494569da","date":1516683888,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.add(DEFAULT_PREFERENCE);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>)jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>();\n    paramsOfInterest.add(ImplicitSnitch.DISK);//always get freedisk anyway.\n    paramsOfInterest.add(ImplicitSnitch.CORES);//always get cores anyway.\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Suggestion.ConditionType>> params = newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    this.params = Collections.unmodifiableList(newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList()));\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      ConditionType t = Suggestion.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Suggestion.ConditionType>> params = newParams.stream()\n        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8854763f018feadbb30c35a83fd9599adb51ef63","date":1534341747,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    this(jsonMap, 0);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap) {\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    this(jsonMap, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1bbcda32e5cd37ef61ea1190bacd080308e22070","7b6642fcae5e9ca4249b7fe454fcf7f8494569da"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","954590f07cfbe2c3ccb86e29d0742c43740ca509"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["98f11c416d30e556e0004a9a84960702d12d35b1"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9837f40c922407d857991971de6def18eda0857b":["33ae23947c41339ea2b352422bb762dfb4a17077"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33ae23947c41339ea2b352422bb762dfb4a17077","9837f40c922407d857991971de6def18eda0857b"],"0b04413d237e43414609f041f50db04d553d686f":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["8854763f018feadbb30c35a83fd9599adb51ef63"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"78231225260fb5b3bf9920f203d71477d5501c65":["9837f40c922407d857991971de6def18eda0857b"],"8854763f018feadbb30c35a83fd9599adb51ef63":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"7b6642fcae5e9ca4249b7fe454fcf7f8494569da":["0b04413d237e43414609f041f50db04d553d686f"],"33ae23947c41339ea2b352422bb762dfb4a17077":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["33ae23947c41339ea2b352422bb762dfb4a17077"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["8854763f018feadbb30c35a83fd9599adb51ef63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["b94236357aaa22b76c10629851fe4e376e0cea82","0b04413d237e43414609f041f50db04d553d686f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"9837f40c922407d857991971de6def18eda0857b":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","78231225260fb5b3bf9920f203d71477d5501c65"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"0b04413d237e43414609f041f50db04d553d686f":["7b6642fcae5e9ca4249b7fe454fcf7f8494569da"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"8854763f018feadbb30c35a83fd9599adb51ef63":["3f504512a03d978990cbff30db0522b354e846db"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"7b6642fcae5e9ca4249b7fe454fcf7f8494569da":["b94236357aaa22b76c10629851fe4e376e0cea82"],"33ae23947c41339ea2b352422bb762dfb4a17077":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"98f11c416d30e556e0004a9a84960702d12d35b1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"27639bb5e041490ce599065875dd2f6d8beef62a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}