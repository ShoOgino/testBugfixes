{"path":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws an exception if the requested currency pair cannot be found \n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws an exception if the requested currency pair cannot be found \n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578eff0bc5aee20ceab0bb85d2e639e93d68c952","date":1335146102,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws an exception if the requested currency pair cannot be found \n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. If a direct rate has been loaded,\n   * it is used. Otherwise, if a rate is known to convert the target currency to the source, the inverse\n   * exchange rate is computed.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (sourceCurrencyCode.equals(targetCurrencyCode)) {\n      return 1.0;\n    }\n\n    Double directRate = lookupRate(sourceCurrencyCode, targetCurrencyCode);\n\n    if (directRate != null) {\n      return directRate;\n    }\n\n    Double symmetricRate = lookupRate(targetCurrencyCode, sourceCurrencyCode);\n\n    if (symmetricRate != null) {\n      return 1.0 / symmetricRate;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No available conversion rate between \" + sourceCurrencyCode + \" to \" + targetCurrencyCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["578eff0bc5aee20ceab0bb85d2e639e93d68c952","7530de27b87b961b51f01bd1299b7004d46e8823"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7530de27b87b961b51f01bd1299b7004d46e8823","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["7530de27b87b961b51f01bd1299b7004d46e8823","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}