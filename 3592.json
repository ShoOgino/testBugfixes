{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long tomeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <tomeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long tomeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <tomeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long tomeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <tomeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["bafca15d8e408346a67f4282ad1143b88023893b"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}