{"path":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#testRandomCompositeIds().mjava","commits":[{"id":"5fe03bc79bce6cdaa190cac905d8f82a01e8edcc","date":1405792133,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#testRandomCompositeIds().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure CompositeIdRouter can route random IDs without throwing exceptions */\n  public void testRandomCompositeIds() throws Exception {\n    DocRouter router = DocRouter.getDocRouter(CompositeIdRouter.NAME);\n    DocCollection coll = createCollection(TestUtil.nextInt(random(), 1, 10), router);\n    StringBuilder idBuilder = new StringBuilder();\n    for (int i = 0 ; i < 10000 ; ++i) {\n      idBuilder.setLength(0);\n      int numParts = TestUtil.nextInt(random(), 1, 30);\n      for (int part = 0; part < numParts; ++part) {\n        switch (random().nextInt(5)) {\n          case 0: idBuilder.append('!'); break;\n          case 1: idBuilder.append('/'); break;\n          case 2: idBuilder.append(TestUtil.nextInt(random(),-100, 1000)); break;\n          default: {\n            int length = TestUtil.nextInt(random(), 1, 10);\n            char[] str = new char[length];\n            TestUtil.randomFixedLengthUnicodeString(random(), str, 0, length);\n            idBuilder.append(str);\n            break;\n          } \n        }\n      }\n      String id = idBuilder.toString();\n      try {\n        Slice targetSlice = router.getTargetSlice(id, null, null, coll);\n        assertNotNull(targetSlice);\n      } catch (Exception e) {\n        throw new Exception(\"Exception routing id '\" + id + \"'\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["747dd71fefcbc7142661c25334b74c518fef4d81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#testRandomCompositeIds().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner#testRandomCompositeIds().mjava","sourceNew":"  /** Make sure CompositeIdRouter can route random IDs without throwing exceptions */\n  public void testRandomCompositeIds() throws Exception {\n    DocRouter router = DocRouter.getDocRouter(CompositeIdRouter.NAME);\n    DocCollection coll = createCollection(TestUtil.nextInt(random(), 1, 10), router);\n    StringBuilder idBuilder = new StringBuilder();\n    for (int i = 0 ; i < 10000 ; ++i) {\n      idBuilder.setLength(0);\n      int numParts = TestUtil.nextInt(random(), 1, 30);\n      for (int part = 0; part < numParts; ++part) {\n        switch (random().nextInt(5)) {\n          case 0: idBuilder.append('!'); break;\n          case 1: idBuilder.append('/'); break;\n          case 2: idBuilder.append(TestUtil.nextInt(random(),-100, 1000)); break;\n          default: {\n            int length = TestUtil.nextInt(random(), 1, 10);\n            char[] str = new char[length];\n            TestUtil.randomFixedLengthUnicodeString(random(), str, 0, length);\n            idBuilder.append(str);\n            break;\n          } \n        }\n      }\n      String id = idBuilder.toString();\n      try {\n        Slice targetSlice = router.getTargetSlice(id, null, null, null, coll);\n        assertNotNull(targetSlice);\n      } catch (Exception e) {\n        throw new Exception(\"Exception routing id '\" + id + \"'\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure CompositeIdRouter can route random IDs without throwing exceptions */\n  public void testRandomCompositeIds() throws Exception {\n    DocRouter router = DocRouter.getDocRouter(CompositeIdRouter.NAME);\n    DocCollection coll = createCollection(TestUtil.nextInt(random(), 1, 10), router);\n    StringBuilder idBuilder = new StringBuilder();\n    for (int i = 0 ; i < 10000 ; ++i) {\n      idBuilder.setLength(0);\n      int numParts = TestUtil.nextInt(random(), 1, 30);\n      for (int part = 0; part < numParts; ++part) {\n        switch (random().nextInt(5)) {\n          case 0: idBuilder.append('!'); break;\n          case 1: idBuilder.append('/'); break;\n          case 2: idBuilder.append(TestUtil.nextInt(random(),-100, 1000)); break;\n          default: {\n            int length = TestUtil.nextInt(random(), 1, 10);\n            char[] str = new char[length];\n            TestUtil.randomFixedLengthUnicodeString(random(), str, 0, length);\n            idBuilder.append(str);\n            break;\n          } \n        }\n      }\n      String id = idBuilder.toString();\n      try {\n        Slice targetSlice = router.getTargetSlice(id, null, null, coll);\n        assertNotNull(targetSlice);\n      } catch (Exception e) {\n        throw new Exception(\"Exception routing id '\" + id + \"'\", e);\n      }\n    }\n  }\n\n","bugFix":["5fe03bc79bce6cdaa190cac905d8f82a01e8edcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5fe03bc79bce6cdaa190cac905d8f82a01e8edcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"747dd71fefcbc7142661c25334b74c518fef4d81":["5fe03bc79bce6cdaa190cac905d8f82a01e8edcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["747dd71fefcbc7142661c25334b74c518fef4d81"]},"commit2Childs":{"5fe03bc79bce6cdaa190cac905d8f82a01e8edcc":["747dd71fefcbc7142661c25334b74c518fef4d81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5fe03bc79bce6cdaa190cac905d8f82a01e8edcc"],"747dd71fefcbc7142661c25334b74c518fef4d81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}