{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","commits":[{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader, String coll) {\n    String collectionPath = getCollectionPath(coll);\n    if(zkStateReader.ephemeralCollectionData !=null ){\n      ClusterState cs = (ClusterState) zkStateReader.ephemeralCollectionData.get(collectionPath);\n      if(cs !=null) {\n        return  cs.getCollectionStates().get(coll);\n      }\n    }\n    try {\n      if (!zkStateReader.getZkClient().exists(collectionPath, true)) return null;\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(), zkStateReader, collectionPath);\n      return state.getCollectionStates().get(coll);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","sourceNew":null,"sourceOld":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader, String coll) {\n    String collectionPath = getCollectionPath(coll);\n    if(zkStateReader.ephemeralCollectionData !=null ){\n      ClusterState cs = (ClusterState) zkStateReader.ephemeralCollectionData.get(collectionPath);\n      if(cs !=null) {\n        return  cs.getCollectionStates().get(coll);\n      }\n    }\n    try {\n      if (!zkStateReader.getZkClient().exists(collectionPath, true)) return null;\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data, Collections.<String>emptySet(), zkStateReader, collectionPath);\n      return state.getCollectionStates().get(coll);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      if (!zkStateReader.getZkClient().exists(collectionPath, true)) return null;\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n          Collections.<String> emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6","date":1434002938,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","sourceNew":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n          Collections.<String> emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","sourceOld":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      if (!zkStateReader.getZkClient().exists(collectionPath, true)) return null;\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n          Collections.<String> emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","sourceNew":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    try {\n      return zkStateReader.fetchCollectionState(coll, null);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","sourceOld":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkStateReader.getZkClient().getData(collectionPath, null, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n          Collections.<String> emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"No node available : \" + collectionPath, e);\n      return null;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionLive(ZkStateReader,String).mjava","sourceNew":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader, String coll) {\n    try {\n      return zkStateReader.fetchCollectionState(coll, null);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK: \" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not load collection from ZK: \" + coll, e);\n    }\n  }\n\n","sourceOld":"  public static DocCollection getCollectionLive(ZkStateReader zkStateReader,\n      String coll) {\n    try {\n      return zkStateReader.fetchCollectionState(coll, null);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not load collection from ZK:\" + coll, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["9279b175e5e66258442d2123a50f052219a9cc1b"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279b175e5e66258442d2123a50f052219a9cc1b":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}