{"path":"src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","commits":[{"id":"00f15d6b8e3e70d793276689970650aea4ff4996","date":1226368489,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","pathOld":"src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","sourceNew":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","sourceOld":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00f15d6b8e3e70d793276689970650aea4ff4996":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["00f15d6b8e3e70d793276689970650aea4ff4996"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00f15d6b8e3e70d793276689970650aea4ff4996"],"00f15d6b8e3e70d793276689970650aea4ff4996":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}