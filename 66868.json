{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public abstract void preCommit(CommitUpdateCommand cmd);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      addOldLog(prevTlog);\n    }\n  }\n\n","sourceOld":"  public abstract void preCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      addOldLog(prevTlog);\n    }\n  }\n\n","sourceOld":"  public abstract void preCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      addOldLog(prevTlog);\n    }\n  }\n\n","sourceOld":"  public abstract void preCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n    }\n  }\n\n","sourceOld":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      addOldLog(prevTlog);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n    }\n  }\n\n","sourceOld":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      addOldLog(prevTlog);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719","date":1533082421,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      if (prevTlog != null) {\n        // postCommit for prevTlog is not called, may be the index is corrupted\n        // if we override prevTlog value, the correspond tlog will be leaked, close it first\n        postCommit(cmd);\n      }\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n    }\n  }\n\n","sourceOld":"  public void preCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      if (debug) {\n        log.debug(\"TLOG: preCommit\");\n      }\n\n      if (getState() != State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        // if we aren't in the active state, and this isn't a replay\n        // from the recovery process, then we shouldn't mess with\n        // the current transaction log.  This normally shouldn't happen\n        // as DistributedUpdateProcessor will prevent this.  Commits\n        // that don't use the processor are possible though.\n        return;\n      }\n\n      // since we're changing the log, we must change the map.\n      newMap();\n\n      if (prevTlog != null) {\n        globalStrings = prevTlog.getGlobalStrings();\n      }\n\n      // since document additions can happen concurrently with commit, create\n      // a new transaction log first so that we know the old one is definitely\n      // in the index.\n      prevTlog = tlog;\n      tlog = null;\n      id++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}