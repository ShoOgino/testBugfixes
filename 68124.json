{"path":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = test.replaceAll(\"(?<!\\\\\\\\)\\'\", \"\\\"\");\n      testJSON = testJSON.replaceAll(\"\\\\\\\\\\'\", \"'\");\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3e6b016ec9c0f86928264457cd5a4e62864858b","date":1373471675,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","sourceNew":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = test.replaceAll(\"(?<!\\\\\\\\)\\'\", \"\\\"\");\n      testJSON = testJSON.replaceAll(\"\\\\\\\\\\'\", \"'\");\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","sourceNew":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = test.replaceAll(\"(?<!\\\\\\\\)\\'\", \"\\\"\");\n      testJSON = testJSON.replaceAll(\"\\\\\\\\\\'\", \"'\");\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJPost(String,String,double,String...).mjava","sourceNew":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: {}\", request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error={}\"\n              + \"\\n expected ={}\\n response = {}\\n request = {}\\n\"\n              , err, testJSON, response, request);\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected ={}\\n response = {}\\n request = {}\\n\"\n              ,testJSON, response, request);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates the response from a PUT request matches some JSON test expressions\n   * and closes the query. The text expression is of the form path==JSON.\n   * To facilitate easy embedding in Java strings, the JSON can have double\n   * quotes replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param request a URL path with optional query params, e.g. \"/schema/fields?fl=id,_version_\"\n   * @param content The content to include with the PUT request\n   * @param delta tolerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJPost(String request, String content, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.post(request, content);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3e6b016ec9c0f86928264457cd5a4e62864858b":["08970e5b8411182a29412c177eff67ec1110095b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08970e5b8411182a29412c177eff67ec1110095b","d3e6b016ec9c0f86928264457cd5a4e62864858b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d3e6b016ec9c0f86928264457cd5a4e62864858b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3e6b016ec9c0f86928264457cd5a4e62864858b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["d3e6b016ec9c0f86928264457cd5a4e62864858b","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}