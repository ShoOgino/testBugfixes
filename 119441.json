{"path":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}