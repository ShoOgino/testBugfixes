{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,Comparator<Tuple> comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof ExpressibleStream)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","sourceNew":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,Comparator<Tuple> comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,Comparator<Tuple> comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof ExpressibleStream)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,StreamComparator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#init(String,String,TupleStream,int,Comparator[Tuple]).mjava","sourceNew":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,StreamComparator comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost,String collection,TupleStream tupleStream,int workers,Comparator<Tuple> comp) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.workers = workers;\n    this.comp = comp;\n    this.tupleStream = tupleStream;\n\n    // requires Expressible stream and comparator\n    if(!objectSerialize && !(tupleStream instanceof Expressible)){\n      throw new IOException(\"Unable to create ParallelStream with a non-expressible TupleStream.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0891a6931fc352fc7e61f2752ef9add758d3fb89"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}