{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperty(String,String).mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    throw new UnsupportedOperationException(\"Fetching cluster properties not supported\"\n        + \" using the HttpClusterStateProvider. \"\n        + \"ZkClientClusterStateProvider can be used for this.\"); // TODO\n  }\n\n","sourceOld":"  @Override\n  public Object getClusterProperty(String propertyName, String def) {\n    if (propertyName.equals(ZkStateReader.URL_SCHEME)) {\n      return this.urlScheme;\n    }\n    throw new UnsupportedOperationException(\"Fetching cluster properties not supported\"\n        + \" using the HttpClusterStateProvider. \"\n        + \"ZkClientClusterStateProvider can be used for this.\"); // TODO\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b0975fa00d588fea494a987c39ea9f2dabcb96","date":1508141398,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    throw new UnsupportedOperationException(\"Fetching cluster properties not supported\"\n        + \" using the HttpClusterStateProvider. \"\n        + \"ZkClientClusterStateProvider can be used for this.\"); // TODO\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6f565d9a71b415146d1d62050d268e573c4cb3","date":1541350911,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName : liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // should be an an alias, don't care\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes + \". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName: liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes +\". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a8e78b6470427058bbb198472d95b4c1f1b23f","date":1541639132,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName : liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // not possible! (we passed in null for collection so it can't be an alias)\n        throw new RuntimeException(\"null should never cause NotACollectionException in \" +\n            \"fetchClusterState() Please report this as a bug!\");\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes + \". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName : liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // should be an an alias, don't care\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes + \". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getClusterProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName : liveNodes) {\n      String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n      try (SolrClient client = getSolrClient(baseUrl)) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | HttpSolrClient.RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n      } catch (NotACollectionException e) {\n        // not possible! (we passed in null for collection so it can't be an alias)\n        throw new RuntimeException(\"null should never cause NotACollectionException in \" +\n            \"fetchClusterState() Please report this as a bug!\");\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes + \". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getClusterProperties() {\n    for (String nodeName : liveNodes) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder().\n          withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n          withHttpClient(httpClient).build()) {\n        Map<String, Object> clusterProperties = new HashMap<>();\n        fetchClusterState(client, null, clusterProperties);\n        return clusterProperties;\n      } catch (SolrServerException | RemoteSolrException | IOException e) {\n        log.warn(\"Attempt to fetch cluster state from \" +\n            Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n      } catch (NotACollectionException e) {\n        // not possible! (we passed in null for collection so it can't be an alias)\n        throw new RuntimeException(\"null should never cause NotACollectionException in \" +\n            \"fetchClusterState() Please report this as a bug!\");\n      }\n    }\n    throw new RuntimeException(\"Tried fetching cluster state using the node names we knew of, i.e. \" + liveNodes + \". However, \"\n        + \"succeeded in obtaining the cluster state from none of them.\"\n        + \"If you think your Solr cluster is up and is accessible,\"\n        + \" you could try re-creating a new CloudSolrClient using working\"\n        + \" solrUrl(s) or zkHost(s).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"98a8e78b6470427058bbb198472d95b4c1f1b23f":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["98a8e78b6470427058bbb198472d95b4c1f1b23f"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98a8e78b6470427058bbb198472d95b4c1f1b23f":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}